
doan2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08009858  08009858  00019858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e1c  08009e1c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e24  08009e24  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  200001e8  0800a010  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  0800a010  00020ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf20  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021cc  00000000  00000000  0002d134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037e0  00000000  00000000  00030608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b691  00000000  00000000  00033de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000930f0  00000000  00000000  0003f479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d00  00000000  00000000  000d25bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009840 	.word	0x08009840

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009840 	.word	0x08009840

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b9a4 	b.w	8000f78 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f83c 	bl	8000cb4 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f7ff ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x1c>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__aeabi_d2ulz+0x34>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fcd1 	bl	8000628 <__aeabi_dmul>
 8000c86:	f7ff ffa7 	bl	8000bd8 <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fc52 	bl	8000534 <__aeabi_ui2d>
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f7ff fcc8 	bl	8000628 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fb0a 	bl	80002b8 <__aeabi_dsub>
 8000ca4:	f7ff ff98 	bl	8000bd8 <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <__udivmoddi4>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	9d08      	ldr	r5, [sp, #32]
 8000cba:	4604      	mov	r4, r0
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8083 	bne.w	8000dca <__udivmoddi4+0x116>
 8000cc4:	428a      	cmp	r2, r1
 8000cc6:	4617      	mov	r7, r2
 8000cc8:	d947      	bls.n	8000d5a <__udivmoddi4+0xa6>
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	b142      	cbz	r2, 8000ce2 <__udivmoddi4+0x2e>
 8000cd0:	f1c2 0020 	rsb	r0, r2, #32
 8000cd4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	4097      	lsls	r7, r2
 8000cdc:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ce6:	0c23      	lsrs	r3, r4, #16
 8000ce8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cec:	fa1f fe87 	uxth.w	lr, r7
 8000cf0:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x60>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d06:	f080 8119 	bcs.w	8000f3c <__udivmoddi4+0x288>
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	f240 8116 	bls.w	8000f3c <__udivmoddi4+0x288>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	443b      	add	r3, r7
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d909      	bls.n	8000d40 <__udivmoddi4+0x8c>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d32:	f080 8105 	bcs.w	8000f40 <__udivmoddi4+0x28c>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f240 8102 	bls.w	8000f40 <__udivmoddi4+0x28c>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	443c      	add	r4, r7
 8000d40:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d44:	eba4 040e 	sub.w	r4, r4, lr
 8000d48:	2600      	movs	r6, #0
 8000d4a:	b11d      	cbz	r5, 8000d54 <__udivmoddi4+0xa0>
 8000d4c:	40d4      	lsrs	r4, r2
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e9c5 4300 	strd	r4, r3, [r5]
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xaa>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f282 	clz	r2, r2
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d150      	bne.n	8000e08 <__udivmoddi4+0x154>
 8000d66:	1bcb      	subs	r3, r1, r7
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	2601      	movs	r6, #1
 8000d72:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d76:	0c21      	lsrs	r1, r4, #16
 8000d78:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d80:	fb08 f30c 	mul.w	r3, r8, ip
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0xe4>
 8000d88:	1879      	adds	r1, r7, r1
 8000d8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0xe2>
 8000d90:	428b      	cmp	r3, r1
 8000d92:	f200 80e9 	bhi.w	8000f68 <__udivmoddi4+0x2b4>
 8000d96:	4684      	mov	ip, r0
 8000d98:	1ac9      	subs	r1, r1, r3
 8000d9a:	b2a3      	uxth	r3, r4
 8000d9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000da8:	fb08 f800 	mul.w	r8, r8, r0
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x10c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x10a>
 8000db8:	45a0      	cmp	r8, r4
 8000dba:	f200 80d9 	bhi.w	8000f70 <__udivmoddi4+0x2bc>
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	eba4 0408 	sub.w	r4, r4, r8
 8000dc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dc8:	e7bf      	b.n	8000d4a <__udivmoddi4+0x96>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x12e>
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	f000 80b1 	beq.w	8000f36 <__udivmoddi4+0x282>
 8000dd4:	2600      	movs	r6, #0
 8000dd6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dda:	4630      	mov	r0, r6
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	fab3 f683 	clz	r6, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d14a      	bne.n	8000e80 <__udivmoddi4+0x1cc>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0x140>
 8000dee:	4282      	cmp	r2, r0
 8000df0:	f200 80b8 	bhi.w	8000f64 <__udivmoddi4+0x2b0>
 8000df4:	1a84      	subs	r4, r0, r2
 8000df6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	468c      	mov	ip, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0a8      	beq.n	8000d54 <__udivmoddi4+0xa0>
 8000e02:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e10:	4097      	lsls	r7, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1a:	40d9      	lsrs	r1, r3
 8000e1c:	4330      	orrs	r0, r6
 8000e1e:	0c03      	lsrs	r3, r0, #16
 8000e20:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e24:	fa1f f887 	uxth.w	r8, r7
 8000e28:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e30:	fb06 f108 	mul.w	r1, r6, r8
 8000e34:	4299      	cmp	r1, r3
 8000e36:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3a:	d909      	bls.n	8000e50 <__udivmoddi4+0x19c>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e42:	f080 808d 	bcs.w	8000f60 <__udivmoddi4+0x2ac>
 8000e46:	4299      	cmp	r1, r3
 8000e48:	f240 808a 	bls.w	8000f60 <__udivmoddi4+0x2ac>
 8000e4c:	3e02      	subs	r6, #2
 8000e4e:	443b      	add	r3, r7
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	b281      	uxth	r1, r0
 8000e54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e60:	fb00 f308 	mul.w	r3, r0, r8
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x1c4>
 8000e68:	1879      	adds	r1, r7, r1
 8000e6a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6e:	d273      	bcs.n	8000f58 <__udivmoddi4+0x2a4>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d971      	bls.n	8000f58 <__udivmoddi4+0x2a4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4439      	add	r1, r7
 8000e78:	1acb      	subs	r3, r1, r3
 8000e7a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e7e:	e778      	b.n	8000d72 <__udivmoddi4+0xbe>
 8000e80:	f1c6 0c20 	rsb	ip, r6, #32
 8000e84:	fa03 f406 	lsl.w	r4, r3, r6
 8000e88:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e8c:	431c      	orrs	r4, r3
 8000e8e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e92:	fa01 f306 	lsl.w	r3, r1, r6
 8000e96:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	0c3b      	lsrs	r3, r7, #16
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fa1f f884 	uxth.w	r8, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb2:	fb09 fa08 	mul.w	sl, r9, r8
 8000eb6:	458a      	cmp	sl, r1
 8000eb8:	fa02 f206 	lsl.w	r2, r2, r6
 8000ebc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x220>
 8000ec2:	1861      	adds	r1, r4, r1
 8000ec4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ec8:	d248      	bcs.n	8000f5c <__udivmoddi4+0x2a8>
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	d946      	bls.n	8000f5c <__udivmoddi4+0x2a8>
 8000ece:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed2:	4421      	add	r1, r4
 8000ed4:	eba1 010a 	sub.w	r1, r1, sl
 8000ed8:	b2bf      	uxth	r7, r7
 8000eda:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ede:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ee6:	fb00 f808 	mul.w	r8, r0, r8
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x24a>
 8000eee:	19e7      	adds	r7, r4, r7
 8000ef0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef4:	d22e      	bcs.n	8000f54 <__udivmoddi4+0x2a0>
 8000ef6:	45b8      	cmp	r8, r7
 8000ef8:	d92c      	bls.n	8000f54 <__udivmoddi4+0x2a0>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4427      	add	r7, r4
 8000efe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f02:	eba7 0708 	sub.w	r7, r7, r8
 8000f06:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0a:	454f      	cmp	r7, r9
 8000f0c:	46c6      	mov	lr, r8
 8000f0e:	4649      	mov	r1, r9
 8000f10:	d31a      	bcc.n	8000f48 <__udivmoddi4+0x294>
 8000f12:	d017      	beq.n	8000f44 <__udivmoddi4+0x290>
 8000f14:	b15d      	cbz	r5, 8000f2e <__udivmoddi4+0x27a>
 8000f16:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f1e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f22:	40f2      	lsrs	r2, r6
 8000f24:	ea4c 0202 	orr.w	r2, ip, r2
 8000f28:	40f7      	lsrs	r7, r6
 8000f2a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	462e      	mov	r6, r5
 8000f38:	4628      	mov	r0, r5
 8000f3a:	e70b      	b.n	8000d54 <__udivmoddi4+0xa0>
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	e6e9      	b.n	8000d14 <__udivmoddi4+0x60>
 8000f40:	4618      	mov	r0, r3
 8000f42:	e6fd      	b.n	8000d40 <__udivmoddi4+0x8c>
 8000f44:	4543      	cmp	r3, r8
 8000f46:	d2e5      	bcs.n	8000f14 <__udivmoddi4+0x260>
 8000f48:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f4c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f50:	3801      	subs	r0, #1
 8000f52:	e7df      	b.n	8000f14 <__udivmoddi4+0x260>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e7d2      	b.n	8000efe <__udivmoddi4+0x24a>
 8000f58:	4660      	mov	r0, ip
 8000f5a:	e78d      	b.n	8000e78 <__udivmoddi4+0x1c4>
 8000f5c:	4681      	mov	r9, r0
 8000f5e:	e7b9      	b.n	8000ed4 <__udivmoddi4+0x220>
 8000f60:	4666      	mov	r6, ip
 8000f62:	e775      	b.n	8000e50 <__udivmoddi4+0x19c>
 8000f64:	4630      	mov	r0, r6
 8000f66:	e74a      	b.n	8000dfe <__udivmoddi4+0x14a>
 8000f68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f6c:	4439      	add	r1, r7
 8000f6e:	e713      	b.n	8000d98 <__udivmoddi4+0xe4>
 8000f70:	3802      	subs	r0, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e724      	b.n	8000dc0 <__udivmoddi4+0x10c>
 8000f76:	bf00      	nop

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <strtoke+0x1a>
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <strtoke+0x60>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <strtoke+0x60>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <strtoke+0x26>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e017      	b.n	8000fd2 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <strtoke+0x60>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <strtoke+0x60>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 fe9c 	bl	8005cec <strpbrk>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <strtoke+0x60>)
 8000fb8:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <strtoke+0x60>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <strtoke+0x54>
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <strtoke+0x60>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	4904      	ldr	r1, [pc, #16]	; (8000fdc <strtoke+0x60>)
 8000fca:	600a      	str	r2, [r1, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000204 	.word	0x20000204

08000fe0 <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000fee:	3301      	adds	r3, #1
 8000ff0:	425a      	negs	r2, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	bf58      	it	pl
 8000ff8:	4253      	negpl	r3, r2
 8000ffa:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	429a      	cmp	r2, r3
 8001006:	d02f      	beq.n	8001068 <NEO6_ReceiveUartChar+0x88>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <NEO6_ReceiveUartChar+0xa0>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b0d      	cmp	r3, #13
 8001010:	d114      	bne.n	800103c <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <NEO6_ReceiveUartChar+0xa0>)
 800102e:	7812      	ldrb	r2, [r2, #0]
 8001030:	b2d1      	uxtb	r1, r2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	460a      	mov	r2, r1
 8001038:	711a      	strb	r2, [r3, #4]
 800103a:	e015      	b.n	8001068 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <NEO6_ReceiveUartChar+0xa0>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d010      	beq.n	8001068 <NEO6_ReceiveUartChar+0x88>
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <NEO6_ReceiveUartChar+0xa0>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b0a      	cmp	r3, #10
 800104e:	d00b      	beq.n	8001068 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <NEO6_ReceiveUartChar+0xa0>)
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	b2d1      	uxtb	r1, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	460a      	mov	r2, r1
 8001066:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	4904      	ldr	r1, [pc, #16]	; (8001080 <NEO6_ReceiveUartChar+0xa0>)
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fbee 	bl	8004852 <HAL_UART_Receive_IT>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200004a0 	.word	0x200004a0

08001084 <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001098:	429a      	cmp	r2, r3
 800109a:	d102      	bne.n	80010a2 <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	e013      	b.n	80010ca <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80010a8:	3301      	adds	r3, #1
 80010aa:	425a      	negs	r2, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	bf58      	it	pl
 80010b2:	4253      	negpl	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	791b      	ldrb	r3, [r3, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f203 1307 	addw	r3, r3, #263	; 0x107
 80010e4:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01e      	beq.n	800112e <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 80010f0:	e008      	b.n	8001104 <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	2b0d      	cmp	r3, #13
 80010f6:	d00e      	beq.n	8001116 <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	7afa      	ldrb	r2, [r7, #11]
 80010fc:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ffbd 	bl	8001084 <NEO6_GetCharFromBuffer>
 800110a:	4603      	mov	r3, r0
 800110c:	72fb      	strb	r3, [r7, #11]
 800110e:	7afb      	ldrb	r3, [r7, #11]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ee      	bne.n	80010f2 <NEO6_GetLineFromBuffer+0x1c>
 8001114:	e000      	b.n	8001118 <NEO6_GetLineFromBuffer+0x42>
				break;
 8001116:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001124:	3b01      	subs	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 8001140:	4979      	ldr	r1, [pc, #484]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff ff1a 	bl	8000f7c <strtoke>
 8001148:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d035      	beq.n	80011be <NEO6_ParseGPRMC+0x86>
	{
		Temp = atoi(ParsePoiner);
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f004 f909 	bl	800536a <atoi>
 8001158:	4603      	mov	r3, r0
 800115a:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Second = Temp % 100;
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	4b73      	ldr	r3, [pc, #460]	; (800132c <NEO6_ParseGPRMC+0x1f4>)
 8001160:	fba3 1302 	umull	r1, r3, r3, r2
 8001164:	095b      	lsrs	r3, r3, #5
 8001166:	2164      	movs	r1, #100	; 0x64
 8001168:	fb01 f303 	mul.w	r3, r1, r3
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	4a6c      	ldr	r2, [pc, #432]	; (800132c <NEO6_ParseGPRMC+0x1f4>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	095a      	lsrs	r2, r3, #5
 8001180:	4b6a      	ldr	r3, [pc, #424]	; (800132c <NEO6_ParseGPRMC+0x1f4>)
 8001182:	fba3 1302 	umull	r1, r3, r3, r2
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2164      	movs	r1, #100	; 0x64
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b2da      	uxtb	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100 +7;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4a65      	ldr	r2, [pc, #404]	; (8001330 <NEO6_ParseGPRMC+0x1f8>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0b5a      	lsrs	r2, r3, #13
 80011a2:	4b62      	ldr	r3, [pc, #392]	; (800132c <NEO6_ParseGPRMC+0x1f4>)
 80011a4:	fba3 1302 	umull	r1, r3, r3, r2
 80011a8:	095b      	lsrs	r3, r3, #5
 80011aa:	2164      	movs	r1, #100	; 0x64
 80011ac:	fb01 f303 	mul.w	r3, r1, r3
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	3307      	adds	r3, #7
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 80011be:	495a      	ldr	r1, [pc, #360]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fedb 	bl	8000f7c <strtoke>
 80011c6:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 80011c8:	4957      	ldr	r1, [pc, #348]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fed6 	bl	8000f7c <strtoke>
 80011d0:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d017      	beq.n	800120a <NEO6_ParseGPRMC+0xd2>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner)/ 100+0.3;
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f004 f8c2 	bl	8005364 <atof>
 80011e0:	ec51 0b10 	vmov	r0, r1, d0
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b52      	ldr	r3, [pc, #328]	; (8001334 <NEO6_ParseGPRMC+0x1fc>)
 80011ea:	f7ff fb47 	bl	800087c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	a34a      	add	r3, pc, #296	; (adr r3, 8001320 <NEO6_ParseGPRMC+0x1e8>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f85e 	bl	80002bc <__adddf3>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 800120a:	4947      	ldr	r1, [pc, #284]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff feb5 	bl	8000f7c <strtoke>
 8001212:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <NEO6_ParseGPRMC+0xee>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner ;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 8001226:	4940      	ldr	r1, [pc, #256]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fea7 	bl	8000f7c <strtoke>
 800122e:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d017      	beq.n	8001268 <NEO6_ParseGPRMC+0x130>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner)/ 100+0.3;
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f004 f893 	bl	8005364 <atof>
 800123e:	ec51 0b10 	vmov	r0, r1, d0
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <NEO6_ParseGPRMC+0x1fc>)
 8001248:	f7ff fb18 	bl	800087c <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	a332      	add	r3, pc, #200	; (adr r3, 8001320 <NEO6_ParseGPRMC+0x1e8>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f82f 	bl	80002bc <__adddf3>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001268:	492f      	ldr	r1, [pc, #188]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fe86 	bl	8000f7c <strtoke>
 8001270:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <NEO6_ParseGPRMC+0x14c>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner ;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8001284:	4928      	ldr	r1, [pc, #160]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fe78 	bl	8000f7c <strtoke>
 800128c:	60f8      	str	r0, [r7, #12]
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 800128e:	4926      	ldr	r1, [pc, #152]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fe73 	bl	8000f7c <strtoke>
 8001296:	60f8      	str	r0, [r7, #12]
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 8001298:	4923      	ldr	r1, [pc, #140]	; (8001328 <NEO6_ParseGPRMC+0x1f0>)
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fe6e 	bl	8000f7c <strtoke>
 80012a0:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d033      	beq.n	8001312 <NEO6_ParseGPRMC+0x1da>
	{
		Temp = atoi(ParsePoiner);
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f004 f85d 	bl	800536a <atoi>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Year = Temp % 100;
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <NEO6_ParseGPRMC+0x1f4>)
 80012b8:	fba3 1302 	umull	r1, r3, r3, r2
 80012bc:	095b      	lsrs	r3, r3, #5
 80012be:	2164      	movs	r1, #100	; 0x64
 80012c0:	fb01 f303 	mul.w	r3, r1, r3
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	4a16      	ldr	r2, [pc, #88]	; (800132c <NEO6_ParseGPRMC+0x1f4>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	095a      	lsrs	r2, r3, #5
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <NEO6_ParseGPRMC+0x1f4>)
 80012da:	fba3 1302 	umull	r1, r3, r3, r2
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2164      	movs	r1, #100	; 0x64
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <NEO6_ParseGPRMC+0x1f8>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	0b5a      	lsrs	r2, r3, #13
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <NEO6_ParseGPRMC+0x1f4>)
 80012fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	2164      	movs	r1, #100	; 0x64
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b2da      	uxtb	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w
 8001320:	33333333 	.word	0x33333333
 8001324:	3fd33333 	.word	0x3fd33333
 8001328:	08009858 	.word	0x08009858
 800132c:	51eb851f 	.word	0x51eb851f
 8001330:	d1b71759 	.word	0xd1b71759
 8001334:	40590000 	.word	0x40590000

08001338 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)//***
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8001340:	4921      	ldr	r1, [pc, #132]	; (80013c8 <NEO6_ParseGPVTG+0x90>)
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fe1a 	bl	8000f7c <strtoke>
 8001348:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 800134a:	491f      	ldr	r1, [pc, #124]	; (80013c8 <NEO6_ParseGPVTG+0x90>)
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fe15 	bl	8000f7c <strtoke>
 8001352:	60f8      	str	r0, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8001354:	491c      	ldr	r1, [pc, #112]	; (80013c8 <NEO6_ParseGPVTG+0x90>)
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fe10 	bl	8000f7c <strtoke>
 800135c:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 800135e:	491a      	ldr	r1, [pc, #104]	; (80013c8 <NEO6_ParseGPVTG+0x90>)
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fe0b 	bl	8000f7c <strtoke>
 8001366:	60f8      	str	r0, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 8001368:	4917      	ldr	r1, [pc, #92]	; (80013c8 <NEO6_ParseGPVTG+0x90>)
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fe06 	bl	8000f7c <strtoke>
 8001370:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <NEO6_ParseGPVTG+0x56>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f003 fff2 	bl	8005364 <atof>
 8001380:	eeb0 7a40 	vmov.f32	s14, s0
 8001384:	eef0 7a60 	vmov.f32	s15, s1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
	}
	ParsePoiner = strtoke(NULL, ",");
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <NEO6_ParseGPVTG+0x90>)
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fdf3 	bl	8000f7c <strtoke>
 8001396:	60f8      	str	r0, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8001398:	490b      	ldr	r1, [pc, #44]	; (80013c8 <NEO6_ParseGPVTG+0x90>)
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fdee 	bl	8000f7c <strtoke>
 80013a0:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <NEO6_ParseGPVTG+0x86>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f003 ffda 	bl	8005364 <atof>
 80013b0:	eeb0 7a40 	vmov.f32	s14, s0
 80013b4:	eef0 7a60 	vmov.f32	s15, s1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
	}
}//***
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	08009858 	.word	0x08009858

080013cc <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;//***

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 80013d4:	492b      	ldr	r1, [pc, #172]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff fdd0 	bl	8000f7c <strtoke>
 80013dc:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 80013de:	4929      	ldr	r1, [pc, #164]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fdcb 	bl	8000f7c <strtoke>
 80013e6:	60f8      	str	r0, [r7, #12]
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 80013e8:	4926      	ldr	r1, [pc, #152]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fdc6 	bl	8000f7c <strtoke>
 80013f0:	60f8      	str	r0, [r7, #12]
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 80013f2:	4924      	ldr	r1, [pc, #144]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff fdc1 	bl	8000f7c <strtoke>
 80013fa:	60f8      	str	r0, [r7, #12]
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 80013fc:	4921      	ldr	r1, [pc, #132]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fdbc 	bl	8000f7c <strtoke>
 8001404:	60f8      	str	r0, [r7, #12]
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 8001406:	491f      	ldr	r1, [pc, #124]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fdb7 	bl	8000f7c <strtoke>
 800140e:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <NEO6_ParseGPGGA+0x5c>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f003 ffa6 	bl	800536a <atoi>
 800141e:	4603      	mov	r3, r0
 8001420:	b2da      	uxtb	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8001428:	4916      	ldr	r1, [pc, #88]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fda6 	bl	8000f7c <strtoke>
 8001430:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <NEO6_ParseGPGGA+0x7e>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f003 ff95 	bl	800536a <atoi>
 8001440:	4603      	mov	r3, r0
 8001442:	b2da      	uxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 800144a:	490e      	ldr	r1, [pc, #56]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fd95 	bl	8000f7c <strtoke>
 8001452:	60f8      	str	r0, [r7, #12]
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8001454:	490b      	ldr	r1, [pc, #44]	; (8001484 <NEO6_ParseGPGGA+0xb8>)
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fd90 	bl	8000f7c <strtoke>
 800145c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <NEO6_ParseGPGGA+0xae>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f003 ff7c 	bl	8005364 <atof>
 800146c:	eeb0 7a40 	vmov.f32	s14, s0
 8001470:	eef0 7a60 	vmov.f32	s15, s1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
	}//***
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	08009858 	.word	0x08009858

08001488 <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8001490:	4930      	ldr	r1, [pc, #192]	; (8001554 <NEO6_ParseGPGSA+0xcc>)
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fd72 	bl	8000f7c <strtoke>
 8001498:	60b8      	str	r0, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 800149a:	492e      	ldr	r1, [pc, #184]	; (8001554 <NEO6_ParseGPGSA+0xcc>)
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff fd6d 	bl	8000f7c <strtoke>
 80014a2:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <NEO6_ParseGPGSA+0x34>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f003 ff5c 	bl	800536a <atoi>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e007      	b.n	80014d2 <NEO6_ParseGPGSA+0x4a>
	{
		ParsePoiner = strtoke(NULL, ",");
 80014c2:	4924      	ldr	r1, [pc, #144]	; (8001554 <NEO6_ParseGPGSA+0xcc>)
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fd59 	bl	8000f7c <strtoke>
 80014ca:	60b8      	str	r0, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b0b      	cmp	r3, #11
 80014d6:	d9f4      	bls.n	80014c2 <NEO6_ParseGPGSA+0x3a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 80014d8:	491e      	ldr	r1, [pc, #120]	; (8001554 <NEO6_ParseGPGSA+0xcc>)
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fd4e 	bl	8000f7c <strtoke>
 80014e0:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <NEO6_ParseGPGSA+0x76>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f003 ff3a 	bl	8005364 <atof>
 80014f0:	eeb0 7a40 	vmov.f32	s14, s0
 80014f4:	eef0 7a60 	vmov.f32	s15, s1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 80014fe:	4915      	ldr	r1, [pc, #84]	; (8001554 <NEO6_ParseGPGSA+0xcc>)
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff fd3b 	bl	8000f7c <strtoke>
 8001506:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <NEO6_ParseGPGSA+0x9c>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f003 ff27 	bl	8005364 <atof>
 8001516:	eeb0 7a40 	vmov.f32	s14, s0
 800151a:	eef0 7a60 	vmov.f32	s15, s1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8001524:	490b      	ldr	r1, [pc, #44]	; (8001554 <NEO6_ParseGPGSA+0xcc>)
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fd28 	bl	8000f7c <strtoke>
 800152c:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <NEO6_ParseGPGSA+0xc2>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 8001536:	68b8      	ldr	r0, [r7, #8]
 8001538:	f003 ff14 	bl	8005364 <atof>
 800153c:	eeb0 7a40 	vmov.f32	s14, s0
 8001540:	eef0 7a60 	vmov.f32	s15, s1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0
	}//***
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	08009858 	.word	0x08009858

08001558 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001566:	491a      	ldr	r1, [pc, #104]	; (80015d0 <NEO6_ParseLine+0x78>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fd07 	bl	8000f7c <strtoke>
 800156e:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8001570:	4918      	ldr	r1, [pc, #96]	; (80015d4 <NEO6_ParseLine+0x7c>)
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7fe fe34 	bl	80001e0 <strcmp>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <NEO6_ParseLine+0x2e>
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fdda 	bl	8001138 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 8001584:	e01f      	b.n	80015c6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8001586:	4914      	ldr	r1, [pc, #80]	; (80015d8 <NEO6_ParseLine+0x80>)
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7fe fe29 	bl	80001e0 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <NEO6_ParseLine+0x44>
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fecf 	bl	8001338 <NEO6_ParseGPVTG>
}
 800159a:	e014      	b.n	80015c6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 800159c:	490f      	ldr	r1, [pc, #60]	; (80015dc <NEO6_ParseLine+0x84>)
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f7fe fe1e 	bl	80001e0 <strcmp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <NEO6_ParseLine+0x5a>
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff0e 	bl	80013cc <NEO6_ParseGPGGA>
}
 80015b0:	e009      	b.n	80015c6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 80015b2:	490b      	ldr	r1, [pc, #44]	; (80015e0 <NEO6_ParseLine+0x88>)
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f7fe fe13 	bl	80001e0 <strcmp>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <NEO6_ParseLine+0x6e>
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff61 	bl	8001488 <NEO6_ParseGPGSA>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	08009858 	.word	0x08009858
 80015d4:	0800985c 	.word	0x0800985c
 80015d8:	08009864 	.word	0x08009864
 80015dc:	0800986c 	.word	0x0800986c
 80015e0:	08009874 	.word	0x08009874

080015e4 <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	return GpsStateHandler->Quality;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferLines)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <NEO6_Task+0x1e>
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fd60 	bl	80010d6 <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff9e 	bl	8001558 <NEO6_ParseLine>
	}
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <NEO6_Init>:

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2230      	movs	r2, #48	; 0x30
 800168e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2230      	movs	r2, #48	; 0x30
 80016a4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->SpeedKilometers = 0;
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->SpeedKnots = 0;
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

	GpsStateHandler->SatelitesNumber = 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	GpsStateHandler->Quality = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	GpsStateHandler->Dop = 0;
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	GpsStateHandler->Hdop = 0;
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->Vdop = 0;
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0

HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	4903      	ldr	r1, [pc, #12]	; (8001714 <NEO6_Init+0xf0>)
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f8a3 	bl	8004852 <HAL_UART_Receive_IT>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200004a0 	.word	0x200004a0

08001718 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  	x_angle = (int32_t)((float)((SCALE_MAX-SCALE_MIN)*(data[0]-X_MIN))/(X_MAX-X_MIN))+SCALE_MIN;
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_ADC_ConvCpltCallback+0xa4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	22b4      	movs	r2, #180	; 0xb4
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	f5a3 2388 	sub.w	r3, r3, #278528	; 0x44000
 800172e:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800173a:	eddf 6a21 	vldr	s13, [pc, #132]	; 80017c0 <HAL_ADC_ConvCpltCallback+0xa8>
 800173e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001746:	ee17 3a90 	vmov	r3, s15
 800174a:	3b5a      	subs	r3, #90	; 0x5a
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_ADC_ConvCpltCallback+0xac>)
 800174e:	6013      	str	r3, [r2, #0]
  	y_angle = (int32_t)((float)((SCALE_MAX-SCALE_MIN)*(data[1]-Y_MIN))/(Y_MAX-Y_MIN))+SCALE_MIN;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_ADC_ConvCpltCallback+0xa4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	22b4      	movs	r2, #180	; 0xb4
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	f5a3 2388 	sub.w	r3, r3, #278528	; 0x44000
 800175e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800176a:	eddf 6a15 	vldr	s13, [pc, #84]	; 80017c0 <HAL_ADC_ConvCpltCallback+0xa8>
 800176e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001776:	ee17 3a90 	vmov	r3, s15
 800177a:	3b5a      	subs	r3, #90	; 0x5a
 800177c:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800177e:	6013      	str	r3, [r2, #0]
  	z_angle = (int32_t)((float)(SCALE_MAX-SCALE_MIN)*(data[2]-Z_MIN)/(Z_MAX-Z_MIN))+SCALE_MIN;
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_ADC_ConvCpltCallback+0xa4>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f2a3 631e 	subw	r3, r3, #1566	; 0x61e
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001790:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80017cc <HAL_ADC_ConvCpltCallback+0xb4>
 8001794:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001798:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80017d0 <HAL_ADC_ConvCpltCallback+0xb8>
 800179c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a4:	ee17 3a90 	vmov	r3, s15
 80017a8:	3b5a      	subs	r3, #90	; 0x5a
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_ADC_ConvCpltCallback+0xbc>)
 80017ac:	6013      	str	r3, [r2, #0]

  }
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000078c 	.word	0x2000078c
 80017c0:	44498000 	.word	0x44498000
 80017c4:	20000690 	.word	0x20000690
 80017c8:	20000aa8 	.word	0x20000aa8
 80017cc:	43340000 	.word	0x43340000
 80017d0:	444b8000 	.word	0x444b8000
 80017d4:	20000788 	.word	0x20000788

080017d8 <delBuf>:
void delBuf(char* data)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	int len = strlen(data);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7fe fd07 	bl	80001f4 <strlen>
 80017e6:	4603      	mov	r3, r0
 80017e8:	60fb      	str	r3, [r7, #12]
	for( i = 0; i < len; i++)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <delBuf+0x48>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e00b      	b.n	800180a <delBuf+0x32>
	{
		data[i] = 0;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <delBuf+0x48>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < len; i++)
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <delBuf+0x48>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a06      	ldr	r2, [pc, #24]	; (8001820 <delBuf+0x48>)
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <delBuf+0x48>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	dcee      	bgt.n	80017f2 <delBuf+0x1a>
	}
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200006e0 	.word	0x200006e0

08001824 <HAL_UART_RxCpltCallback>:
//extern GPS_Struct gps;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 if (huart -> Instance == USART1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a31      	ldr	r2, [pc, #196]	; (80018f8 <HAL_UART_RxCpltCallback+0xd4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d102      	bne.n	800183c <HAL_UART_RxCpltCallback+0x18>
 {
	 NEO6_ReceiveUartChar(&GpsState);
 8001836:	4831      	ldr	r0, [pc, #196]	; (80018fc <HAL_UART_RxCpltCallback+0xd8>)
 8001838:	f7ff fbd2 	bl	8000fe0 <NEO6_ReceiveUartChar>
 }


 if (huart->Instance == USART6)// kiem tra ngat o bo UART6
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <HAL_UART_RxCpltCallback+0xdc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d14f      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0xc2>
 	  {
		 if((HAL_GetTick() - UART6_time > 100)||(UART6_count == SIZEARRAY)){
 8001846:	f000 feaf 	bl	80025a8 <HAL_GetTick>
 800184a:	4603      	mov	r3, r0
 800184c:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <HAL_UART_RxCpltCallback+0xe0>)
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d803      	bhi.n	800185e <HAL_UART_RxCpltCallback+0x3a>
 8001856:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <HAL_UART_RxCpltCallback+0xe4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d105      	bne.n	800186a <HAL_UART_RxCpltCallback+0x46>
			UART6_count = 0;
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_UART_RxCpltCallback+0xe4>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
			delBuf(Rx_Buffer);// xoa bo dem nho
 8001864:	4829      	ldr	r0, [pc, #164]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 8001866:	f7ff ffb7 	bl	80017d8 <delBuf>
		 }
		 Rx_Buffer[UART6_count++]=Rx_Data[0];// tang count len 1 va lay byte data tu UART6_RXData
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_UART_RxCpltCallback+0xe4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	4925      	ldr	r1, [pc, #148]	; (8001908 <HAL_UART_RxCpltCallback+0xe4>)
 8001872:	600a      	str	r2, [r1, #0]
 8001874:	4a26      	ldr	r2, [pc, #152]	; (8001910 <HAL_UART_RxCpltCallback+0xec>)
 8001876:	7811      	ldrb	r1, [r2, #0]
 8001878:	4a24      	ldr	r2, [pc, #144]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 800187a:	54d1      	strb	r1, [r2, r3]
		 UART6_time = HAL_GetTick();
 800187c:	f000 fe94 	bl	80025a8 <HAL_GetTick>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_UART_RxCpltCallback+0xe0>)
 8001886:	601a      	str	r2, [r3, #0]


			if(Rx_Buffer[50]=='V' && Rx_Buffer[51]=='I' && Rx_Buffer[52]=='T' && Rx_Buffer[53]=='R' && Rx_Buffer[54]=='I' ){
 8001888:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 800188a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800188e:	2b56      	cmp	r3, #86	; 0x56
 8001890:	d116      	bne.n	80018c0 <HAL_UART_RxCpltCallback+0x9c>
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 8001894:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001898:	2b49      	cmp	r3, #73	; 0x49
 800189a:	d111      	bne.n	80018c0 <HAL_UART_RxCpltCallback+0x9c>
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 800189e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018a2:	2b54      	cmp	r3, #84	; 0x54
 80018a4:	d10c      	bne.n	80018c0 <HAL_UART_RxCpltCallback+0x9c>
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 80018a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ac:	2b52      	cmp	r3, #82	; 0x52
 80018ae:	d107      	bne.n	80018c0 <HAL_UART_RxCpltCallback+0x9c>
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 80018b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80018b6:	2b49      	cmp	r3, #73	; 0x49
 80018b8:	d102      	bne.n	80018c0 <HAL_UART_RxCpltCallback+0x9c>
				flag1=1;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_UART_RxCpltCallback+0xf0>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
			}
			if(Rx_Buffer[2]=='B' && Rx_Buffer[3]=='U' && Rx_Buffer[4]=='S' && Rx_Buffer[5]=='Y' ){
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	2b42      	cmp	r3, #66	; 0x42
 80018c6:	d10e      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0xc2>
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 80018ca:	78db      	ldrb	r3, [r3, #3]
 80018cc:	2b55      	cmp	r3, #85	; 0x55
 80018ce:	d10a      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0xc2>
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	2b53      	cmp	r3, #83	; 0x53
 80018d6:	d106      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0xc2>
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_UART_RxCpltCallback+0xe8>)
 80018da:	795b      	ldrb	r3, [r3, #5]
 80018dc:	2b59      	cmp	r3, #89	; 0x59
 80018de:	d102      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0xc2>
				flag2=1;
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_UART_RxCpltCallback+0xf4>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
			}

	 } HAL_UART_Receive_IT(&huart6, (uint8_t *)Rx_Data,1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	4909      	ldr	r1, [pc, #36]	; (8001910 <HAL_UART_RxCpltCallback+0xec>)
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <HAL_UART_RxCpltCallback+0xf8>)
 80018ec:	f002 ffb1 	bl	8004852 <HAL_UART_Receive_IT>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40011000 	.word	0x40011000
 80018fc:	200004a8 	.word	0x200004a8
 8001900:	40011400 	.word	0x40011400
 8001904:	20000798 	.word	0x20000798
 8001908:	200008a8 	.word	0x200008a8
 800190c:	2000079c 	.word	0x2000079c
 8001910:	20000800 	.word	0x20000800
 8001914:	20000208 	.word	0x20000208
 8001918:	2000020c 	.word	0x2000020c
 800191c:	20000864 	.word	0x20000864

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f000 fdd9 	bl	80024dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192a:	f000 f88d 	bl	8001a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192e:	f000 f9d5 	bl	8001cdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001932:	f000 f9b3 	bl	8001c9c <MX_DMA_Init>
  MX_ADC1_Init();
 8001936:	f000 f8ef 	bl	8001b18 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800193a:	f000 f95b 	bl	8001bf4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800193e:	f000 f983 	bl	8001c48 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, 3);
 8001942:	2203      	movs	r2, #3
 8001944:	4935      	ldr	r1, [pc, #212]	; (8001a1c <main+0xfc>)
 8001946:	4836      	ldr	r0, [pc, #216]	; (8001a20 <main+0x100>)
 8001948:	f000 ffe2 	bl	8002910 <HAL_ADC_Start_DMA>
  NEO6_Init(&GpsState, &huart1);
 800194c:	4935      	ldr	r1, [pc, #212]	; (8001a24 <main+0x104>)
 800194e:	4836      	ldr	r0, [pc, #216]	; (8001a28 <main+0x108>)
 8001950:	f7ff fe68 	bl	8001624 <NEO6_Init>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)Rx_Data,1);
 8001954:	2201      	movs	r2, #1
 8001956:	4935      	ldr	r1, [pc, #212]	; (8001a2c <main+0x10c>)
 8001958:	4835      	ldr	r0, [pc, #212]	; (8001a30 <main+0x110>)
 800195a:	f002 ff7a 	bl	8004852 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
		  if (x_angle < -15 || x_angle > 165 && flag1 == 0 ){
 800195e:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <main+0x114>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f113 0f0f 	cmn.w	r3, #15
 8001966:	db07      	blt.n	8001978 <main+0x58>
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <main+0x114>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2ba5      	cmp	r3, #165	; 0xa5
 800196e:	dd41      	ble.n	80019f4 <main+0xd4>
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <main+0x118>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d13d      	bne.n	80019f4 <main+0xd4>
			  HAL_Delay(5000);
 8001978:	f241 3088 	movw	r0, #5000	; 0x1388
 800197c:	f000 fe20 	bl	80025c0 <HAL_Delay>
			  if (x_angle < -15 || x_angle > 165 ){
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <main+0x114>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f113 0f0f 	cmn.w	r3, #15
 8001988:	db03      	blt.n	8001992 <main+0x72>
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <main+0x114>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2ba5      	cmp	r3, #165	; 0xa5
 8001990:	dd1d      	ble.n	80019ce <main+0xae>
				  Status ++;
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <main+0x11c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <main+0x11c>)
 800199a:	6013      	str	r3, [r2, #0]
				 if (Status == 1){
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <main+0x11c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d114      	bne.n	80019ce <main+0xae>
					 for(int j = 0; j<100000; j++){
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	e004      	b.n	80019b4 <main+0x94>
					 	  GetData();
 80019aa:	f000 f9e7 	bl	8001d7c <GetData>
					 for(int j = 0; j<100000; j++){
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3301      	adds	r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <main+0x120>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	ddf6      	ble.n	80019aa <main+0x8a>
					 }
					 SendSms();
 80019bc:	f000 fa34 	bl	8001e28 <SendSms>
					 while(flag2 == 0){
 80019c0:	e001      	b.n	80019c6 <main+0xa6>
						 Call();
 80019c2:	f000 fadb 	bl	8001f7c <Call>
					 while(flag2 == 0){
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <main+0x124>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f9      	beq.n	80019c2 <main+0xa2>
					 }
				 }

			 }
			  HAL_Delay(10000);
 80019ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80019d2:	f000 fdf5 	bl	80025c0 <HAL_Delay>
			 if (x_angle > -15 || x_angle < 165 ){
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <main+0x114>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f113 0f0e 	cmn.w	r3, #14
 80019de:	da03      	bge.n	80019e8 <main+0xc8>
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <main+0x114>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2ba4      	cmp	r3, #164	; 0xa4
 80019e6:	dc05      	bgt.n	80019f4 <main+0xd4>
			  		flag2 = 0;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <main+0x124>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
			  		Status = 0;
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <main+0x11c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
			 }
		  }
		  if( flag1 == 1){
 80019f4:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <main+0x118>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d1b0      	bne.n	800195e <main+0x3e>
			  for(int j = 0; j<100000; j++){
 80019fc:	2300      	movs	r3, #0
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	e004      	b.n	8001a0c <main+0xec>
			  		GetData();
 8001a02:	f000 f9bb 	bl	8001d7c <GetData>
			  for(int j = 0; j<100000; j++){
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <main+0x120>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	ddf6      	ble.n	8001a02 <main+0xe2>
			  }
			  SendSms1();
 8001a14:	f000 fa5e 	bl	8001ed4 <SendSms1>
		  if (x_angle < -15 || x_angle > 165 && flag1 == 0 ){
 8001a18:	e7a1      	b.n	800195e <main+0x3e>
 8001a1a:	bf00      	nop
 8001a1c:	2000078c 	.word	0x2000078c
 8001a20:	20000698 	.word	0x20000698
 8001a24:	200006e4 	.word	0x200006e4
 8001a28:	200004a8 	.word	0x200004a8
 8001a2c:	20000800 	.word	0x20000800
 8001a30:	20000864 	.word	0x20000864
 8001a34:	20000690 	.word	0x20000690
 8001a38:	20000208 	.word	0x20000208
 8001a3c:	20000210 	.word	0x20000210
 8001a40:	0001869f 	.word	0x0001869f
 8001a44:	2000020c 	.word	0x2000020c

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b094      	sub	sp, #80	; 0x50
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	2230      	movs	r2, #48	; 0x30
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fcb6 	bl	80053c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <SystemClock_Config+0xc8>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <SystemClock_Config+0xc8>)
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <SystemClock_Config+0xc8>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <SystemClock_Config+0xcc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aac:	2310      	movs	r3, #16
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 f999 	bl	8003e04 <HAL_RCC_OscConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ad8:	f000 fa62 	bl	8001fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001adc:	230f      	movs	r3, #15
 8001ade:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	2103      	movs	r1, #3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fbfb 	bl	80042f4 <HAL_RCC_ClockConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b04:	f000 fa4c 	bl	8001fa0 <Error_Handler>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3750      	adds	r7, #80	; 0x50
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000

08001b18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <MX_ADC1_Init+0xd4>)
 8001b2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b4a:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b5a:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <MX_ADC1_Init+0xd8>)
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b66:	2203      	movs	r2, #3
 8001b68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b78:	481b      	ldr	r0, [pc, #108]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b7a:	f000 fd45 	bl	8002608 <HAL_ADC_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b84:	f000 fa0c 	bl	8001fa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b90:	2307      	movs	r3, #7
 8001b92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	4813      	ldr	r0, [pc, #76]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001b9a:	f000 ffc7 	bl	8002b2c <HAL_ADC_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ba4:	f000 f9fc 	bl	8001fa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001bb6:	f000 ffb9 	bl	8002b2c <HAL_ADC_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bc0:	f000 f9ee 	bl	8001fa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_ADC1_Init+0xd0>)
 8001bd2:	f000 ffab 	bl	8002b2c <HAL_ADC_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001bdc:	f000 f9e0 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000698 	.word	0x20000698
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	0f000001 	.word	0x0f000001

08001bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <MX_USART1_UART_Init+0x50>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	f002 fd32 	bl	8004694 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c36:	f000 f9b3 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200006e4 	.word	0x200006e4
 8001c44:	40011000 	.word	0x40011000

08001c48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <MX_USART6_UART_Init+0x50>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c80:	f002 fd08 	bl	8004694 <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c8a:	f000 f989 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000864 	.word	0x20000864
 8001c98:	40011400 	.word	0x40011400

08001c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_DMA_Init+0x3c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <MX_DMA_Init+0x3c>)
 8001cac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_DMA_Init+0x3c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2038      	movs	r0, #56	; 0x38
 8001cc4:	f001 fac7 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cc8:	2038      	movs	r0, #56	; 0x38
 8001cca:	f001 fae0 	bl	800328e <HAL_NVIC_EnableIRQ>

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_GPIO_Init+0x98>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <MX_GPIO_Init+0x9c>)
 8001d4c:	f002 f840 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	4804      	ldr	r0, [pc, #16]	; (8001d78 <MX_GPIO_Init+0x9c>)
 8001d68:	f001 feae 	bl	8003ac8 <HAL_GPIO_Init>

}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000

08001d7c <GetData>:

/* USER CODE BEGIN 4 */
void GetData(){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af02      	add	r7, sp, #8

	                 NEO6_Task(&GpsState);
 8001d82:	4820      	ldr	r0, [pc, #128]	; (8001e04 <GetData+0x88>)
 8001d84:	f7ff fc3b 	bl	80015fe <NEO6_Task>


				 if(NEO6_IsFix(&GpsState)){
 8001d88:	481e      	ldr	r0, [pc, #120]	; (8001e04 <GetData+0x88>)
 8001d8a:	f7ff fc2b 	bl	80015e4 <NEO6_IsFix>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d030      	beq.n	8001df6 <GetData+0x7a>
							sprintf(Message1, "Time: %02d:%02d:%02d\n\r", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <GetData+0x88>)
 8001d96:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <GetData+0x88>)
 8001d9e:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8001da2:	4619      	mov	r1, r3
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <GetData+0x88>)
 8001da6:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	460b      	mov	r3, r1
 8001dae:	4916      	ldr	r1, [pc, #88]	; (8001e08 <GetData+0x8c>)
 8001db0:	4816      	ldr	r0, [pc, #88]	; (8001e0c <GetData+0x90>)
 8001db2:	f003 ff7b 	bl	8005cac <siprintf>
							sprintf(Message2, "Date: %02d.%02d.20%02d\n\r", GpsState.Day, GpsState.Month, GpsState.Year);
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <GetData+0x88>)
 8001db8:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <GetData+0x88>)
 8001dc0:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <GetData+0x88>)
 8001dc8:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	490f      	ldr	r1, [pc, #60]	; (8001e10 <GetData+0x94>)
 8001dd2:	4810      	ldr	r0, [pc, #64]	; (8001e14 <GetData+0x98>)
 8001dd4:	f003 ff6a 	bl	8005cac <siprintf>
							sprintf(Message3, "Vi Tri Xe Hien Tai  https://maps.google.com/maps?q=%2f,%2f\n\r", GpsState.Latitude, GpsState.Longitude);
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <GetData+0x88>)
 8001dda:	e9d3 0164 	ldrd	r0, r1, [r3, #400]	; 0x190
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <GetData+0x88>)
 8001de0:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8001de4:	e9cd 2300 	strd	r2, r3, [sp]
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	490a      	ldr	r1, [pc, #40]	; (8001e18 <GetData+0x9c>)
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <GetData+0xa0>)
 8001df0:	f003 ff5c 	bl	8005cac <siprintf>
							sprintf(Message4, "No Fix\n\r");
						 }



}
 8001df4:	e003      	b.n	8001dfe <GetData+0x82>
							sprintf(Message4, "No Fix\n\r");
 8001df6:	490a      	ldr	r1, [pc, #40]	; (8001e20 <GetData+0xa4>)
 8001df8:	480a      	ldr	r0, [pc, #40]	; (8001e24 <GetData+0xa8>)
 8001dfa:	f003 ff57 	bl	8005cac <siprintf>
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200004a8 	.word	0x200004a8
 8001e08:	0800987c 	.word	0x0800987c
 8001e0c:	20000214 	.word	0x20000214
 8001e10:	08009894 	.word	0x08009894
 8001e14:	200002b4 	.word	0x200002b4
 8001e18:	080098b0 	.word	0x080098b0
 8001e1c:	20000354 	.word	0x20000354
 8001e20:	080098f0 	.word	0x080098f0
 8001e24:	200003f4 	.word	0x200003f4

08001e28 <SendSms>:
  void SendSms(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0

  	  		   				HAL_Delay(2000);
 8001e2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e30:	f000 fbc6 	bl	80025c0 <HAL_Delay>
  	  						HAL_UART_Transmit(&huart6, (uint8_t *)"AT+CMGDA=\"DEL ALL\"\r\n", sizeof("AT+CMGDA=\"DEL ALL\"\r\n"),20);
 8001e34:	2314      	movs	r3, #20
 8001e36:	2215      	movs	r2, #21
 8001e38:	491e      	ldr	r1, [pc, #120]	; (8001eb4 <SendSms+0x8c>)
 8001e3a:	481f      	ldr	r0, [pc, #124]	; (8001eb8 <SendSms+0x90>)
 8001e3c:	f002 fc77 	bl	800472e <HAL_UART_Transmit>
  	  						HAL_Delay(1000);
 8001e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e44:	f000 fbbc 	bl	80025c0 <HAL_Delay>
  	  		   				HAL_UART_Transmit(&huart6, (uint8_t *)"AT+CMGS=\"0944022135\"\r\n", strlen("AT+CMGS=\"0944022135\"\r\n"), 20);
 8001e48:	2314      	movs	r3, #20
 8001e4a:	2216      	movs	r2, #22
 8001e4c:	491b      	ldr	r1, [pc, #108]	; (8001ebc <SendSms+0x94>)
 8001e4e:	481a      	ldr	r0, [pc, #104]	; (8001eb8 <SendSms+0x90>)
 8001e50:	f002 fc6d 	bl	800472e <HAL_UART_Transmit>
  	  		   				HAL_Delay(5000);
 8001e54:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e58:	f000 fbb2 	bl	80025c0 <HAL_Delay>
  	  		   				HAL_UART_Transmit(&huart6, (uint8_t *)"Xe Ban Bi Nga\r\n",strlen("Xe Ban Bi Nga\r\n"),20);
 8001e5c:	2314      	movs	r3, #20
 8001e5e:	220f      	movs	r2, #15
 8001e60:	4917      	ldr	r1, [pc, #92]	; (8001ec0 <SendSms+0x98>)
 8001e62:	4815      	ldr	r0, [pc, #84]	; (8001eb8 <SendSms+0x90>)
 8001e64:	f002 fc63 	bl	800472e <HAL_UART_Transmit>
  	  			  		  	HAL_UART_Transmit(&huart6, (uint8_t *)(char *)Message3,strlen((char *)Message3),100);
 8001e68:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <SendSms+0x9c>)
 8001e6a:	f7fe f9c3 	bl	80001f4 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	2364      	movs	r3, #100	; 0x64
 8001e74:	4913      	ldr	r1, [pc, #76]	; (8001ec4 <SendSms+0x9c>)
 8001e76:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <SendSms+0x90>)
 8001e78:	f002 fc59 	bl	800472e <HAL_UART_Transmit>
  	  			  		  	HAL_UART_Transmit(&huart6, (uint8_t *)(char *)Message2,strlen((char *)Message2),20);
 8001e7c:	4812      	ldr	r0, [pc, #72]	; (8001ec8 <SendSms+0xa0>)
 8001e7e:	f7fe f9b9 	bl	80001f4 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	2314      	movs	r3, #20
 8001e88:	490f      	ldr	r1, [pc, #60]	; (8001ec8 <SendSms+0xa0>)
 8001e8a:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <SendSms+0x90>)
 8001e8c:	f002 fc4f 	bl	800472e <HAL_UART_Transmit>
  	  			  		  	HAL_UART_Transmit(&huart6, (uint8_t *)(char *)Message1,strlen((char *)Message1),20);
 8001e90:	480e      	ldr	r0, [pc, #56]	; (8001ecc <SendSms+0xa4>)
 8001e92:	f7fe f9af 	bl	80001f4 <strlen>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	2314      	movs	r3, #20
 8001e9c:	490b      	ldr	r1, [pc, #44]	; (8001ecc <SendSms+0xa4>)
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <SendSms+0x90>)
 8001ea0:	f002 fc45 	bl	800472e <HAL_UART_Transmit>
  	  		   				HAL_UART_Transmit(&huart6, (uint8_t *)enter,1,10);
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4909      	ldr	r1, [pc, #36]	; (8001ed0 <SendSms+0xa8>)
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <SendSms+0x90>)
 8001eac:	f002 fc3f 	bl	800472e <HAL_UART_Transmit>

  }
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	080098fc 	.word	0x080098fc
 8001eb8:	20000864 	.word	0x20000864
 8001ebc:	08009914 	.word	0x08009914
 8001ec0:	0800992c 	.word	0x0800992c
 8001ec4:	20000354 	.word	0x20000354
 8001ec8:	200002b4 	.word	0x200002b4
 8001ecc:	20000214 	.word	0x20000214
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <SendSms1>:

  void SendSms1(){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  				HAL_Delay(1000);
 8001ed8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001edc:	f000 fb70 	bl	80025c0 <HAL_Delay>
  				HAL_UART_Transmit(&huart6, (uint8_t *)"AT+CMGDA=\"DEL ALL\"\r\n", sizeof("AT+CMGDA=\"DEL ALL\"\r\n"), 20);
 8001ee0:	2314      	movs	r3, #20
 8001ee2:	2215      	movs	r2, #21
 8001ee4:	491d      	ldr	r1, [pc, #116]	; (8001f5c <SendSms1+0x88>)
 8001ee6:	481e      	ldr	r0, [pc, #120]	; (8001f60 <SendSms1+0x8c>)
 8001ee8:	f002 fc21 	bl	800472e <HAL_UART_Transmit>
  				HAL_Delay(1000);
 8001eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef0:	f000 fb66 	bl	80025c0 <HAL_Delay>
  	  		    HAL_UART_Transmit(&huart6, (uint8_t *)"AT+CMGS=\"0944022135\"\r\n",strlen("AT+CMGS=\"0944022135\"\r\n"), 20);
 8001ef4:	2314      	movs	r3, #20
 8001ef6:	2216      	movs	r2, #22
 8001ef8:	491a      	ldr	r1, [pc, #104]	; (8001f64 <SendSms1+0x90>)
 8001efa:	4819      	ldr	r0, [pc, #100]	; (8001f60 <SendSms1+0x8c>)
 8001efc:	f002 fc17 	bl	800472e <HAL_UART_Transmit>
  	  		  	HAL_Delay(1000);
 8001f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f04:	f000 fb5c 	bl	80025c0 <HAL_Delay>
  	  		  	HAL_UART_Transmit(&huart6, (uint8_t *)(char *)Message3,strlen((char *)Message3),100);
 8001f08:	4817      	ldr	r0, [pc, #92]	; (8001f68 <SendSms1+0x94>)
 8001f0a:	f7fe f973 	bl	80001f4 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	2364      	movs	r3, #100	; 0x64
 8001f14:	4914      	ldr	r1, [pc, #80]	; (8001f68 <SendSms1+0x94>)
 8001f16:	4812      	ldr	r0, [pc, #72]	; (8001f60 <SendSms1+0x8c>)
 8001f18:	f002 fc09 	bl	800472e <HAL_UART_Transmit>
  	  		  	HAL_UART_Transmit(&huart6, (uint8_t *)(char *)Message2,strlen((char *)Message2),20);
 8001f1c:	4813      	ldr	r0, [pc, #76]	; (8001f6c <SendSms1+0x98>)
 8001f1e:	f7fe f969 	bl	80001f4 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	2314      	movs	r3, #20
 8001f28:	4910      	ldr	r1, [pc, #64]	; (8001f6c <SendSms1+0x98>)
 8001f2a:	480d      	ldr	r0, [pc, #52]	; (8001f60 <SendSms1+0x8c>)
 8001f2c:	f002 fbff 	bl	800472e <HAL_UART_Transmit>
  	  		  	HAL_UART_Transmit(&huart6, (uint8_t *)(char *)Message1,strlen((char *)Message1),20);
 8001f30:	480f      	ldr	r0, [pc, #60]	; (8001f70 <SendSms1+0x9c>)
 8001f32:	f7fe f95f 	bl	80001f4 <strlen>
 8001f36:	4603      	mov	r3, r0
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	2314      	movs	r3, #20
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <SendSms1+0x9c>)
 8001f3e:	4808      	ldr	r0, [pc, #32]	; (8001f60 <SendSms1+0x8c>)
 8001f40:	f002 fbf5 	bl	800472e <HAL_UART_Transmit>
  	  			HAL_UART_Transmit(&huart6, (uint8_t *)enter,1,10);
 8001f44:	230a      	movs	r3, #10
 8001f46:	2201      	movs	r2, #1
 8001f48:	490a      	ldr	r1, [pc, #40]	; (8001f74 <SendSms1+0xa0>)
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <SendSms1+0x8c>)
 8001f4c:	f002 fbef 	bl	800472e <HAL_UART_Transmit>
  	            flag1=0;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <SendSms1+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
  }
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	080098fc 	.word	0x080098fc
 8001f60:	20000864 	.word	0x20000864
 8001f64:	08009914 	.word	0x08009914
 8001f68:	20000354 	.word	0x20000354
 8001f6c:	200002b4 	.word	0x200002b4
 8001f70:	20000214 	.word	0x20000214
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000208 	.word	0x20000208

08001f7c <Call>:

  void Call(){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  	HAL_UART_Transmit(&huart6, (uint8_t *)"ATD0944022135;\r\n",strlen("ATD0944022135;\r\n"), 20);
 8001f80:	2314      	movs	r3, #20
 8001f82:	2210      	movs	r2, #16
 8001f84:	4904      	ldr	r1, [pc, #16]	; (8001f98 <Call+0x1c>)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <Call+0x20>)
 8001f88:	f002 fbd1 	bl	800472e <HAL_UART_Transmit>
  	HAL_Delay(20000);
 8001f8c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001f90:	f000 fb16 	bl	80025c0 <HAL_Delay>
  }
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	0800993c 	.word	0x0800993c
 8001f9c:	20000864 	.word	0x20000864

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <Error_Handler+0x8>
	...

08001fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_MspInit+0x58>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_MspInit+0x58>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_MspInit+0x58>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_MspInit+0x58>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <HAL_MspInit+0x58>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_MspInit+0x58>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	2005      	movs	r0, #5
 8001ff0:	f001 f931 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ff4:	2005      	movs	r0, #5
 8001ff6:	f001 f94a 	bl	800328e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a33      	ldr	r2, [pc, #204]	; (80020f4 <HAL_ADC_MspInit+0xec>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d160      	bne.n	80020ec <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_ADC_MspInit+0xf0>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a31      	ldr	r2, [pc, #196]	; (80020f8 <HAL_ADC_MspInit+0xf0>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_ADC_MspInit+0xf0>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_ADC_MspInit+0xf0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <HAL_ADC_MspInit+0xf0>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_ADC_MspInit+0xf0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002062:	230e      	movs	r3, #14
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002066:	2303      	movs	r3, #3
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4821      	ldr	r0, [pc, #132]	; (80020fc <HAL_ADC_MspInit+0xf4>)
 8002076:	f001 fd27 	bl	8003ac8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 800207c:	4a21      	ldr	r2, [pc, #132]	; (8002104 <HAL_ADC_MspInit+0xfc>)
 800207e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 8002082:	2200      	movs	r2, #0
 8002084:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 8002094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002098:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 800209c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 80020a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 80020ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 80020b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020c0:	480f      	ldr	r0, [pc, #60]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 80020c2:	f001 f8ff 	bl	80032c4 <HAL_DMA_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80020cc:	f7ff ff68 	bl	8001fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_ADC_MspInit+0xf8>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2101      	movs	r1, #1
 80020e0:	2012      	movs	r0, #18
 80020e2:	f001 f8b8 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020e6:	2012      	movs	r0, #18
 80020e8:	f001 f8d1 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40012000 	.word	0x40012000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000
 8002100:	20000728 	.word	0x20000728
 8002104:	40026410 	.word	0x40026410

08002108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3a      	ldr	r2, [pc, #232]	; (8002210 <HAL_UART_MspInit+0x108>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d135      	bne.n	8002196 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_UART_MspInit+0x10c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a38      	ldr	r2, [pc, #224]	; (8002214 <HAL_UART_MspInit+0x10c>)
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_UART_MspInit+0x10c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_UART_MspInit+0x10c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a31      	ldr	r2, [pc, #196]	; (8002214 <HAL_UART_MspInit+0x10c>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_UART_MspInit+0x10c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002162:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002174:	2307      	movs	r3, #7
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	4826      	ldr	r0, [pc, #152]	; (8002218 <HAL_UART_MspInit+0x110>)
 8002180:	f001 fca2 	bl	8003ac8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2025      	movs	r0, #37	; 0x25
 800218a:	f001 f864 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800218e:	2025      	movs	r0, #37	; 0x25
 8002190:	f001 f87d 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002194:	e038      	b.n	8002208 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a20      	ldr	r2, [pc, #128]	; (800221c <HAL_UART_MspInit+0x114>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d133      	bne.n	8002208 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_UART_MspInit+0x10c>)
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <HAL_UART_MspInit+0x10c>)
 80021aa:	f043 0320 	orr.w	r3, r3, #32
 80021ae:	6453      	str	r3, [r2, #68]	; 0x44
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_UART_MspInit+0x10c>)
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_UART_MspInit+0x10c>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_UART_MspInit+0x10c>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	6313      	str	r3, [r2, #48]	; 0x30
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_UART_MspInit+0x10c>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021d8:	23c0      	movs	r3, #192	; 0xc0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021e8:	2308      	movs	r3, #8
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	480b      	ldr	r0, [pc, #44]	; (8002220 <HAL_UART_MspInit+0x118>)
 80021f4:	f001 fc68 	bl	8003ac8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2102      	movs	r1, #2
 80021fc:	2047      	movs	r0, #71	; 0x47
 80021fe:	f001 f82a 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002202:	2047      	movs	r0, #71	; 0x47
 8002204:	f001 f843 	bl	800328e <HAL_NVIC_EnableIRQ>
}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	; 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40011000 	.word	0x40011000
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	40011400 	.word	0x40011400
 8002220:	40020800 	.word	0x40020800

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f000 f986 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <ADC_IRQHandler+0x10>)
 800228e:	f000 f9fe 	bl	800268e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000698 	.word	0x20000698

0800229c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <USART1_IRQHandler+0x10>)
 80022a2:	f002 fb07 	bl	80048b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200006e4 	.word	0x200006e4

080022b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <DMA2_Stream0_IRQHandler+0x10>)
 80022b6:	f001 f99d 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000728 	.word	0x20000728

080022c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <USART6_IRQHandler+0x10>)
 80022ca:	f002 faf3 	bl	80048b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000864 	.word	0x20000864

080022d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
	return 1;
 80022dc:	2301      	movs	r3, #1
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_kill>:

int _kill(int pid, int sig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022f2:	f003 f83f 	bl	8005374 <__errno>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2216      	movs	r2, #22
 80022fa:	601a      	str	r2, [r3, #0]
	return -1;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_exit>:

void _exit (int status)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffe7 	bl	80022e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800231a:	e7fe      	b.n	800231a <_exit+0x12>

0800231c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e00a      	b.n	8002344 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800232e:	f3af 8000 	nop.w
 8002332:	4601      	mov	r1, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	60ba      	str	r2, [r7, #8]
 800233a:	b2ca      	uxtb	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf0      	blt.n	800232e <_read+0x12>
	}

return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e009      	b.n	800237c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	60ba      	str	r2, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf1      	blt.n	8002368 <_write+0x12>
	}
	return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_close>:

int _close(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	return -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b6:	605a      	str	r2, [r3, #4]
	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <_isatty>:

int _isatty(int file)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	return 1;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <_sbrk+0x5c>)
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <_sbrk+0x60>)
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <_sbrk+0x64>)
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <_sbrk+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002428:	f002 ffa4 	bl	8005374 <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e009      	b.n	800244c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <_sbrk+0x64>)
 8002448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20020000 	.word	0x20020000
 8002458:	00000400 	.word	0x00000400
 800245c:	20000494 	.word	0x20000494
 8002460:	20000ac0 	.word	0x20000ac0

08002464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <SystemInit+0x20>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <SystemInit+0x20>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800248e:	490e      	ldr	r1, [pc, #56]	; (80024c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002494:	e002      	b.n	800249c <LoopCopyDataInit>

08002496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249a:	3304      	adds	r3, #4

0800249c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800249c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a0:	d3f9      	bcc.n	8002496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a2:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024a4:	4c0b      	ldr	r4, [pc, #44]	; (80024d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a8:	e001      	b.n	80024ae <LoopFillZerobss>

080024aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ac:	3204      	adds	r2, #4

080024ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b0:	d3fb      	bcc.n	80024aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024b2:	f7ff ffd7 	bl	8002464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b6:	f002 ff63 	bl	8005380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ba:	f7ff fa31 	bl	8001920 <main>
  bx  lr    
 80024be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80024cc:	08009e2c 	.word	0x08009e2c
  ldr r2, =_sbss
 80024d0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80024d4:	20000ac0 	.word	0x20000ac0

080024d8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <DMA1_Stream0_IRQHandler>
	...

080024dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_Init+0x40>)
 80024e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_Init+0x40>)
 80024f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_Init+0x40>)
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 fe9b 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f808 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002510:	f7ff fd4c 	bl	8001fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00

08002520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_InitTick+0x54>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_InitTick+0x58>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 feb3 	bl	80032aa <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 fe7b 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_InitTick+0x5c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000004 	.word	0x20000004
 8002578:	2000000c 	.word	0x2000000c
 800257c:	20000008 	.word	0x20000008

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000000c 	.word	0x2000000c
 80025a4:	20000aac 	.word	0x20000aac

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000aac 	.word	0x20000aac

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000000c 	.word	0x2000000c

08002608 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e033      	b.n	8002686 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fcee 	bl	8002008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800264e:	f023 0302 	bic.w	r3, r3, #2
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fb98 	bl	8002d90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
 8002676:	e001      	b.n	800267c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b20      	cmp	r3, #32
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d049      	beq.n	8002764 <HAL_ADC_IRQHandler+0xd6>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d046      	beq.n	8002764 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d12b      	bne.n	8002754 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002700:	2b00      	cmp	r3, #0
 8002702:	d127      	bne.n	8002754 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800271c:	2b00      	cmp	r3, #0
 800271e:	d119      	bne.n	8002754 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0220 	bic.w	r2, r2, #32
 800272e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe ffdf 	bl	8001718 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f06f 0212 	mvn.w	r2, #18
 8002762:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d057      	beq.n	8002846 <HAL_ADC_IRQHandler+0x1b8>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d054      	beq.n	8002846 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d139      	bne.n	8002836 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d12b      	bne.n	8002836 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d124      	bne.n	8002836 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11d      	bne.n	8002836 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d119      	bne.n	8002836 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002810:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fc28 	bl	800308c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 020c 	mvn.w	r2, #12
 8002844:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_ADC_IRQHandler+0x21a>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d014      	beq.n	80028a8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10d      	bne.n	80028a8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f933 	bl	8002b04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f06f 0201 	mvn.w	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_ADC_IRQHandler+0x27a>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d012      	beq.n	8002908 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f06f 0220 	mvn.w	r2, #32
 80028f6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f90d 	bl	8002b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f06f 0220 	mvn.w	r2, #32
 8002906:	601a      	str	r2, [r3, #0]
  }
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_ADC_Start_DMA+0x1e>
 800292a:	2302      	movs	r3, #2
 800292c:	e0ce      	b.n	8002acc <HAL_ADC_Start_DMA+0x1bc>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d018      	beq.n	8002976 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002954:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <HAL_ADC_Start_DMA+0x1c4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5f      	ldr	r2, [pc, #380]	; (8002ad8 <HAL_ADC_Start_DMA+0x1c8>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9a      	lsrs	r2, r3, #18
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002968:	e002      	b.n	8002970 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3b01      	subs	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f9      	bne.n	800296a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002984:	d107      	bne.n	8002996 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002994:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	f040 8086 	bne.w	8002ab2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f023 0206 	bic.w	r2, r3, #6
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
 80029f2:	e002      	b.n	80029fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_ADC_Start_DMA+0x1cc>)
 8002a04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	4a35      	ldr	r2, [pc, #212]	; (8002ae0 <HAL_ADC_Start_DMA+0x1d0>)
 8002a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <HAL_ADC_Start_DMA+0x1d4>)
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_ADC_Start_DMA+0x1d8>)
 8002a1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a36:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a46:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	334c      	adds	r3, #76	; 0x4c
 8002a52:	4619      	mov	r1, r3
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f000 fce2 	bl	8003420 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10f      	bne.n	8002a88 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d129      	bne.n	8002aca <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	e020      	b.n	8002aca <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_ADC_Start_DMA+0x1dc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d11b      	bne.n	8002aca <HAL_ADC_Start_DMA+0x1ba>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d114      	bne.n	8002aca <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	e00b      	b.n	8002aca <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0210 	orr.w	r2, r3, #16
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	431bde83 	.word	0x431bde83
 8002adc:	40012300 	.word	0x40012300
 8002ae0:	08002f89 	.word	0x08002f89
 8002ae4:	08003043 	.word	0x08003043
 8002ae8:	0800305f 	.word	0x0800305f
 8002aec:	40012000 	.word	0x40012000

08002af0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1c>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e113      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x244>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b09      	cmp	r3, #9
 8002b56:	d925      	bls.n	8002ba4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68d9      	ldr	r1, [r3, #12]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b1e      	subs	r3, #30
 8002b6e:	2207      	movs	r2, #7
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43da      	mvns	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68d9      	ldr	r1, [r3, #12]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	4603      	mov	r3, r0
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4403      	add	r3, r0
 8002b96:	3b1e      	subs	r3, #30
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	e022      	b.n	8002bea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6919      	ldr	r1, [r3, #16]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	2207      	movs	r2, #7
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6919      	ldr	r1, [r3, #16]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4403      	add	r3, r0
 8002be0:	409a      	lsls	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d824      	bhi.n	8002c3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3b05      	subs	r3, #5
 8002c04:	221f      	movs	r2, #31
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	400a      	ands	r2, r1
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b05      	subs	r3, #5
 8002c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34
 8002c3a:	e04c      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d824      	bhi.n	8002c8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	3b23      	subs	r3, #35	; 0x23
 8002c56:	221f      	movs	r2, #31
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	400a      	ands	r2, r1
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b23      	subs	r3, #35	; 0x23
 8002c80:	fa00 f203 	lsl.w	r2, r0, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8c:	e023      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b41      	subs	r3, #65	; 0x41
 8002ca0:	221f      	movs	r2, #31
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	400a      	ands	r2, r1
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b41      	subs	r3, #65	; 0x41
 8002cca:	fa00 f203 	lsl.w	r2, r0, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd6:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <HAL_ADC_ConfigChannel+0x250>)
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <HAL_ADC_ConfigChannel+0x254>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10f      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1d8>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b12      	cmp	r3, #18
 8002cea:	d10b      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_ADC_ConfigChannel+0x254>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d12b      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x23a>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <HAL_ADC_ConfigChannel+0x258>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x1f4>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b11      	cmp	r3, #17
 8002d1e:	d122      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <HAL_ADC_ConfigChannel+0x258>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d111      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_ADC_ConfigChannel+0x25c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_ADC_ConfigChannel+0x260>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9a      	lsrs	r2, r3, #18
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d58:	e002      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f9      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40012300 	.word	0x40012300
 8002d80:	40012000 	.word	0x40012000
 8002d84:	10000012 	.word	0x10000012
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	431bde83 	.word	0x431bde83

08002d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <ADC_Init+0x1f0>)
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <ADC_Init+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	e00f      	b.n	8002e8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0202 	bic.w	r2, r2, #2
 8002e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7e1b      	ldrb	r3, [r3, #24]
 8002ea8:	005a      	lsls	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6859      	ldr	r1, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	035a      	lsls	r2, r3, #13
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	e007      	b.n	8002f04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	051a      	lsls	r2, r3, #20
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f46:	025a      	lsls	r2, r3, #9
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	029a      	lsls	r2, r3, #10
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40012300 	.word	0x40012300
 8002f84:	0f000001 	.word	0x0f000001

08002f88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d13c      	bne.n	800301c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d12b      	bne.n	8003014 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d127      	bne.n	8003014 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d119      	bne.n	8003014 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0220 	bic.w	r2, r2, #32
 8002fee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7fe fb7f 	bl	8001718 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800301a:	e00e      	b.n	800303a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fd75 	bl	8002b18 <HAL_ADC_ErrorCallback>
}
 800302e:	e004      	b.n	800303a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff fd4d 	bl	8002af0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2240      	movs	r2, #64	; 0x40
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff fd4a 	bl	8002b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	; (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	; (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff8e 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff29 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff3e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff8e 	bl	8003194 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5d 	bl	8003140 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff31 	bl	8003104 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff f96a 	bl	80025a8 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e099      	b.n	8003414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003300:	e00f      	b.n	8003322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003302:	f7ff f951 	bl	80025a8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b05      	cmp	r3, #5
 800330e:	d908      	bls.n	8003322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2203      	movs	r2, #3
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e078      	b.n	8003414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e8      	bne.n	8003302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_DMA_Init+0x158>)
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2b04      	cmp	r3, #4
 800337a:	d107      	bne.n	800338c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	4313      	orrs	r3, r2
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0307 	bic.w	r3, r3, #7
 80033a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d117      	bne.n	80033e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb01 	bl	80039d0 <DMA_CheckFifoParam>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2240      	movs	r2, #64	; 0x40
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033e2:	2301      	movs	r3, #1
 80033e4:	e016      	b.n	8003414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fab8 	bl	8003964 <DMA_CalcBaseAndBitshift>
 80033f4:	4603      	mov	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	223f      	movs	r2, #63	; 0x3f
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	f010803f 	.word	0xf010803f

08003420 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_DMA_Start_IT+0x26>
 8003442:	2302      	movs	r3, #2
 8003444:	e040      	b.n	80034c8 <HAL_DMA_Start_IT+0xa8>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d12f      	bne.n	80034ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa4a 	bl	8003908 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	223f      	movs	r2, #63	; 0x3f
 800347a:	409a      	lsls	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0216 	orr.w	r2, r2, #22
 800348e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e005      	b.n	80034c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
 80034c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034de:	f7ff f863 	bl	80025a8 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e052      	b.n	80035a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003520:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_Abort+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003552:	e013      	b.n	800357c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003554:	f7ff f828 	bl	80025a8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d90c      	bls.n	800357c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2203      	movs	r2, #3
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e015      	b.n	80035a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e4      	bne.n	8003554 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	223f      	movs	r2, #63	; 0x3f
 8003590:	409a      	lsls	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00c      	b.n	80035e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2205      	movs	r2, #5
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003600:	4b92      	ldr	r3, [pc, #584]	; (800384c <HAL_DMA_IRQHandler+0x258>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a92      	ldr	r2, [pc, #584]	; (8003850 <HAL_DMA_IRQHandler+0x25c>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2208      	movs	r2, #8
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	2208      	movs	r2, #8
 800364e:	409a      	lsls	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	2201      	movs	r2, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2204      	movs	r2, #4
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	2204      	movs	r2, #4
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2210      	movs	r2, #16
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d03c      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2210      	movs	r2, #16
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d018      	beq.n	8003736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d024      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e01f      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e016      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0208 	bic.w	r2, r2, #8
 8003752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2220      	movs	r2, #32
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 808e 	beq.w	8003892 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8086 	beq.w	8003892 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b05      	cmp	r3, #5
 800379c:	d136      	bne.n	800380c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0216 	bic.w	r2, r2, #22
 80037ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_DMA_IRQHandler+0x1da>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d07d      	beq.n	80038fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
        }
        return;
 800380a:	e078      	b.n	80038fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01c      	beq.n	8003854 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	2b00      	cmp	r3, #0
 800382e:	d030      	beq.n	8003892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	e02b      	b.n	8003892 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d027      	beq.n	8003892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
 800384a:	e022      	b.n	8003892 <HAL_DMA_IRQHandler+0x29e>
 800384c:	20000004 	.word	0x20000004
 8003850:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0210 	bic.w	r2, r2, #16
 8003870:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	2b00      	cmp	r3, #0
 8003898:	d032      	beq.n	8003900 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d022      	beq.n	80038ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2205      	movs	r2, #5
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d307      	bcc.n	80038da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f2      	bne.n	80038be <HAL_DMA_IRQHandler+0x2ca>
 80038d8:	e000      	b.n	80038dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
 80038fc:	e000      	b.n	8003900 <HAL_DMA_IRQHandler+0x30c>
        return;
 80038fe:	bf00      	nop
    }
  }
}
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop

08003908 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003924:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d108      	bne.n	8003948 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003946:	e007      	b.n	8003958 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	3b10      	subs	r3, #16
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800397e:	4a13      	ldr	r2, [pc, #76]	; (80039cc <DMA_CalcBaseAndBitshift+0x68>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d909      	bls.n	80039a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	1d1a      	adds	r2, r3, #4
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	659a      	str	r2, [r3, #88]	; 0x58
 80039a4:	e007      	b.n	80039b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	aaaaaaab 	.word	0xaaaaaaab
 80039cc:	08009968 	.word	0x08009968

080039d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11f      	bne.n	8003a2a <DMA_CheckFifoParam+0x5a>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d856      	bhi.n	8003a9e <DMA_CheckFifoParam+0xce>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <DMA_CheckFifoParam+0x28>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a1b 	.word	0x08003a1b
 8003a00:	08003a09 	.word	0x08003a09
 8003a04:	08003a9f 	.word	0x08003a9f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d046      	beq.n	8003aa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a18:	e043      	b.n	8003aa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a22:	d140      	bne.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e03d      	b.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	d121      	bne.n	8003a78 <DMA_CheckFifoParam+0xa8>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d837      	bhi.n	8003aaa <DMA_CheckFifoParam+0xda>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <DMA_CheckFifoParam+0x70>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a57 	.word	0x08003a57
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	08003a69 	.word	0x08003a69
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e030      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d025      	beq.n	8003aae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a66:	e022      	b.n	8003aae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a70:	d11f      	bne.n	8003ab2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a76:	e01c      	b.n	8003ab2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d903      	bls.n	8003a86 <DMA_CheckFifoParam+0xb6>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d003      	beq.n	8003a8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a84:	e018      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8a:	e015      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e00b      	b.n	8003ab6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e00a      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e008      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e006      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e004      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e159      	b.n	8003d98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 8148 	bne.w	8003d92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d005      	beq.n	8003b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d130      	bne.n	8003b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0201 	and.w	r2, r3, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d017      	beq.n	8003bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a2 	beq.w	8003d92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	4a56      	ldr	r2, [pc, #344]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5e:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c6a:	4a52      	ldr	r2, [pc, #328]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a49      	ldr	r2, [pc, #292]	; (8003db8 <HAL_GPIO_Init+0x2f0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d019      	beq.n	8003cca <HAL_GPIO_Init+0x202>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a48      	ldr	r2, [pc, #288]	; (8003dbc <HAL_GPIO_Init+0x2f4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_GPIO_Init+0x1fe>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a47      	ldr	r2, [pc, #284]	; (8003dc0 <HAL_GPIO_Init+0x2f8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_GPIO_Init+0x1fa>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a46      	ldr	r2, [pc, #280]	; (8003dc4 <HAL_GPIO_Init+0x2fc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <HAL_GPIO_Init+0x1f6>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a45      	ldr	r2, [pc, #276]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_GPIO_Init+0x1f2>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	e008      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cba:	2307      	movs	r3, #7
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e004      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_GPIO_Init+0x204>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	f002 0203 	and.w	r2, r2, #3
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	4093      	lsls	r3, r2
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cdc:	4935      	ldr	r1, [pc, #212]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cea:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d0e:	4a2f      	ldr	r2, [pc, #188]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d38:	4a24      	ldr	r2, [pc, #144]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d3e:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d62:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d8c:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	f67f aea2 	bls.w	8003ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40013800 	.word	0x40013800
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	40020c00 	.word	0x40020c00
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40013c00 	.word	0x40013c00

08003dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de0:	787b      	ldrb	r3, [r7, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dec:	e003      	b.n	8003df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e264      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d075      	beq.n	8003f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e22:	4ba3      	ldr	r3, [pc, #652]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d00c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2e:	4ba0      	ldr	r3, [pc, #640]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d112      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3a:	4b9d      	ldr	r3, [pc, #628]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e46:	d10b      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	4b99      	ldr	r3, [pc, #612]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05b      	beq.n	8003f0c <HAL_RCC_OscConfig+0x108>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d157      	bne.n	8003f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e23f      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_OscConfig+0x74>
 8003e6a:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a90      	ldr	r2, [pc, #576]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e01d      	b.n	8003eb4 <HAL_RCC_OscConfig+0xb0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x98>
 8003e82:	4b8b      	ldr	r3, [pc, #556]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a8a      	ldr	r2, [pc, #552]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a87      	ldr	r2, [pc, #540]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0xb0>
 8003e9c:	4b84      	ldr	r3, [pc, #528]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a83      	ldr	r2, [pc, #524]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b81      	ldr	r3, [pc, #516]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a80      	ldr	r2, [pc, #512]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d013      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fb74 	bl	80025a8 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fb70 	bl	80025a8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e204      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b76      	ldr	r3, [pc, #472]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xc0>
 8003ee2:	e014      	b.n	8003f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fb60 	bl	80025a8 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe fb5c 	bl	80025a8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1f0      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0xe8>
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d063      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f1a:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f26:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d11c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d116      	bne.n	8003f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_RCC_OscConfig+0x152>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e1c4      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f56:	4b56      	ldr	r3, [pc, #344]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4952      	ldr	r1, [pc, #328]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	e03a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f74:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <HAL_RCC_OscConfig+0x2b0>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fe fb15 	bl	80025a8 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fe fb11 	bl	80025a8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e1a5      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4940      	ldr	r1, [pc, #256]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb6:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <HAL_RCC_OscConfig+0x2b0>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fe faf4 	bl	80025a8 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc4:	f7fe faf0 	bl	80025a8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e184      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d030      	beq.n	8004050 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff6:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <HAL_RCC_OscConfig+0x2b4>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fe fad4 	bl	80025a8 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004004:	f7fe fad0 	bl	80025a8 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e164      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x200>
 8004022:	e015      	b.n	8004050 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004024:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_RCC_OscConfig+0x2b4>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402a:	f7fe fabd 	bl	80025a8 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004032:	f7fe fab9 	bl	80025a8 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e14d      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a0 	beq.w	800419e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10f      	bne.n	800408e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4a0e      	ldr	r2, [pc, #56]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407c:	6413      	str	r3, [r2, #64]	; 0x40
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_OscConfig+0x2b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d121      	bne.n	80040de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <HAL_RCC_OscConfig+0x2b8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <HAL_RCC_OscConfig+0x2b8>)
 80040a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a6:	f7fe fa7f 	bl	80025a8 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	e011      	b.n	80040d2 <HAL_RCC_OscConfig+0x2ce>
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	42470000 	.word	0x42470000
 80040b8:	42470e80 	.word	0x42470e80
 80040bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fe fa72 	bl	80025a8 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e106      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d2:	4b85      	ldr	r3, [pc, #532]	; (80042e8 <HAL_RCC_OscConfig+0x4e4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x2f0>
 80040e6:	4b81      	ldr	r3, [pc, #516]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a80      	ldr	r2, [pc, #512]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
 80040f2:	e01c      	b.n	800412e <HAL_RCC_OscConfig+0x32a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	d10c      	bne.n	8004116 <HAL_RCC_OscConfig+0x312>
 80040fc:	4b7b      	ldr	r3, [pc, #492]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a7a      	ldr	r2, [pc, #488]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004102:	f043 0304 	orr.w	r3, r3, #4
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	4b78      	ldr	r3, [pc, #480]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4a77      	ldr	r2, [pc, #476]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6713      	str	r3, [r2, #112]	; 0x70
 8004114:	e00b      	b.n	800412e <HAL_RCC_OscConfig+0x32a>
 8004116:	4b75      	ldr	r3, [pc, #468]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a74      	ldr	r2, [pc, #464]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
 8004122:	4b72      	ldr	r3, [pc, #456]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a71      	ldr	r2, [pc, #452]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d015      	beq.n	8004162 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004136:	f7fe fa37 	bl	80025a8 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fe fa33 	bl	80025a8 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0c5      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ee      	beq.n	800413e <HAL_RCC_OscConfig+0x33a>
 8004160:	e014      	b.n	800418c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004162:	f7fe fa21 	bl	80025a8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fe fa1d 	bl	80025a8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	; 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0af      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004180:	4b5a      	ldr	r3, [pc, #360]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ee      	bne.n	800416a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004192:	4b56      	ldr	r3, [pc, #344]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a55      	ldr	r2, [pc, #340]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 809b 	beq.w	80042de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d05c      	beq.n	800426e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d141      	bne.n	8004240 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041bc:	4b4c      	ldr	r3, [pc, #304]	; (80042f0 <HAL_RCC_OscConfig+0x4ec>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fe f9f1 	bl	80025a8 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fe f9ed 	bl	80025a8 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e081      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041dc:	4b43      	ldr	r3, [pc, #268]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	019b      	lsls	r3, r3, #6
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	3b01      	subs	r3, #1
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	4937      	ldr	r1, [pc, #220]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCC_OscConfig+0x4ec>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe f9c6 	bl	80025a8 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004220:	f7fe f9c2 	bl	80025a8 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e056      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x41c>
 800423e:	e04e      	b.n	80042de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x4ec>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fe f9af 	bl	80025a8 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424e:	f7fe f9ab 	bl	80025a8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e03f      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004260:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x44a>
 800426c:	e037      	b.n	80042de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e032      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800427a:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d028      	beq.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d121      	bne.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d11a      	bne.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d111      	bne.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	3b01      	subs	r3, #1
 80042c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d107      	bne.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40007000 	.word	0x40007000
 80042ec:	40023800 	.word	0x40023800
 80042f0:	42470060 	.word	0x42470060

080042f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0cc      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d90c      	bls.n	8004330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0b8      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004348:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4a58      	ldr	r2, [pc, #352]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004360:	4b53      	ldr	r3, [pc, #332]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800436a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436c:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	494d      	ldr	r1, [pc, #308]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d044      	beq.n	8004414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d119      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e07f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d003      	beq.n	80043b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e067      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4934      	ldr	r1, [pc, #208]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e4:	f7fe f8e0 	bl	80025a8 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fe f8dc 	bl	80025a8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e04f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004414:	4b25      	ldr	r3, [pc, #148]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d20c      	bcs.n	800443c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e032      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004448:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4916      	ldr	r1, [pc, #88]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004466:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	490e      	ldr	r1, [pc, #56]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800447a:	f000 f821 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 800447e:	4602      	mov	r2, r0
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	490a      	ldr	r1, [pc, #40]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 800448c:	5ccb      	ldrb	r3, [r1, r3]
 800448e:	fa22 f303 	lsr.w	r3, r2, r3
 8004492:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe f840 	bl	8002520 <HAL_InitTick>

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00
 80044b0:	40023800 	.word	0x40023800
 80044b4:	08009950 	.word	0x08009950
 80044b8:	20000004 	.word	0x20000004
 80044bc:	20000008 	.word	0x20000008

080044c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	b5b0      	push	{r4, r5, r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c6:	2100      	movs	r1, #0
 80044c8:	6079      	str	r1, [r7, #4]
 80044ca:	2100      	movs	r1, #0
 80044cc:	60f9      	str	r1, [r7, #12]
 80044ce:	2100      	movs	r1, #0
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044d2:	2100      	movs	r1, #0
 80044d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d6:	4952      	ldr	r1, [pc, #328]	; (8004620 <HAL_RCC_GetSysClockFreq+0x160>)
 80044d8:	6889      	ldr	r1, [r1, #8]
 80044da:	f001 010c 	and.w	r1, r1, #12
 80044de:	2908      	cmp	r1, #8
 80044e0:	d00d      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x3e>
 80044e2:	2908      	cmp	r1, #8
 80044e4:	f200 8094 	bhi.w	8004610 <HAL_RCC_GetSysClockFreq+0x150>
 80044e8:	2900      	cmp	r1, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x32>
 80044ec:	2904      	cmp	r1, #4
 80044ee:	d003      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x38>
 80044f0:	e08e      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f2:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <HAL_RCC_GetSysClockFreq+0x164>)
 80044f4:	60bb      	str	r3, [r7, #8]
       break;
 80044f6:	e08e      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f8:	4b4b      	ldr	r3, [pc, #300]	; (8004628 <HAL_RCC_GetSysClockFreq+0x168>)
 80044fa:	60bb      	str	r3, [r7, #8]
      break;
 80044fc:	e08b      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044fe:	4948      	ldr	r1, [pc, #288]	; (8004620 <HAL_RCC_GetSysClockFreq+0x160>)
 8004500:	6849      	ldr	r1, [r1, #4]
 8004502:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004506:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004508:	4945      	ldr	r1, [pc, #276]	; (8004620 <HAL_RCC_GetSysClockFreq+0x160>)
 800450a:	6849      	ldr	r1, [r1, #4]
 800450c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004510:	2900      	cmp	r1, #0
 8004512:	d024      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004514:	4942      	ldr	r1, [pc, #264]	; (8004620 <HAL_RCC_GetSysClockFreq+0x160>)
 8004516:	6849      	ldr	r1, [r1, #4]
 8004518:	0989      	lsrs	r1, r1, #6
 800451a:	4608      	mov	r0, r1
 800451c:	f04f 0100 	mov.w	r1, #0
 8004520:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004524:	f04f 0500 	mov.w	r5, #0
 8004528:	ea00 0204 	and.w	r2, r0, r4
 800452c:	ea01 0305 	and.w	r3, r1, r5
 8004530:	493d      	ldr	r1, [pc, #244]	; (8004628 <HAL_RCC_GetSysClockFreq+0x168>)
 8004532:	fb01 f003 	mul.w	r0, r1, r3
 8004536:	2100      	movs	r1, #0
 8004538:	fb01 f102 	mul.w	r1, r1, r2
 800453c:	1844      	adds	r4, r0, r1
 800453e:	493a      	ldr	r1, [pc, #232]	; (8004628 <HAL_RCC_GetSysClockFreq+0x168>)
 8004540:	fba2 0101 	umull	r0, r1, r2, r1
 8004544:	1863      	adds	r3, r4, r1
 8004546:	4619      	mov	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	f7fc fb62 	bl	8000c18 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e04a      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_RCC_GetSysClockFreq+0x160>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	461a      	mov	r2, r3
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	ea02 0400 	and.w	r4, r2, r0
 8004576:	ea03 0501 	and.w	r5, r3, r1
 800457a:	4620      	mov	r0, r4
 800457c:	4629      	mov	r1, r5
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	014b      	lsls	r3, r1, #5
 8004588:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800458c:	0142      	lsls	r2, r0, #5
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	1b00      	subs	r0, r0, r4
 8004594:	eb61 0105 	sbc.w	r1, r1, r5
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	018b      	lsls	r3, r1, #6
 80045a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045a6:	0182      	lsls	r2, r0, #6
 80045a8:	1a12      	subs	r2, r2, r0
 80045aa:	eb63 0301 	sbc.w	r3, r3, r1
 80045ae:	f04f 0000 	mov.w	r0, #0
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	00d9      	lsls	r1, r3, #3
 80045b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045bc:	00d0      	lsls	r0, r2, #3
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	1912      	adds	r2, r2, r4
 80045c4:	eb45 0303 	adc.w	r3, r5, r3
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	0299      	lsls	r1, r3, #10
 80045d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045d6:	0290      	lsls	r0, r2, #10
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f7fc fb16 	bl	8000c18 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4613      	mov	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_GetSysClockFreq+0x160>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	3301      	adds	r3, #1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	60bb      	str	r3, [r7, #8]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <HAL_RCC_GetSysClockFreq+0x164>)
 8004612:	60bb      	str	r3, [r7, #8]
      break;
 8004614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004616:	68bb      	ldr	r3, [r7, #8]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bdb0      	pop	{r4, r5, r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	00f42400 	.word	0x00f42400
 8004628:	017d7840 	.word	0x017d7840

0800462c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <HAL_RCC_GetHCLKFreq+0x14>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000004 	.word	0x20000004

08004644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004648:	f7ff fff0 	bl	800462c <HAL_RCC_GetHCLKFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0a9b      	lsrs	r3, r3, #10
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4903      	ldr	r1, [pc, #12]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800465a:	5ccb      	ldrb	r3, [r1, r3]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	08009960 	.word	0x08009960

0800466c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004670:	f7ff ffdc 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0b5b      	lsrs	r3, r3, #13
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	08009960 	.word	0x08009960

08004694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e03f      	b.n	8004726 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fd fd24 	bl	8002108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	; 0x24
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fc7b 	bl	8004fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800470c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08a      	sub	sp, #40	; 0x28
 8004732:	af02      	add	r7, sp, #8
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	d17c      	bne.n	8004848 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_UART_Transmit+0x2c>
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e075      	b.n	800484a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_UART_Transmit+0x3e>
 8004768:	2302      	movs	r3, #2
 800476a:	e06e      	b.n	800484a <HAL_UART_Transmit+0x11c>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2221      	movs	r2, #33	; 0x21
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004782:	f7fd ff11 	bl	80025a8 <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d108      	bne.n	80047b0 <HAL_UART_Transmit+0x82>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	e003      	b.n	80047b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047c0:	e02a      	b.n	8004818 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fa3d 	bl	8004c4c <UART_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e036      	b.n	800484a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	3302      	adds	r3, #2
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	e007      	b.n	800480a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3301      	adds	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1cf      	bne.n	80047c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	2140      	movs	r1, #64	; 0x40
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fa0d 	bl	8004c4c <UART_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e006      	b.n	800484a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	4613      	mov	r3, r2
 800485e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b20      	cmp	r3, #32
 800486a:	d11d      	bne.n	80048a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_UART_Receive_IT+0x26>
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e016      	b.n	80048aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_UART_Receive_IT+0x38>
 8004886:	2302      	movs	r3, #2
 8004888:	e00f      	b.n	80048aa <HAL_UART_Receive_IT+0x58>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	461a      	mov	r2, r3
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa1e 	bl	8004ce0 <UART_Start_Receive_IT>
 80048a4:	4603      	mov	r3, r0
 80048a6:	e000      	b.n	80048aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_UART_IRQHandler+0x52>
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fad1 	bl	8004ea6 <UART_Receive_IT>
      return;
 8004904:	e17c      	b.n	8004c00 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80b1 	beq.w	8004a70 <HAL_UART_IRQHandler+0x1bc>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <HAL_UART_IRQHandler+0x70>
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80a6 	beq.w	8004a70 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_UART_IRQHandler+0x90>
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	f043 0201 	orr.w	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_UART_IRQHandler+0xb0>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	f043 0202 	orr.w	r2, r3, #2
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_UART_IRQHandler+0xd0>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f043 0204 	orr.w	r2, r3, #4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00f      	beq.n	80049ae <HAL_UART_IRQHandler+0xfa>
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <HAL_UART_IRQHandler+0xee>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f043 0208 	orr.w	r2, r3, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 811f 	beq.w	8004bf6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_UART_IRQHandler+0x11e>
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fa6a 	bl	8004ea6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_UART_IRQHandler+0x146>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d031      	beq.n	8004a5e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9aa 	bl	8004d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d123      	bne.n	8004a56 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d013      	beq.n	8004a4e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	4a77      	ldr	r2, [pc, #476]	; (8004c08 <HAL_UART_IRQHandler+0x354>)
 8004a2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fdbc 	bl	80035b0 <HAL_DMA_Abort_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	e00e      	b.n	8004a6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8e6 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	e00a      	b.n	8004a6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8e2 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e006      	b.n	8004a6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8de 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a6a:	e0c4      	b.n	8004bf6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	bf00      	nop
    return;
 8004a6e:	e0c2      	b.n	8004bf6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	f040 80a2 	bne.w	8004bbe <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 809c 	beq.w	8004bbe <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8096 	beq.w	8004bbe <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b40      	cmp	r3, #64	; 0x40
 8004ab4:	d14f      	bne.n	8004b56 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004ac0:	8a3b      	ldrh	r3, [r7, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8099 	beq.w	8004bfa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004acc:	8a3a      	ldrh	r2, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	f080 8093 	bcs.w	8004bfa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8a3a      	ldrh	r2, [r7, #16]
 8004ad8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae4:	d02b      	beq.n	8004b3e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b14:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0210 	bic.w	r2, r2, #16
 8004b32:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe fcc9 	bl	80034d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f870 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b54:	e051      	b.n	8004bfa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d047      	beq.n	8004bfe <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004b6e:	8a7b      	ldrh	r3, [r7, #18]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d044      	beq.n	8004bfe <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b82:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0210 	bic.w	r2, r2, #16
 8004bb0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bb2:	8a7b      	ldrh	r3, [r7, #18]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f83c 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bbc:	e01f      	b.n	8004bfe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_UART_IRQHandler+0x326>
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8ff 	bl	8004dd6 <UART_Transmit_IT>
    return;
 8004bd8:	e012      	b.n	8004c00 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <HAL_UART_IRQHandler+0x34c>
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f941 	bl	8004e76 <UART_EndTransmit_IT>
    return;
 8004bf4:	e004      	b.n	8004c00 <HAL_UART_IRQHandler+0x34c>
    return;
 8004bf6:	bf00      	nop
 8004bf8:	e002      	b.n	8004c00 <HAL_UART_IRQHandler+0x34c>
      return;
 8004bfa:	bf00      	nop
 8004bfc:	e000      	b.n	8004c00 <HAL_UART_IRQHandler+0x34c>
      return;
 8004bfe:	bf00      	nop
  }
}
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	08004daf 	.word	0x08004daf

08004c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5c:	e02c      	b.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d028      	beq.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c6c:	f7fd fc9c 	bl	80025a8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d21d      	bcs.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e00f      	b.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d0c3      	beq.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2222      	movs	r2, #34	; 0x22
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d24:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0220 	orr.w	r2, r2, #32
 8004d44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695a      	ldr	r2, [r3, #20]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d107      	bne.n	8004d94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0210 	bic.w	r2, r2, #16
 8004d92:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff ff29 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b21      	cmp	r3, #33	; 0x21
 8004de8:	d13e      	bne.n	8004e68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d114      	bne.n	8004e1e <UART_Transmit_IT+0x48>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d110      	bne.n	8004e1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	1c9a      	adds	r2, r3, #2
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	621a      	str	r2, [r3, #32]
 8004e1c:	e008      	b.n	8004e30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	1c59      	adds	r1, r3, #1
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6211      	str	r1, [r2, #32]
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10f      	bne.n	8004e64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff feb8 	bl	8004c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b22      	cmp	r3, #34	; 0x22
 8004eb8:	f040 8087 	bne.w	8004fca <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec4:	d117      	bne.n	8004ef6 <UART_Receive_IT+0x50>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d113      	bne.n	8004ef6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	1c9a      	adds	r2, r3, #2
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef4:	e026      	b.n	8004f44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f08:	d007      	beq.n	8004f1a <UART_Receive_IT+0x74>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <UART_Receive_IT+0x82>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e008      	b.n	8004f3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4619      	mov	r1, r3
 8004f52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d136      	bne.n	8004fc6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0220 	bic.w	r2, r2, #32
 8004f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10e      	bne.n	8004fb6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0210 	bic.w	r2, r2, #16
 8004fa6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fe40 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
 8004fb4:	e002      	b.n	8004fbc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fc34 	bl	8001824 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e002      	b.n	8004fcc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004fca:	2302      	movs	r3, #2
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd8:	b09f      	sub	sp, #124	; 0x7c
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fea:	68d9      	ldr	r1, [r3, #12]
 8004fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	ea40 0301 	orr.w	r3, r0, r1
 8004ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	431a      	orrs	r2, r3
 8005006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	4313      	orrs	r3, r2
 800500c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005018:	f021 010c 	bic.w	r1, r1, #12
 800501c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005022:	430b      	orrs	r3, r1
 8005024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005032:	6999      	ldr	r1, [r3, #24]
 8005034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	ea40 0301 	orr.w	r3, r0, r1
 800503c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4bc5      	ldr	r3, [pc, #788]	; (8005358 <UART_SetConfig+0x384>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d004      	beq.n	8005052 <UART_SetConfig+0x7e>
 8005048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4bc3      	ldr	r3, [pc, #780]	; (800535c <UART_SetConfig+0x388>)
 800504e:	429a      	cmp	r2, r3
 8005050:	d103      	bne.n	800505a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005052:	f7ff fb0b 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8005056:	6778      	str	r0, [r7, #116]	; 0x74
 8005058:	e002      	b.n	8005060 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800505a:	f7ff faf3 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 800505e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005068:	f040 80b6 	bne.w	80051d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800506c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800506e:	461c      	mov	r4, r3
 8005070:	f04f 0500 	mov.w	r5, #0
 8005074:	4622      	mov	r2, r4
 8005076:	462b      	mov	r3, r5
 8005078:	1891      	adds	r1, r2, r2
 800507a:	6439      	str	r1, [r7, #64]	; 0x40
 800507c:	415b      	adcs	r3, r3
 800507e:	647b      	str	r3, [r7, #68]	; 0x44
 8005080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005084:	1912      	adds	r2, r2, r4
 8005086:	eb45 0303 	adc.w	r3, r5, r3
 800508a:	f04f 0000 	mov.w	r0, #0
 800508e:	f04f 0100 	mov.w	r1, #0
 8005092:	00d9      	lsls	r1, r3, #3
 8005094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005098:	00d0      	lsls	r0, r2, #3
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	1911      	adds	r1, r2, r4
 80050a0:	6639      	str	r1, [r7, #96]	; 0x60
 80050a2:	416b      	adcs	r3, r5
 80050a4:	667b      	str	r3, [r7, #100]	; 0x64
 80050a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	1891      	adds	r1, r2, r2
 80050b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80050b4:	415b      	adcs	r3, r3
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050c0:	f7fb fdaa 	bl	8000c18 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4ba5      	ldr	r3, [pc, #660]	; (8005360 <UART_SetConfig+0x38c>)
 80050ca:	fba3 2302 	umull	r2, r3, r3, r2
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	011e      	lsls	r6, r3, #4
 80050d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d4:	461c      	mov	r4, r3
 80050d6:	f04f 0500 	mov.w	r5, #0
 80050da:	4622      	mov	r2, r4
 80050dc:	462b      	mov	r3, r5
 80050de:	1891      	adds	r1, r2, r2
 80050e0:	6339      	str	r1, [r7, #48]	; 0x30
 80050e2:	415b      	adcs	r3, r3
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
 80050e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050ea:	1912      	adds	r2, r2, r4
 80050ec:	eb45 0303 	adc.w	r3, r5, r3
 80050f0:	f04f 0000 	mov.w	r0, #0
 80050f4:	f04f 0100 	mov.w	r1, #0
 80050f8:	00d9      	lsls	r1, r3, #3
 80050fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050fe:	00d0      	lsls	r0, r2, #3
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	1911      	adds	r1, r2, r4
 8005106:	65b9      	str	r1, [r7, #88]	; 0x58
 8005108:	416b      	adcs	r3, r5
 800510a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	461a      	mov	r2, r3
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	1891      	adds	r1, r2, r2
 8005118:	62b9      	str	r1, [r7, #40]	; 0x28
 800511a:	415b      	adcs	r3, r3
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005122:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005126:	f7fb fd77 	bl	8000c18 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4b8c      	ldr	r3, [pc, #560]	; (8005360 <UART_SetConfig+0x38c>)
 8005130:	fba3 1302 	umull	r1, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	2164      	movs	r1, #100	; 0x64
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	3332      	adds	r3, #50	; 0x32
 8005142:	4a87      	ldr	r2, [pc, #540]	; (8005360 <UART_SetConfig+0x38c>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005150:	441e      	add	r6, r3
 8005152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005154:	4618      	mov	r0, r3
 8005156:	f04f 0100 	mov.w	r1, #0
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	1894      	adds	r4, r2, r2
 8005160:	623c      	str	r4, [r7, #32]
 8005162:	415b      	adcs	r3, r3
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
 8005166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800516a:	1812      	adds	r2, r2, r0
 800516c:	eb41 0303 	adc.w	r3, r1, r3
 8005170:	f04f 0400 	mov.w	r4, #0
 8005174:	f04f 0500 	mov.w	r5, #0
 8005178:	00dd      	lsls	r5, r3, #3
 800517a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800517e:	00d4      	lsls	r4, r2, #3
 8005180:	4622      	mov	r2, r4
 8005182:	462b      	mov	r3, r5
 8005184:	1814      	adds	r4, r2, r0
 8005186:	653c      	str	r4, [r7, #80]	; 0x50
 8005188:	414b      	adcs	r3, r1
 800518a:	657b      	str	r3, [r7, #84]	; 0x54
 800518c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	461a      	mov	r2, r3
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	1891      	adds	r1, r2, r2
 8005198:	61b9      	str	r1, [r7, #24]
 800519a:	415b      	adcs	r3, r3
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051a6:	f7fb fd37 	bl	8000c18 <__aeabi_uldivmod>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <UART_SetConfig+0x38c>)
 80051b0:	fba3 1302 	umull	r1, r3, r3, r2
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	2164      	movs	r1, #100	; 0x64
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	3332      	adds	r3, #50	; 0x32
 80051c2:	4a67      	ldr	r2, [pc, #412]	; (8005360 <UART_SetConfig+0x38c>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	f003 0207 	and.w	r2, r3, #7
 80051ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4432      	add	r2, r6
 80051d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051d6:	e0b9      	b.n	800534c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051da:	461c      	mov	r4, r3
 80051dc:	f04f 0500 	mov.w	r5, #0
 80051e0:	4622      	mov	r2, r4
 80051e2:	462b      	mov	r3, r5
 80051e4:	1891      	adds	r1, r2, r2
 80051e6:	6139      	str	r1, [r7, #16]
 80051e8:	415b      	adcs	r3, r3
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051f0:	1912      	adds	r2, r2, r4
 80051f2:	eb45 0303 	adc.w	r3, r5, r3
 80051f6:	f04f 0000 	mov.w	r0, #0
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	00d9      	lsls	r1, r3, #3
 8005200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005204:	00d0      	lsls	r0, r2, #3
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	eb12 0804 	adds.w	r8, r2, r4
 800520e:	eb43 0905 	adc.w	r9, r3, r5
 8005212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	f04f 0100 	mov.w	r1, #0
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	008b      	lsls	r3, r1, #2
 8005226:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800522a:	0082      	lsls	r2, r0, #2
 800522c:	4640      	mov	r0, r8
 800522e:	4649      	mov	r1, r9
 8005230:	f7fb fcf2 	bl	8000c18 <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4b49      	ldr	r3, [pc, #292]	; (8005360 <UART_SetConfig+0x38c>)
 800523a:	fba3 2302 	umull	r2, r3, r3, r2
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	011e      	lsls	r6, r3, #4
 8005242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005244:	4618      	mov	r0, r3
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	1894      	adds	r4, r2, r2
 8005250:	60bc      	str	r4, [r7, #8]
 8005252:	415b      	adcs	r3, r3
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800525a:	1812      	adds	r2, r2, r0
 800525c:	eb41 0303 	adc.w	r3, r1, r3
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	f04f 0500 	mov.w	r5, #0
 8005268:	00dd      	lsls	r5, r3, #3
 800526a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800526e:	00d4      	lsls	r4, r2, #3
 8005270:	4622      	mov	r2, r4
 8005272:	462b      	mov	r3, r5
 8005274:	1814      	adds	r4, r2, r0
 8005276:	64bc      	str	r4, [r7, #72]	; 0x48
 8005278:	414b      	adcs	r3, r1
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4618      	mov	r0, r3
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	008b      	lsls	r3, r1, #2
 8005290:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005294:	0082      	lsls	r2, r0, #2
 8005296:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800529a:	f7fb fcbd 	bl	8000c18 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <UART_SetConfig+0x38c>)
 80052a4:	fba3 1302 	umull	r1, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2164      	movs	r1, #100	; 0x64
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	3332      	adds	r3, #50	; 0x32
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <UART_SetConfig+0x38c>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c2:	441e      	add	r6, r3
 80052c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c6:	4618      	mov	r0, r3
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	1894      	adds	r4, r2, r2
 80052d2:	603c      	str	r4, [r7, #0]
 80052d4:	415b      	adcs	r3, r3
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052dc:	1812      	adds	r2, r2, r0
 80052de:	eb41 0303 	adc.w	r3, r1, r3
 80052e2:	f04f 0400 	mov.w	r4, #0
 80052e6:	f04f 0500 	mov.w	r5, #0
 80052ea:	00dd      	lsls	r5, r3, #3
 80052ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052f0:	00d4      	lsls	r4, r2, #3
 80052f2:	4622      	mov	r2, r4
 80052f4:	462b      	mov	r3, r5
 80052f6:	eb12 0a00 	adds.w	sl, r2, r0
 80052fa:	eb43 0b01 	adc.w	fp, r3, r1
 80052fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	f04f 0100 	mov.w	r1, #0
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	008b      	lsls	r3, r1, #2
 8005312:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005316:	0082      	lsls	r2, r0, #2
 8005318:	4650      	mov	r0, sl
 800531a:	4659      	mov	r1, fp
 800531c:	f7fb fc7c 	bl	8000c18 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <UART_SetConfig+0x38c>)
 8005326:	fba3 1302 	umull	r1, r3, r3, r2
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	2164      	movs	r1, #100	; 0x64
 800532e:	fb01 f303 	mul.w	r3, r1, r3
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	3332      	adds	r3, #50	; 0x32
 8005338:	4a09      	ldr	r2, [pc, #36]	; (8005360 <UART_SetConfig+0x38c>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	f003 020f 	and.w	r2, r3, #15
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4432      	add	r2, r6
 800534a:	609a      	str	r2, [r3, #8]
}
 800534c:	bf00      	nop
 800534e:	377c      	adds	r7, #124	; 0x7c
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	40011000 	.word	0x40011000
 800535c:	40011400 	.word	0x40011400
 8005360:	51eb851f 	.word	0x51eb851f

08005364 <atof>:
 8005364:	2100      	movs	r1, #0
 8005366:	f001 bb01 	b.w	800696c <strtod>

0800536a <atoi>:
 800536a:	220a      	movs	r2, #10
 800536c:	2100      	movs	r1, #0
 800536e:	f001 bb8d 	b.w	8006a8c <strtol>
	...

08005374 <__errno>:
 8005374:	4b01      	ldr	r3, [pc, #4]	; (800537c <__errno+0x8>)
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000010 	.word	0x20000010

08005380 <__libc_init_array>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4d0d      	ldr	r5, [pc, #52]	; (80053b8 <__libc_init_array+0x38>)
 8005384:	4c0d      	ldr	r4, [pc, #52]	; (80053bc <__libc_init_array+0x3c>)
 8005386:	1b64      	subs	r4, r4, r5
 8005388:	10a4      	asrs	r4, r4, #2
 800538a:	2600      	movs	r6, #0
 800538c:	42a6      	cmp	r6, r4
 800538e:	d109      	bne.n	80053a4 <__libc_init_array+0x24>
 8005390:	4d0b      	ldr	r5, [pc, #44]	; (80053c0 <__libc_init_array+0x40>)
 8005392:	4c0c      	ldr	r4, [pc, #48]	; (80053c4 <__libc_init_array+0x44>)
 8005394:	f004 fa54 	bl	8009840 <_init>
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	2600      	movs	r6, #0
 800539e:	42a6      	cmp	r6, r4
 80053a0:	d105      	bne.n	80053ae <__libc_init_array+0x2e>
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a8:	4798      	blx	r3
 80053aa:	3601      	adds	r6, #1
 80053ac:	e7ee      	b.n	800538c <__libc_init_array+0xc>
 80053ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b2:	4798      	blx	r3
 80053b4:	3601      	adds	r6, #1
 80053b6:	e7f2      	b.n	800539e <__libc_init_array+0x1e>
 80053b8:	08009e24 	.word	0x08009e24
 80053bc:	08009e24 	.word	0x08009e24
 80053c0:	08009e24 	.word	0x08009e24
 80053c4:	08009e28 	.word	0x08009e28

080053c8 <memset>:
 80053c8:	4402      	add	r2, r0
 80053ca:	4603      	mov	r3, r0
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d100      	bne.n	80053d2 <memset+0xa>
 80053d0:	4770      	bx	lr
 80053d2:	f803 1b01 	strb.w	r1, [r3], #1
 80053d6:	e7f9      	b.n	80053cc <memset+0x4>

080053d8 <__cvt>:
 80053d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	ec55 4b10 	vmov	r4, r5, d0
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	460e      	mov	r6, r1
 80053e4:	4619      	mov	r1, r3
 80053e6:	462b      	mov	r3, r5
 80053e8:	bfbb      	ittet	lt
 80053ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053ee:	461d      	movlt	r5, r3
 80053f0:	2300      	movge	r3, #0
 80053f2:	232d      	movlt	r3, #45	; 0x2d
 80053f4:	700b      	strb	r3, [r1, #0]
 80053f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053fc:	4691      	mov	r9, r2
 80053fe:	f023 0820 	bic.w	r8, r3, #32
 8005402:	bfbc      	itt	lt
 8005404:	4622      	movlt	r2, r4
 8005406:	4614      	movlt	r4, r2
 8005408:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800540c:	d005      	beq.n	800541a <__cvt+0x42>
 800540e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005412:	d100      	bne.n	8005416 <__cvt+0x3e>
 8005414:	3601      	adds	r6, #1
 8005416:	2102      	movs	r1, #2
 8005418:	e000      	b.n	800541c <__cvt+0x44>
 800541a:	2103      	movs	r1, #3
 800541c:	ab03      	add	r3, sp, #12
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	ab02      	add	r3, sp, #8
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	ec45 4b10 	vmov	d0, r4, r5
 8005428:	4653      	mov	r3, sl
 800542a:	4632      	mov	r2, r6
 800542c:	f001 fbc4 	bl	8006bb8 <_dtoa_r>
 8005430:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005434:	4607      	mov	r7, r0
 8005436:	d102      	bne.n	800543e <__cvt+0x66>
 8005438:	f019 0f01 	tst.w	r9, #1
 800543c:	d022      	beq.n	8005484 <__cvt+0xac>
 800543e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005442:	eb07 0906 	add.w	r9, r7, r6
 8005446:	d110      	bne.n	800546a <__cvt+0x92>
 8005448:	783b      	ldrb	r3, [r7, #0]
 800544a:	2b30      	cmp	r3, #48	; 0x30
 800544c:	d10a      	bne.n	8005464 <__cvt+0x8c>
 800544e:	2200      	movs	r2, #0
 8005450:	2300      	movs	r3, #0
 8005452:	4620      	mov	r0, r4
 8005454:	4629      	mov	r1, r5
 8005456:	f7fb fb4f 	bl	8000af8 <__aeabi_dcmpeq>
 800545a:	b918      	cbnz	r0, 8005464 <__cvt+0x8c>
 800545c:	f1c6 0601 	rsb	r6, r6, #1
 8005460:	f8ca 6000 	str.w	r6, [sl]
 8005464:	f8da 3000 	ldr.w	r3, [sl]
 8005468:	4499      	add	r9, r3
 800546a:	2200      	movs	r2, #0
 800546c:	2300      	movs	r3, #0
 800546e:	4620      	mov	r0, r4
 8005470:	4629      	mov	r1, r5
 8005472:	f7fb fb41 	bl	8000af8 <__aeabi_dcmpeq>
 8005476:	b108      	cbz	r0, 800547c <__cvt+0xa4>
 8005478:	f8cd 900c 	str.w	r9, [sp, #12]
 800547c:	2230      	movs	r2, #48	; 0x30
 800547e:	9b03      	ldr	r3, [sp, #12]
 8005480:	454b      	cmp	r3, r9
 8005482:	d307      	bcc.n	8005494 <__cvt+0xbc>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005488:	1bdb      	subs	r3, r3, r7
 800548a:	4638      	mov	r0, r7
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	b004      	add	sp, #16
 8005490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005494:	1c59      	adds	r1, r3, #1
 8005496:	9103      	str	r1, [sp, #12]
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e7f0      	b.n	800547e <__cvt+0xa6>

0800549c <__exponent>:
 800549c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800549e:	4603      	mov	r3, r0
 80054a0:	2900      	cmp	r1, #0
 80054a2:	bfb8      	it	lt
 80054a4:	4249      	neglt	r1, r1
 80054a6:	f803 2b02 	strb.w	r2, [r3], #2
 80054aa:	bfb4      	ite	lt
 80054ac:	222d      	movlt	r2, #45	; 0x2d
 80054ae:	222b      	movge	r2, #43	; 0x2b
 80054b0:	2909      	cmp	r1, #9
 80054b2:	7042      	strb	r2, [r0, #1]
 80054b4:	dd2a      	ble.n	800550c <__exponent+0x70>
 80054b6:	f10d 0407 	add.w	r4, sp, #7
 80054ba:	46a4      	mov	ip, r4
 80054bc:	270a      	movs	r7, #10
 80054be:	46a6      	mov	lr, r4
 80054c0:	460a      	mov	r2, r1
 80054c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80054c6:	fb07 1516 	mls	r5, r7, r6, r1
 80054ca:	3530      	adds	r5, #48	; 0x30
 80054cc:	2a63      	cmp	r2, #99	; 0x63
 80054ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80054d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054d6:	4631      	mov	r1, r6
 80054d8:	dcf1      	bgt.n	80054be <__exponent+0x22>
 80054da:	3130      	adds	r1, #48	; 0x30
 80054dc:	f1ae 0502 	sub.w	r5, lr, #2
 80054e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054e4:	1c44      	adds	r4, r0, #1
 80054e6:	4629      	mov	r1, r5
 80054e8:	4561      	cmp	r1, ip
 80054ea:	d30a      	bcc.n	8005502 <__exponent+0x66>
 80054ec:	f10d 0209 	add.w	r2, sp, #9
 80054f0:	eba2 020e 	sub.w	r2, r2, lr
 80054f4:	4565      	cmp	r5, ip
 80054f6:	bf88      	it	hi
 80054f8:	2200      	movhi	r2, #0
 80054fa:	4413      	add	r3, r2
 80054fc:	1a18      	subs	r0, r3, r0
 80054fe:	b003      	add	sp, #12
 8005500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005506:	f804 2f01 	strb.w	r2, [r4, #1]!
 800550a:	e7ed      	b.n	80054e8 <__exponent+0x4c>
 800550c:	2330      	movs	r3, #48	; 0x30
 800550e:	3130      	adds	r1, #48	; 0x30
 8005510:	7083      	strb	r3, [r0, #2]
 8005512:	70c1      	strb	r1, [r0, #3]
 8005514:	1d03      	adds	r3, r0, #4
 8005516:	e7f1      	b.n	80054fc <__exponent+0x60>

08005518 <_printf_float>:
 8005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	ed2d 8b02 	vpush	{d8}
 8005520:	b08d      	sub	sp, #52	; 0x34
 8005522:	460c      	mov	r4, r1
 8005524:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005528:	4616      	mov	r6, r2
 800552a:	461f      	mov	r7, r3
 800552c:	4605      	mov	r5, r0
 800552e:	f002 fc9f 	bl	8007e70 <_localeconv_r>
 8005532:	f8d0 a000 	ldr.w	sl, [r0]
 8005536:	4650      	mov	r0, sl
 8005538:	f7fa fe5c 	bl	80001f4 <strlen>
 800553c:	2300      	movs	r3, #0
 800553e:	930a      	str	r3, [sp, #40]	; 0x28
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	9305      	str	r3, [sp, #20]
 8005544:	f8d8 3000 	ldr.w	r3, [r8]
 8005548:	f894 b018 	ldrb.w	fp, [r4, #24]
 800554c:	3307      	adds	r3, #7
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	f103 0208 	add.w	r2, r3, #8
 8005556:	f8c8 2000 	str.w	r2, [r8]
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005562:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005566:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800556a:	9307      	str	r3, [sp, #28]
 800556c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005570:	ee08 0a10 	vmov	s16, r0
 8005574:	4b9f      	ldr	r3, [pc, #636]	; (80057f4 <_printf_float+0x2dc>)
 8005576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800557a:	f04f 32ff 	mov.w	r2, #4294967295
 800557e:	f7fb faed 	bl	8000b5c <__aeabi_dcmpun>
 8005582:	bb88      	cbnz	r0, 80055e8 <_printf_float+0xd0>
 8005584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005588:	4b9a      	ldr	r3, [pc, #616]	; (80057f4 <_printf_float+0x2dc>)
 800558a:	f04f 32ff 	mov.w	r2, #4294967295
 800558e:	f7fb fac7 	bl	8000b20 <__aeabi_dcmple>
 8005592:	bb48      	cbnz	r0, 80055e8 <_printf_float+0xd0>
 8005594:	2200      	movs	r2, #0
 8005596:	2300      	movs	r3, #0
 8005598:	4640      	mov	r0, r8
 800559a:	4649      	mov	r1, r9
 800559c:	f7fb fab6 	bl	8000b0c <__aeabi_dcmplt>
 80055a0:	b110      	cbz	r0, 80055a8 <_printf_float+0x90>
 80055a2:	232d      	movs	r3, #45	; 0x2d
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a8:	4b93      	ldr	r3, [pc, #588]	; (80057f8 <_printf_float+0x2e0>)
 80055aa:	4894      	ldr	r0, [pc, #592]	; (80057fc <_printf_float+0x2e4>)
 80055ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055b0:	bf94      	ite	ls
 80055b2:	4698      	movls	r8, r3
 80055b4:	4680      	movhi	r8, r0
 80055b6:	2303      	movs	r3, #3
 80055b8:	6123      	str	r3, [r4, #16]
 80055ba:	9b05      	ldr	r3, [sp, #20]
 80055bc:	f023 0204 	bic.w	r2, r3, #4
 80055c0:	6022      	str	r2, [r4, #0]
 80055c2:	f04f 0900 	mov.w	r9, #0
 80055c6:	9700      	str	r7, [sp, #0]
 80055c8:	4633      	mov	r3, r6
 80055ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80055cc:	4621      	mov	r1, r4
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 f9d8 	bl	8005984 <_printf_common>
 80055d4:	3001      	adds	r0, #1
 80055d6:	f040 8090 	bne.w	80056fa <_printf_float+0x1e2>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	b00d      	add	sp, #52	; 0x34
 80055e0:	ecbd 8b02 	vpop	{d8}
 80055e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e8:	4642      	mov	r2, r8
 80055ea:	464b      	mov	r3, r9
 80055ec:	4640      	mov	r0, r8
 80055ee:	4649      	mov	r1, r9
 80055f0:	f7fb fab4 	bl	8000b5c <__aeabi_dcmpun>
 80055f4:	b140      	cbz	r0, 8005608 <_printf_float+0xf0>
 80055f6:	464b      	mov	r3, r9
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bfbc      	itt	lt
 80055fc:	232d      	movlt	r3, #45	; 0x2d
 80055fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005602:	487f      	ldr	r0, [pc, #508]	; (8005800 <_printf_float+0x2e8>)
 8005604:	4b7f      	ldr	r3, [pc, #508]	; (8005804 <_printf_float+0x2ec>)
 8005606:	e7d1      	b.n	80055ac <_printf_float+0x94>
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800560e:	9206      	str	r2, [sp, #24]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	d13f      	bne.n	8005694 <_printf_float+0x17c>
 8005614:	2306      	movs	r3, #6
 8005616:	6063      	str	r3, [r4, #4]
 8005618:	9b05      	ldr	r3, [sp, #20]
 800561a:	6861      	ldr	r1, [r4, #4]
 800561c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005620:	2300      	movs	r3, #0
 8005622:	9303      	str	r3, [sp, #12]
 8005624:	ab0a      	add	r3, sp, #40	; 0x28
 8005626:	e9cd b301 	strd	fp, r3, [sp, #4]
 800562a:	ab09      	add	r3, sp, #36	; 0x24
 800562c:	ec49 8b10 	vmov	d0, r8, r9
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	6022      	str	r2, [r4, #0]
 8005634:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005638:	4628      	mov	r0, r5
 800563a:	f7ff fecd 	bl	80053d8 <__cvt>
 800563e:	9b06      	ldr	r3, [sp, #24]
 8005640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005642:	2b47      	cmp	r3, #71	; 0x47
 8005644:	4680      	mov	r8, r0
 8005646:	d108      	bne.n	800565a <_printf_float+0x142>
 8005648:	1cc8      	adds	r0, r1, #3
 800564a:	db02      	blt.n	8005652 <_printf_float+0x13a>
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	4299      	cmp	r1, r3
 8005650:	dd41      	ble.n	80056d6 <_printf_float+0x1be>
 8005652:	f1ab 0b02 	sub.w	fp, fp, #2
 8005656:	fa5f fb8b 	uxtb.w	fp, fp
 800565a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800565e:	d820      	bhi.n	80056a2 <_printf_float+0x18a>
 8005660:	3901      	subs	r1, #1
 8005662:	465a      	mov	r2, fp
 8005664:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005668:	9109      	str	r1, [sp, #36]	; 0x24
 800566a:	f7ff ff17 	bl	800549c <__exponent>
 800566e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005670:	1813      	adds	r3, r2, r0
 8005672:	2a01      	cmp	r2, #1
 8005674:	4681      	mov	r9, r0
 8005676:	6123      	str	r3, [r4, #16]
 8005678:	dc02      	bgt.n	8005680 <_printf_float+0x168>
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	07d2      	lsls	r2, r2, #31
 800567e:	d501      	bpl.n	8005684 <_printf_float+0x16c>
 8005680:	3301      	adds	r3, #1
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005688:	2b00      	cmp	r3, #0
 800568a:	d09c      	beq.n	80055c6 <_printf_float+0xae>
 800568c:	232d      	movs	r3, #45	; 0x2d
 800568e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005692:	e798      	b.n	80055c6 <_printf_float+0xae>
 8005694:	9a06      	ldr	r2, [sp, #24]
 8005696:	2a47      	cmp	r2, #71	; 0x47
 8005698:	d1be      	bne.n	8005618 <_printf_float+0x100>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1bc      	bne.n	8005618 <_printf_float+0x100>
 800569e:	2301      	movs	r3, #1
 80056a0:	e7b9      	b.n	8005616 <_printf_float+0xfe>
 80056a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056a6:	d118      	bne.n	80056da <_printf_float+0x1c2>
 80056a8:	2900      	cmp	r1, #0
 80056aa:	6863      	ldr	r3, [r4, #4]
 80056ac:	dd0b      	ble.n	80056c6 <_printf_float+0x1ae>
 80056ae:	6121      	str	r1, [r4, #16]
 80056b0:	b913      	cbnz	r3, 80056b8 <_printf_float+0x1a0>
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	07d0      	lsls	r0, r2, #31
 80056b6:	d502      	bpl.n	80056be <_printf_float+0x1a6>
 80056b8:	3301      	adds	r3, #1
 80056ba:	440b      	add	r3, r1
 80056bc:	6123      	str	r3, [r4, #16]
 80056be:	65a1      	str	r1, [r4, #88]	; 0x58
 80056c0:	f04f 0900 	mov.w	r9, #0
 80056c4:	e7de      	b.n	8005684 <_printf_float+0x16c>
 80056c6:	b913      	cbnz	r3, 80056ce <_printf_float+0x1b6>
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	07d2      	lsls	r2, r2, #31
 80056cc:	d501      	bpl.n	80056d2 <_printf_float+0x1ba>
 80056ce:	3302      	adds	r3, #2
 80056d0:	e7f4      	b.n	80056bc <_printf_float+0x1a4>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e7f2      	b.n	80056bc <_printf_float+0x1a4>
 80056d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056dc:	4299      	cmp	r1, r3
 80056de:	db05      	blt.n	80056ec <_printf_float+0x1d4>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	6121      	str	r1, [r4, #16]
 80056e4:	07d8      	lsls	r0, r3, #31
 80056e6:	d5ea      	bpl.n	80056be <_printf_float+0x1a6>
 80056e8:	1c4b      	adds	r3, r1, #1
 80056ea:	e7e7      	b.n	80056bc <_printf_float+0x1a4>
 80056ec:	2900      	cmp	r1, #0
 80056ee:	bfd4      	ite	le
 80056f0:	f1c1 0202 	rsble	r2, r1, #2
 80056f4:	2201      	movgt	r2, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	e7e0      	b.n	80056bc <_printf_float+0x1a4>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	055a      	lsls	r2, r3, #21
 80056fe:	d407      	bmi.n	8005710 <_printf_float+0x1f8>
 8005700:	6923      	ldr	r3, [r4, #16]
 8005702:	4642      	mov	r2, r8
 8005704:	4631      	mov	r1, r6
 8005706:	4628      	mov	r0, r5
 8005708:	47b8      	blx	r7
 800570a:	3001      	adds	r0, #1
 800570c:	d12c      	bne.n	8005768 <_printf_float+0x250>
 800570e:	e764      	b.n	80055da <_printf_float+0xc2>
 8005710:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005714:	f240 80e0 	bls.w	80058d8 <_printf_float+0x3c0>
 8005718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800571c:	2200      	movs	r2, #0
 800571e:	2300      	movs	r3, #0
 8005720:	f7fb f9ea 	bl	8000af8 <__aeabi_dcmpeq>
 8005724:	2800      	cmp	r0, #0
 8005726:	d034      	beq.n	8005792 <_printf_float+0x27a>
 8005728:	4a37      	ldr	r2, [pc, #220]	; (8005808 <_printf_float+0x2f0>)
 800572a:	2301      	movs	r3, #1
 800572c:	4631      	mov	r1, r6
 800572e:	4628      	mov	r0, r5
 8005730:	47b8      	blx	r7
 8005732:	3001      	adds	r0, #1
 8005734:	f43f af51 	beq.w	80055da <_printf_float+0xc2>
 8005738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800573c:	429a      	cmp	r2, r3
 800573e:	db02      	blt.n	8005746 <_printf_float+0x22e>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	07d8      	lsls	r0, r3, #31
 8005744:	d510      	bpl.n	8005768 <_printf_float+0x250>
 8005746:	ee18 3a10 	vmov	r3, s16
 800574a:	4652      	mov	r2, sl
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f af41 	beq.w	80055da <_printf_float+0xc2>
 8005758:	f04f 0800 	mov.w	r8, #0
 800575c:	f104 091a 	add.w	r9, r4, #26
 8005760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005762:	3b01      	subs	r3, #1
 8005764:	4543      	cmp	r3, r8
 8005766:	dc09      	bgt.n	800577c <_printf_float+0x264>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	079b      	lsls	r3, r3, #30
 800576c:	f100 8105 	bmi.w	800597a <_printf_float+0x462>
 8005770:	68e0      	ldr	r0, [r4, #12]
 8005772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005774:	4298      	cmp	r0, r3
 8005776:	bfb8      	it	lt
 8005778:	4618      	movlt	r0, r3
 800577a:	e730      	b.n	80055de <_printf_float+0xc6>
 800577c:	2301      	movs	r3, #1
 800577e:	464a      	mov	r2, r9
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	f43f af27 	beq.w	80055da <_printf_float+0xc2>
 800578c:	f108 0801 	add.w	r8, r8, #1
 8005790:	e7e6      	b.n	8005760 <_printf_float+0x248>
 8005792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	dc39      	bgt.n	800580c <_printf_float+0x2f4>
 8005798:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <_printf_float+0x2f0>)
 800579a:	2301      	movs	r3, #1
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	f43f af19 	beq.w	80055da <_printf_float+0xc2>
 80057a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057ac:	4313      	orrs	r3, r2
 80057ae:	d102      	bne.n	80057b6 <_printf_float+0x29e>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	07d9      	lsls	r1, r3, #31
 80057b4:	d5d8      	bpl.n	8005768 <_printf_float+0x250>
 80057b6:	ee18 3a10 	vmov	r3, s16
 80057ba:	4652      	mov	r2, sl
 80057bc:	4631      	mov	r1, r6
 80057be:	4628      	mov	r0, r5
 80057c0:	47b8      	blx	r7
 80057c2:	3001      	adds	r0, #1
 80057c4:	f43f af09 	beq.w	80055da <_printf_float+0xc2>
 80057c8:	f04f 0900 	mov.w	r9, #0
 80057cc:	f104 0a1a 	add.w	sl, r4, #26
 80057d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d2:	425b      	negs	r3, r3
 80057d4:	454b      	cmp	r3, r9
 80057d6:	dc01      	bgt.n	80057dc <_printf_float+0x2c4>
 80057d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057da:	e792      	b.n	8005702 <_printf_float+0x1ea>
 80057dc:	2301      	movs	r3, #1
 80057de:	4652      	mov	r2, sl
 80057e0:	4631      	mov	r1, r6
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	f43f aef7 	beq.w	80055da <_printf_float+0xc2>
 80057ec:	f109 0901 	add.w	r9, r9, #1
 80057f0:	e7ee      	b.n	80057d0 <_printf_float+0x2b8>
 80057f2:	bf00      	nop
 80057f4:	7fefffff 	.word	0x7fefffff
 80057f8:	08009974 	.word	0x08009974
 80057fc:	08009978 	.word	0x08009978
 8005800:	08009980 	.word	0x08009980
 8005804:	0800997c 	.word	0x0800997c
 8005808:	08009984 	.word	0x08009984
 800580c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800580e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005810:	429a      	cmp	r2, r3
 8005812:	bfa8      	it	ge
 8005814:	461a      	movge	r2, r3
 8005816:	2a00      	cmp	r2, #0
 8005818:	4691      	mov	r9, r2
 800581a:	dc37      	bgt.n	800588c <_printf_float+0x374>
 800581c:	f04f 0b00 	mov.w	fp, #0
 8005820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005824:	f104 021a 	add.w	r2, r4, #26
 8005828:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800582a:	9305      	str	r3, [sp, #20]
 800582c:	eba3 0309 	sub.w	r3, r3, r9
 8005830:	455b      	cmp	r3, fp
 8005832:	dc33      	bgt.n	800589c <_printf_float+0x384>
 8005834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005838:	429a      	cmp	r2, r3
 800583a:	db3b      	blt.n	80058b4 <_printf_float+0x39c>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	07da      	lsls	r2, r3, #31
 8005840:	d438      	bmi.n	80058b4 <_printf_float+0x39c>
 8005842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005844:	9b05      	ldr	r3, [sp, #20]
 8005846:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	eba2 0901 	sub.w	r9, r2, r1
 800584e:	4599      	cmp	r9, r3
 8005850:	bfa8      	it	ge
 8005852:	4699      	movge	r9, r3
 8005854:	f1b9 0f00 	cmp.w	r9, #0
 8005858:	dc35      	bgt.n	80058c6 <_printf_float+0x3ae>
 800585a:	f04f 0800 	mov.w	r8, #0
 800585e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005862:	f104 0a1a 	add.w	sl, r4, #26
 8005866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	eba3 0309 	sub.w	r3, r3, r9
 8005870:	4543      	cmp	r3, r8
 8005872:	f77f af79 	ble.w	8005768 <_printf_float+0x250>
 8005876:	2301      	movs	r3, #1
 8005878:	4652      	mov	r2, sl
 800587a:	4631      	mov	r1, r6
 800587c:	4628      	mov	r0, r5
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	f43f aeaa 	beq.w	80055da <_printf_float+0xc2>
 8005886:	f108 0801 	add.w	r8, r8, #1
 800588a:	e7ec      	b.n	8005866 <_printf_float+0x34e>
 800588c:	4613      	mov	r3, r2
 800588e:	4631      	mov	r1, r6
 8005890:	4642      	mov	r2, r8
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	d1c0      	bne.n	800581c <_printf_float+0x304>
 800589a:	e69e      	b.n	80055da <_printf_float+0xc2>
 800589c:	2301      	movs	r3, #1
 800589e:	4631      	mov	r1, r6
 80058a0:	4628      	mov	r0, r5
 80058a2:	9205      	str	r2, [sp, #20]
 80058a4:	47b8      	blx	r7
 80058a6:	3001      	adds	r0, #1
 80058a8:	f43f ae97 	beq.w	80055da <_printf_float+0xc2>
 80058ac:	9a05      	ldr	r2, [sp, #20]
 80058ae:	f10b 0b01 	add.w	fp, fp, #1
 80058b2:	e7b9      	b.n	8005828 <_printf_float+0x310>
 80058b4:	ee18 3a10 	vmov	r3, s16
 80058b8:	4652      	mov	r2, sl
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	d1be      	bne.n	8005842 <_printf_float+0x32a>
 80058c4:	e689      	b.n	80055da <_printf_float+0xc2>
 80058c6:	9a05      	ldr	r2, [sp, #20]
 80058c8:	464b      	mov	r3, r9
 80058ca:	4442      	add	r2, r8
 80058cc:	4631      	mov	r1, r6
 80058ce:	4628      	mov	r0, r5
 80058d0:	47b8      	blx	r7
 80058d2:	3001      	adds	r0, #1
 80058d4:	d1c1      	bne.n	800585a <_printf_float+0x342>
 80058d6:	e680      	b.n	80055da <_printf_float+0xc2>
 80058d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058da:	2a01      	cmp	r2, #1
 80058dc:	dc01      	bgt.n	80058e2 <_printf_float+0x3ca>
 80058de:	07db      	lsls	r3, r3, #31
 80058e0:	d538      	bpl.n	8005954 <_printf_float+0x43c>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4642      	mov	r2, r8
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f ae74 	beq.w	80055da <_printf_float+0xc2>
 80058f2:	ee18 3a10 	vmov	r3, s16
 80058f6:	4652      	mov	r2, sl
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f ae6b 	beq.w	80055da <_printf_float+0xc2>
 8005904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005908:	2200      	movs	r2, #0
 800590a:	2300      	movs	r3, #0
 800590c:	f7fb f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 8005910:	b9d8      	cbnz	r0, 800594a <_printf_float+0x432>
 8005912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005914:	f108 0201 	add.w	r2, r8, #1
 8005918:	3b01      	subs	r3, #1
 800591a:	4631      	mov	r1, r6
 800591c:	4628      	mov	r0, r5
 800591e:	47b8      	blx	r7
 8005920:	3001      	adds	r0, #1
 8005922:	d10e      	bne.n	8005942 <_printf_float+0x42a>
 8005924:	e659      	b.n	80055da <_printf_float+0xc2>
 8005926:	2301      	movs	r3, #1
 8005928:	4652      	mov	r2, sl
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	47b8      	blx	r7
 8005930:	3001      	adds	r0, #1
 8005932:	f43f ae52 	beq.w	80055da <_printf_float+0xc2>
 8005936:	f108 0801 	add.w	r8, r8, #1
 800593a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800593c:	3b01      	subs	r3, #1
 800593e:	4543      	cmp	r3, r8
 8005940:	dcf1      	bgt.n	8005926 <_printf_float+0x40e>
 8005942:	464b      	mov	r3, r9
 8005944:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005948:	e6dc      	b.n	8005704 <_printf_float+0x1ec>
 800594a:	f04f 0800 	mov.w	r8, #0
 800594e:	f104 0a1a 	add.w	sl, r4, #26
 8005952:	e7f2      	b.n	800593a <_printf_float+0x422>
 8005954:	2301      	movs	r3, #1
 8005956:	4642      	mov	r2, r8
 8005958:	e7df      	b.n	800591a <_printf_float+0x402>
 800595a:	2301      	movs	r3, #1
 800595c:	464a      	mov	r2, r9
 800595e:	4631      	mov	r1, r6
 8005960:	4628      	mov	r0, r5
 8005962:	47b8      	blx	r7
 8005964:	3001      	adds	r0, #1
 8005966:	f43f ae38 	beq.w	80055da <_printf_float+0xc2>
 800596a:	f108 0801 	add.w	r8, r8, #1
 800596e:	68e3      	ldr	r3, [r4, #12]
 8005970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005972:	1a5b      	subs	r3, r3, r1
 8005974:	4543      	cmp	r3, r8
 8005976:	dcf0      	bgt.n	800595a <_printf_float+0x442>
 8005978:	e6fa      	b.n	8005770 <_printf_float+0x258>
 800597a:	f04f 0800 	mov.w	r8, #0
 800597e:	f104 0919 	add.w	r9, r4, #25
 8005982:	e7f4      	b.n	800596e <_printf_float+0x456>

08005984 <_printf_common>:
 8005984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	4616      	mov	r6, r2
 800598a:	4699      	mov	r9, r3
 800598c:	688a      	ldr	r2, [r1, #8]
 800598e:	690b      	ldr	r3, [r1, #16]
 8005990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005994:	4293      	cmp	r3, r2
 8005996:	bfb8      	it	lt
 8005998:	4613      	movlt	r3, r2
 800599a:	6033      	str	r3, [r6, #0]
 800599c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059a0:	4607      	mov	r7, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	b10a      	cbz	r2, 80059aa <_printf_common+0x26>
 80059a6:	3301      	adds	r3, #1
 80059a8:	6033      	str	r3, [r6, #0]
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	0699      	lsls	r1, r3, #26
 80059ae:	bf42      	ittt	mi
 80059b0:	6833      	ldrmi	r3, [r6, #0]
 80059b2:	3302      	addmi	r3, #2
 80059b4:	6033      	strmi	r3, [r6, #0]
 80059b6:	6825      	ldr	r5, [r4, #0]
 80059b8:	f015 0506 	ands.w	r5, r5, #6
 80059bc:	d106      	bne.n	80059cc <_printf_common+0x48>
 80059be:	f104 0a19 	add.w	sl, r4, #25
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	6832      	ldr	r2, [r6, #0]
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	42ab      	cmp	r3, r5
 80059ca:	dc26      	bgt.n	8005a1a <_printf_common+0x96>
 80059cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059d0:	1e13      	subs	r3, r2, #0
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	bf18      	it	ne
 80059d6:	2301      	movne	r3, #1
 80059d8:	0692      	lsls	r2, r2, #26
 80059da:	d42b      	bmi.n	8005a34 <_printf_common+0xb0>
 80059dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059e0:	4649      	mov	r1, r9
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c0      	blx	r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d01e      	beq.n	8005a28 <_printf_common+0xa4>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	68e5      	ldr	r5, [r4, #12]
 80059ee:	6832      	ldr	r2, [r6, #0]
 80059f0:	f003 0306 	and.w	r3, r3, #6
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	bf08      	it	eq
 80059f8:	1aad      	subeq	r5, r5, r2
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	6922      	ldr	r2, [r4, #16]
 80059fe:	bf0c      	ite	eq
 8005a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a04:	2500      	movne	r5, #0
 8005a06:	4293      	cmp	r3, r2
 8005a08:	bfc4      	itt	gt
 8005a0a:	1a9b      	subgt	r3, r3, r2
 8005a0c:	18ed      	addgt	r5, r5, r3
 8005a0e:	2600      	movs	r6, #0
 8005a10:	341a      	adds	r4, #26
 8005a12:	42b5      	cmp	r5, r6
 8005a14:	d11a      	bne.n	8005a4c <_printf_common+0xc8>
 8005a16:	2000      	movs	r0, #0
 8005a18:	e008      	b.n	8005a2c <_printf_common+0xa8>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4652      	mov	r2, sl
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4638      	mov	r0, r7
 8005a22:	47c0      	blx	r8
 8005a24:	3001      	adds	r0, #1
 8005a26:	d103      	bne.n	8005a30 <_printf_common+0xac>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a30:	3501      	adds	r5, #1
 8005a32:	e7c6      	b.n	80059c2 <_printf_common+0x3e>
 8005a34:	18e1      	adds	r1, r4, r3
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	2030      	movs	r0, #48	; 0x30
 8005a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a3e:	4422      	add	r2, r4
 8005a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a48:	3302      	adds	r3, #2
 8005a4a:	e7c7      	b.n	80059dc <_printf_common+0x58>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4622      	mov	r2, r4
 8005a50:	4649      	mov	r1, r9
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	3001      	adds	r0, #1
 8005a58:	d0e6      	beq.n	8005a28 <_printf_common+0xa4>
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	e7d9      	b.n	8005a12 <_printf_common+0x8e>
	...

08005a60 <_printf_i>:
 8005a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a64:	460c      	mov	r4, r1
 8005a66:	4691      	mov	r9, r2
 8005a68:	7e27      	ldrb	r7, [r4, #24]
 8005a6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a6c:	2f78      	cmp	r7, #120	; 0x78
 8005a6e:	4680      	mov	r8, r0
 8005a70:	469a      	mov	sl, r3
 8005a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a76:	d807      	bhi.n	8005a88 <_printf_i+0x28>
 8005a78:	2f62      	cmp	r7, #98	; 0x62
 8005a7a:	d80a      	bhi.n	8005a92 <_printf_i+0x32>
 8005a7c:	2f00      	cmp	r7, #0
 8005a7e:	f000 80d8 	beq.w	8005c32 <_printf_i+0x1d2>
 8005a82:	2f58      	cmp	r7, #88	; 0x58
 8005a84:	f000 80a3 	beq.w	8005bce <_printf_i+0x16e>
 8005a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a90:	e03a      	b.n	8005b08 <_printf_i+0xa8>
 8005a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a96:	2b15      	cmp	r3, #21
 8005a98:	d8f6      	bhi.n	8005a88 <_printf_i+0x28>
 8005a9a:	a001      	add	r0, pc, #4	; (adr r0, 8005aa0 <_printf_i+0x40>)
 8005a9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005aa0:	08005af9 	.word	0x08005af9
 8005aa4:	08005b0d 	.word	0x08005b0d
 8005aa8:	08005a89 	.word	0x08005a89
 8005aac:	08005a89 	.word	0x08005a89
 8005ab0:	08005a89 	.word	0x08005a89
 8005ab4:	08005a89 	.word	0x08005a89
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005a89 	.word	0x08005a89
 8005ac0:	08005a89 	.word	0x08005a89
 8005ac4:	08005a89 	.word	0x08005a89
 8005ac8:	08005a89 	.word	0x08005a89
 8005acc:	08005c19 	.word	0x08005c19
 8005ad0:	08005b3d 	.word	0x08005b3d
 8005ad4:	08005bfb 	.word	0x08005bfb
 8005ad8:	08005a89 	.word	0x08005a89
 8005adc:	08005a89 	.word	0x08005a89
 8005ae0:	08005c3b 	.word	0x08005c3b
 8005ae4:	08005a89 	.word	0x08005a89
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005a89 	.word	0x08005a89
 8005af0:	08005a89 	.word	0x08005a89
 8005af4:	08005c03 	.word	0x08005c03
 8005af8:	680b      	ldr	r3, [r1, #0]
 8005afa:	1d1a      	adds	r2, r3, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	600a      	str	r2, [r1, #0]
 8005b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0a3      	b.n	8005c54 <_printf_i+0x1f4>
 8005b0c:	6825      	ldr	r5, [r4, #0]
 8005b0e:	6808      	ldr	r0, [r1, #0]
 8005b10:	062e      	lsls	r6, r5, #24
 8005b12:	f100 0304 	add.w	r3, r0, #4
 8005b16:	d50a      	bpl.n	8005b2e <_printf_i+0xce>
 8005b18:	6805      	ldr	r5, [r0, #0]
 8005b1a:	600b      	str	r3, [r1, #0]
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	da03      	bge.n	8005b28 <_printf_i+0xc8>
 8005b20:	232d      	movs	r3, #45	; 0x2d
 8005b22:	426d      	negs	r5, r5
 8005b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b28:	485e      	ldr	r0, [pc, #376]	; (8005ca4 <_printf_i+0x244>)
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	e019      	b.n	8005b62 <_printf_i+0x102>
 8005b2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b32:	6805      	ldr	r5, [r0, #0]
 8005b34:	600b      	str	r3, [r1, #0]
 8005b36:	bf18      	it	ne
 8005b38:	b22d      	sxthne	r5, r5
 8005b3a:	e7ef      	b.n	8005b1c <_printf_i+0xbc>
 8005b3c:	680b      	ldr	r3, [r1, #0]
 8005b3e:	6825      	ldr	r5, [r4, #0]
 8005b40:	1d18      	adds	r0, r3, #4
 8005b42:	6008      	str	r0, [r1, #0]
 8005b44:	0628      	lsls	r0, r5, #24
 8005b46:	d501      	bpl.n	8005b4c <_printf_i+0xec>
 8005b48:	681d      	ldr	r5, [r3, #0]
 8005b4a:	e002      	b.n	8005b52 <_printf_i+0xf2>
 8005b4c:	0669      	lsls	r1, r5, #25
 8005b4e:	d5fb      	bpl.n	8005b48 <_printf_i+0xe8>
 8005b50:	881d      	ldrh	r5, [r3, #0]
 8005b52:	4854      	ldr	r0, [pc, #336]	; (8005ca4 <_printf_i+0x244>)
 8005b54:	2f6f      	cmp	r7, #111	; 0x6f
 8005b56:	bf0c      	ite	eq
 8005b58:	2308      	moveq	r3, #8
 8005b5a:	230a      	movne	r3, #10
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b62:	6866      	ldr	r6, [r4, #4]
 8005b64:	60a6      	str	r6, [r4, #8]
 8005b66:	2e00      	cmp	r6, #0
 8005b68:	bfa2      	ittt	ge
 8005b6a:	6821      	ldrge	r1, [r4, #0]
 8005b6c:	f021 0104 	bicge.w	r1, r1, #4
 8005b70:	6021      	strge	r1, [r4, #0]
 8005b72:	b90d      	cbnz	r5, 8005b78 <_printf_i+0x118>
 8005b74:	2e00      	cmp	r6, #0
 8005b76:	d04d      	beq.n	8005c14 <_printf_i+0x1b4>
 8005b78:	4616      	mov	r6, r2
 8005b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b82:	5dc7      	ldrb	r7, [r0, r7]
 8005b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b88:	462f      	mov	r7, r5
 8005b8a:	42bb      	cmp	r3, r7
 8005b8c:	460d      	mov	r5, r1
 8005b8e:	d9f4      	bls.n	8005b7a <_printf_i+0x11a>
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d10b      	bne.n	8005bac <_printf_i+0x14c>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	07df      	lsls	r7, r3, #31
 8005b98:	d508      	bpl.n	8005bac <_printf_i+0x14c>
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	6861      	ldr	r1, [r4, #4]
 8005b9e:	4299      	cmp	r1, r3
 8005ba0:	bfde      	ittt	le
 8005ba2:	2330      	movle	r3, #48	; 0x30
 8005ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bac:	1b92      	subs	r2, r2, r6
 8005bae:	6122      	str	r2, [r4, #16]
 8005bb0:	f8cd a000 	str.w	sl, [sp]
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	aa03      	add	r2, sp, #12
 8005bb8:	4621      	mov	r1, r4
 8005bba:	4640      	mov	r0, r8
 8005bbc:	f7ff fee2 	bl	8005984 <_printf_common>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d14c      	bne.n	8005c5e <_printf_i+0x1fe>
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	b004      	add	sp, #16
 8005bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bce:	4835      	ldr	r0, [pc, #212]	; (8005ca4 <_printf_i+0x244>)
 8005bd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	680e      	ldr	r6, [r1, #0]
 8005bd8:	061f      	lsls	r7, r3, #24
 8005bda:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bde:	600e      	str	r6, [r1, #0]
 8005be0:	d514      	bpl.n	8005c0c <_printf_i+0x1ac>
 8005be2:	07d9      	lsls	r1, r3, #31
 8005be4:	bf44      	itt	mi
 8005be6:	f043 0320 	orrmi.w	r3, r3, #32
 8005bea:	6023      	strmi	r3, [r4, #0]
 8005bec:	b91d      	cbnz	r5, 8005bf6 <_printf_i+0x196>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	f023 0320 	bic.w	r3, r3, #32
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	2310      	movs	r3, #16
 8005bf8:	e7b0      	b.n	8005b5c <_printf_i+0xfc>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f043 0320 	orr.w	r3, r3, #32
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	2378      	movs	r3, #120	; 0x78
 8005c04:	4828      	ldr	r0, [pc, #160]	; (8005ca8 <_printf_i+0x248>)
 8005c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c0a:	e7e3      	b.n	8005bd4 <_printf_i+0x174>
 8005c0c:	065e      	lsls	r6, r3, #25
 8005c0e:	bf48      	it	mi
 8005c10:	b2ad      	uxthmi	r5, r5
 8005c12:	e7e6      	b.n	8005be2 <_printf_i+0x182>
 8005c14:	4616      	mov	r6, r2
 8005c16:	e7bb      	b.n	8005b90 <_printf_i+0x130>
 8005c18:	680b      	ldr	r3, [r1, #0]
 8005c1a:	6826      	ldr	r6, [r4, #0]
 8005c1c:	6960      	ldr	r0, [r4, #20]
 8005c1e:	1d1d      	adds	r5, r3, #4
 8005c20:	600d      	str	r5, [r1, #0]
 8005c22:	0635      	lsls	r5, r6, #24
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0x1cc>
 8005c28:	6018      	str	r0, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <_printf_i+0x1d2>
 8005c2c:	0671      	lsls	r1, r6, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0x1c8>
 8005c30:	8018      	strh	r0, [r3, #0]
 8005c32:	2300      	movs	r3, #0
 8005c34:	6123      	str	r3, [r4, #16]
 8005c36:	4616      	mov	r6, r2
 8005c38:	e7ba      	b.n	8005bb0 <_printf_i+0x150>
 8005c3a:	680b      	ldr	r3, [r1, #0]
 8005c3c:	1d1a      	adds	r2, r3, #4
 8005c3e:	600a      	str	r2, [r1, #0]
 8005c40:	681e      	ldr	r6, [r3, #0]
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	2100      	movs	r1, #0
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7fa fae2 	bl	8000210 <memchr>
 8005c4c:	b108      	cbz	r0, 8005c52 <_printf_i+0x1f2>
 8005c4e:	1b80      	subs	r0, r0, r6
 8005c50:	6060      	str	r0, [r4, #4]
 8005c52:	6863      	ldr	r3, [r4, #4]
 8005c54:	6123      	str	r3, [r4, #16]
 8005c56:	2300      	movs	r3, #0
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5c:	e7a8      	b.n	8005bb0 <_printf_i+0x150>
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	4632      	mov	r2, r6
 8005c62:	4649      	mov	r1, r9
 8005c64:	4640      	mov	r0, r8
 8005c66:	47d0      	blx	sl
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d0ab      	beq.n	8005bc4 <_printf_i+0x164>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	079b      	lsls	r3, r3, #30
 8005c70:	d413      	bmi.n	8005c9a <_printf_i+0x23a>
 8005c72:	68e0      	ldr	r0, [r4, #12]
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	4298      	cmp	r0, r3
 8005c78:	bfb8      	it	lt
 8005c7a:	4618      	movlt	r0, r3
 8005c7c:	e7a4      	b.n	8005bc8 <_printf_i+0x168>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4632      	mov	r2, r6
 8005c82:	4649      	mov	r1, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	47d0      	blx	sl
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d09b      	beq.n	8005bc4 <_printf_i+0x164>
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	68e3      	ldr	r3, [r4, #12]
 8005c90:	9903      	ldr	r1, [sp, #12]
 8005c92:	1a5b      	subs	r3, r3, r1
 8005c94:	42ab      	cmp	r3, r5
 8005c96:	dcf2      	bgt.n	8005c7e <_printf_i+0x21e>
 8005c98:	e7eb      	b.n	8005c72 <_printf_i+0x212>
 8005c9a:	2500      	movs	r5, #0
 8005c9c:	f104 0619 	add.w	r6, r4, #25
 8005ca0:	e7f5      	b.n	8005c8e <_printf_i+0x22e>
 8005ca2:	bf00      	nop
 8005ca4:	08009986 	.word	0x08009986
 8005ca8:	08009997 	.word	0x08009997

08005cac <siprintf>:
 8005cac:	b40e      	push	{r1, r2, r3}
 8005cae:	b500      	push	{lr}
 8005cb0:	b09c      	sub	sp, #112	; 0x70
 8005cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8005cb4:	9002      	str	r0, [sp, #8]
 8005cb6:	9006      	str	r0, [sp, #24]
 8005cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cbc:	4809      	ldr	r0, [pc, #36]	; (8005ce4 <siprintf+0x38>)
 8005cbe:	9107      	str	r1, [sp, #28]
 8005cc0:	9104      	str	r1, [sp, #16]
 8005cc2:	4909      	ldr	r1, [pc, #36]	; (8005ce8 <siprintf+0x3c>)
 8005cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc8:	9105      	str	r1, [sp, #20]
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	a902      	add	r1, sp, #8
 8005cd0:	f002 feca 	bl	8008a68 <_svfiprintf_r>
 8005cd4:	9b02      	ldr	r3, [sp, #8]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	b01c      	add	sp, #112	; 0x70
 8005cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce0:	b003      	add	sp, #12
 8005ce2:	4770      	bx	lr
 8005ce4:	20000010 	.word	0x20000010
 8005ce8:	ffff0208 	.word	0xffff0208

08005cec <strpbrk>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	7803      	ldrb	r3, [r0, #0]
 8005cf0:	b1a3      	cbz	r3, 8005d1c <strpbrk+0x30>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005cfc:	b14d      	cbz	r5, 8005d12 <strpbrk+0x26>
 8005cfe:	460a      	mov	r2, r1
 8005d00:	e001      	b.n	8005d06 <strpbrk+0x1a>
 8005d02:	42ae      	cmp	r6, r5
 8005d04:	d009      	beq.n	8005d1a <strpbrk+0x2e>
 8005d06:	4614      	mov	r4, r2
 8005d08:	f812 6b01 	ldrb.w	r6, [r2], #1
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	d1f8      	bne.n	8005d02 <strpbrk+0x16>
 8005d10:	e7f1      	b.n	8005cf6 <strpbrk+0xa>
 8005d12:	7823      	ldrb	r3, [r4, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bf08      	it	eq
 8005d18:	2000      	moveq	r0, #0
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	e7fc      	b.n	8005d1a <strpbrk+0x2e>

08005d20 <sulp>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4604      	mov	r4, r0
 8005d24:	460d      	mov	r5, r1
 8005d26:	ec45 4b10 	vmov	d0, r4, r5
 8005d2a:	4616      	mov	r6, r2
 8005d2c:	f002 fc38 	bl	80085a0 <__ulp>
 8005d30:	ec51 0b10 	vmov	r0, r1, d0
 8005d34:	b17e      	cbz	r6, 8005d56 <sulp+0x36>
 8005d36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dd09      	ble.n	8005d56 <sulp+0x36>
 8005d42:	051b      	lsls	r3, r3, #20
 8005d44:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005d48:	2400      	movs	r4, #0
 8005d4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005d4e:	4622      	mov	r2, r4
 8005d50:	462b      	mov	r3, r5
 8005d52:	f7fa fc69 	bl	8000628 <__aeabi_dmul>
 8005d56:	bd70      	pop	{r4, r5, r6, pc}

08005d58 <_strtod_l>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	b0a3      	sub	sp, #140	; 0x8c
 8005d5e:	461f      	mov	r7, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	931e      	str	r3, [sp, #120]	; 0x78
 8005d64:	4ba4      	ldr	r3, [pc, #656]	; (8005ff8 <_strtod_l+0x2a0>)
 8005d66:	9219      	str	r2, [sp, #100]	; 0x64
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	9307      	str	r3, [sp, #28]
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	4688      	mov	r8, r1
 8005d72:	f7fa fa3f 	bl	80001f4 <strlen>
 8005d76:	f04f 0a00 	mov.w	sl, #0
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	f04f 0b00 	mov.w	fp, #0
 8005d80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	2a2b      	cmp	r2, #43	; 0x2b
 8005d8a:	d04c      	beq.n	8005e26 <_strtod_l+0xce>
 8005d8c:	d839      	bhi.n	8005e02 <_strtod_l+0xaa>
 8005d8e:	2a0d      	cmp	r2, #13
 8005d90:	d832      	bhi.n	8005df8 <_strtod_l+0xa0>
 8005d92:	2a08      	cmp	r2, #8
 8005d94:	d832      	bhi.n	8005dfc <_strtod_l+0xa4>
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	d03c      	beq.n	8005e14 <_strtod_l+0xbc>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8005d9e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005da0:	7833      	ldrb	r3, [r6, #0]
 8005da2:	2b30      	cmp	r3, #48	; 0x30
 8005da4:	f040 80b4 	bne.w	8005f10 <_strtod_l+0x1b8>
 8005da8:	7873      	ldrb	r3, [r6, #1]
 8005daa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005dae:	2b58      	cmp	r3, #88	; 0x58
 8005db0:	d16c      	bne.n	8005e8c <_strtod_l+0x134>
 8005db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	ab1e      	add	r3, sp, #120	; 0x78
 8005db8:	9702      	str	r7, [sp, #8]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	4a8f      	ldr	r2, [pc, #572]	; (8005ffc <_strtod_l+0x2a4>)
 8005dbe:	ab1f      	add	r3, sp, #124	; 0x7c
 8005dc0:	a91d      	add	r1, sp, #116	; 0x74
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f001 fd4c 	bl	8007860 <__gethex>
 8005dc8:	f010 0707 	ands.w	r7, r0, #7
 8005dcc:	4605      	mov	r5, r0
 8005dce:	d005      	beq.n	8005ddc <_strtod_l+0x84>
 8005dd0:	2f06      	cmp	r7, #6
 8005dd2:	d12a      	bne.n	8005e2a <_strtod_l+0xd2>
 8005dd4:	3601      	adds	r6, #1
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	961d      	str	r6, [sp, #116]	; 0x74
 8005dda:	930e      	str	r3, [sp, #56]	; 0x38
 8005ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 8596 	bne.w	8006910 <_strtod_l+0xbb8>
 8005de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005de6:	b1db      	cbz	r3, 8005e20 <_strtod_l+0xc8>
 8005de8:	4652      	mov	r2, sl
 8005dea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005dee:	ec43 2b10 	vmov	d0, r2, r3
 8005df2:	b023      	add	sp, #140	; 0x8c
 8005df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df8:	2a20      	cmp	r2, #32
 8005dfa:	d1ce      	bne.n	8005d9a <_strtod_l+0x42>
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	931d      	str	r3, [sp, #116]	; 0x74
 8005e00:	e7c0      	b.n	8005d84 <_strtod_l+0x2c>
 8005e02:	2a2d      	cmp	r2, #45	; 0x2d
 8005e04:	d1c9      	bne.n	8005d9a <_strtod_l+0x42>
 8005e06:	2201      	movs	r2, #1
 8005e08:	920e      	str	r2, [sp, #56]	; 0x38
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	921d      	str	r2, [sp, #116]	; 0x74
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1c4      	bne.n	8005d9e <_strtod_l+0x46>
 8005e14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e16:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 8576 	bne.w	800690c <_strtod_l+0xbb4>
 8005e20:	4652      	mov	r2, sl
 8005e22:	465b      	mov	r3, fp
 8005e24:	e7e3      	b.n	8005dee <_strtod_l+0x96>
 8005e26:	2200      	movs	r2, #0
 8005e28:	e7ee      	b.n	8005e08 <_strtod_l+0xb0>
 8005e2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e2c:	b13a      	cbz	r2, 8005e3e <_strtod_l+0xe6>
 8005e2e:	2135      	movs	r1, #53	; 0x35
 8005e30:	a820      	add	r0, sp, #128	; 0x80
 8005e32:	f002 fcc0 	bl	80087b6 <__copybits>
 8005e36:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f002 f885 	bl	8007f48 <_Bfree>
 8005e3e:	3f01      	subs	r7, #1
 8005e40:	2f05      	cmp	r7, #5
 8005e42:	d807      	bhi.n	8005e54 <_strtod_l+0xfc>
 8005e44:	e8df f007 	tbb	[pc, r7]
 8005e48:	1d180b0e 	.word	0x1d180b0e
 8005e4c:	030e      	.short	0x030e
 8005e4e:	f04f 0b00 	mov.w	fp, #0
 8005e52:	46da      	mov	sl, fp
 8005e54:	0728      	lsls	r0, r5, #28
 8005e56:	d5c1      	bpl.n	8005ddc <_strtod_l+0x84>
 8005e58:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005e5c:	e7be      	b.n	8005ddc <_strtod_l+0x84>
 8005e5e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005e62:	e7f7      	b.n	8005e54 <_strtod_l+0xfc>
 8005e64:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005e68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005e6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e76:	e7ed      	b.n	8005e54 <_strtod_l+0xfc>
 8005e78:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006000 <_strtod_l+0x2a8>
 8005e7c:	f04f 0a00 	mov.w	sl, #0
 8005e80:	e7e8      	b.n	8005e54 <_strtod_l+0xfc>
 8005e82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005e86:	f04f 3aff 	mov.w	sl, #4294967295
 8005e8a:	e7e3      	b.n	8005e54 <_strtod_l+0xfc>
 8005e8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	921d      	str	r2, [sp, #116]	; 0x74
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b30      	cmp	r3, #48	; 0x30
 8005e96:	d0f9      	beq.n	8005e8c <_strtod_l+0x134>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d09f      	beq.n	8005ddc <_strtod_l+0x84>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f04f 0900 	mov.w	r9, #0
 8005ea2:	9304      	str	r3, [sp, #16]
 8005ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ea8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005eac:	464f      	mov	r7, r9
 8005eae:	220a      	movs	r2, #10
 8005eb0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005eb2:	7806      	ldrb	r6, [r0, #0]
 8005eb4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005eb8:	b2d9      	uxtb	r1, r3
 8005eba:	2909      	cmp	r1, #9
 8005ebc:	d92a      	bls.n	8005f14 <_strtod_l+0x1bc>
 8005ebe:	9907      	ldr	r1, [sp, #28]
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	f002 fee9 	bl	8008c98 <strncmp>
 8005ec6:	b398      	cbz	r0, 8005f30 <_strtod_l+0x1d8>
 8005ec8:	2000      	movs	r0, #0
 8005eca:	4633      	mov	r3, r6
 8005ecc:	463d      	mov	r5, r7
 8005ece:	9007      	str	r0, [sp, #28]
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	2b65      	cmp	r3, #101	; 0x65
 8005ed4:	d001      	beq.n	8005eda <_strtod_l+0x182>
 8005ed6:	2b45      	cmp	r3, #69	; 0x45
 8005ed8:	d118      	bne.n	8005f0c <_strtod_l+0x1b4>
 8005eda:	b91d      	cbnz	r5, 8005ee4 <_strtod_l+0x18c>
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	4303      	orrs	r3, r0
 8005ee0:	d098      	beq.n	8005e14 <_strtod_l+0xbc>
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005ee8:	f108 0301 	add.w	r3, r8, #1
 8005eec:	931d      	str	r3, [sp, #116]	; 0x74
 8005eee:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005ef2:	2b2b      	cmp	r3, #43	; 0x2b
 8005ef4:	d075      	beq.n	8005fe2 <_strtod_l+0x28a>
 8005ef6:	2b2d      	cmp	r3, #45	; 0x2d
 8005ef8:	d07b      	beq.n	8005ff2 <_strtod_l+0x29a>
 8005efa:	f04f 0c00 	mov.w	ip, #0
 8005efe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005f02:	2909      	cmp	r1, #9
 8005f04:	f240 8082 	bls.w	800600c <_strtod_l+0x2b4>
 8005f08:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005f0c:	2600      	movs	r6, #0
 8005f0e:	e09d      	b.n	800604c <_strtod_l+0x2f4>
 8005f10:	2300      	movs	r3, #0
 8005f12:	e7c4      	b.n	8005e9e <_strtod_l+0x146>
 8005f14:	2f08      	cmp	r7, #8
 8005f16:	bfd8      	it	le
 8005f18:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005f1a:	f100 0001 	add.w	r0, r0, #1
 8005f1e:	bfda      	itte	le
 8005f20:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f24:	9309      	strle	r3, [sp, #36]	; 0x24
 8005f26:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005f2a:	3701      	adds	r7, #1
 8005f2c:	901d      	str	r0, [sp, #116]	; 0x74
 8005f2e:	e7bf      	b.n	8005eb0 <_strtod_l+0x158>
 8005f30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f32:	195a      	adds	r2, r3, r5
 8005f34:	921d      	str	r2, [sp, #116]	; 0x74
 8005f36:	5d5b      	ldrb	r3, [r3, r5]
 8005f38:	2f00      	cmp	r7, #0
 8005f3a:	d037      	beq.n	8005fac <_strtod_l+0x254>
 8005f3c:	9007      	str	r0, [sp, #28]
 8005f3e:	463d      	mov	r5, r7
 8005f40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005f44:	2a09      	cmp	r2, #9
 8005f46:	d912      	bls.n	8005f6e <_strtod_l+0x216>
 8005f48:	2201      	movs	r2, #1
 8005f4a:	e7c2      	b.n	8005ed2 <_strtod_l+0x17a>
 8005f4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	921d      	str	r2, [sp, #116]	; 0x74
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	3001      	adds	r0, #1
 8005f56:	2b30      	cmp	r3, #48	; 0x30
 8005f58:	d0f8      	beq.n	8005f4c <_strtod_l+0x1f4>
 8005f5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005f5e:	2a08      	cmp	r2, #8
 8005f60:	f200 84db 	bhi.w	800691a <_strtod_l+0xbc2>
 8005f64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005f66:	9007      	str	r0, [sp, #28]
 8005f68:	2000      	movs	r0, #0
 8005f6a:	920a      	str	r2, [sp, #40]	; 0x28
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	3b30      	subs	r3, #48	; 0x30
 8005f70:	f100 0201 	add.w	r2, r0, #1
 8005f74:	d014      	beq.n	8005fa0 <_strtod_l+0x248>
 8005f76:	9907      	ldr	r1, [sp, #28]
 8005f78:	4411      	add	r1, r2
 8005f7a:	9107      	str	r1, [sp, #28]
 8005f7c:	462a      	mov	r2, r5
 8005f7e:	eb00 0e05 	add.w	lr, r0, r5
 8005f82:	210a      	movs	r1, #10
 8005f84:	4572      	cmp	r2, lr
 8005f86:	d113      	bne.n	8005fb0 <_strtod_l+0x258>
 8005f88:	182a      	adds	r2, r5, r0
 8005f8a:	2a08      	cmp	r2, #8
 8005f8c:	f105 0501 	add.w	r5, r5, #1
 8005f90:	4405      	add	r5, r0
 8005f92:	dc1c      	bgt.n	8005fce <_strtod_l+0x276>
 8005f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f96:	220a      	movs	r2, #10
 8005f98:	fb02 3301 	mla	r3, r2, r1, r3
 8005f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fa2:	1c59      	adds	r1, r3, #1
 8005fa4:	911d      	str	r1, [sp, #116]	; 0x74
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	4610      	mov	r0, r2
 8005faa:	e7c9      	b.n	8005f40 <_strtod_l+0x1e8>
 8005fac:	4638      	mov	r0, r7
 8005fae:	e7d2      	b.n	8005f56 <_strtod_l+0x1fe>
 8005fb0:	2a08      	cmp	r2, #8
 8005fb2:	dc04      	bgt.n	8005fbe <_strtod_l+0x266>
 8005fb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005fb6:	434e      	muls	r6, r1
 8005fb8:	9609      	str	r6, [sp, #36]	; 0x24
 8005fba:	3201      	adds	r2, #1
 8005fbc:	e7e2      	b.n	8005f84 <_strtod_l+0x22c>
 8005fbe:	f102 0c01 	add.w	ip, r2, #1
 8005fc2:	f1bc 0f10 	cmp.w	ip, #16
 8005fc6:	bfd8      	it	le
 8005fc8:	fb01 f909 	mulle.w	r9, r1, r9
 8005fcc:	e7f5      	b.n	8005fba <_strtod_l+0x262>
 8005fce:	2d10      	cmp	r5, #16
 8005fd0:	bfdc      	itt	le
 8005fd2:	220a      	movle	r2, #10
 8005fd4:	fb02 3909 	mlale	r9, r2, r9, r3
 8005fd8:	e7e1      	b.n	8005f9e <_strtod_l+0x246>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9307      	str	r3, [sp, #28]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	e77c      	b.n	8005edc <_strtod_l+0x184>
 8005fe2:	f04f 0c00 	mov.w	ip, #0
 8005fe6:	f108 0302 	add.w	r3, r8, #2
 8005fea:	931d      	str	r3, [sp, #116]	; 0x74
 8005fec:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005ff0:	e785      	b.n	8005efe <_strtod_l+0x1a6>
 8005ff2:	f04f 0c01 	mov.w	ip, #1
 8005ff6:	e7f6      	b.n	8005fe6 <_strtod_l+0x28e>
 8005ff8:	08009bf8 	.word	0x08009bf8
 8005ffc:	080099a8 	.word	0x080099a8
 8006000:	7ff00000 	.word	0x7ff00000
 8006004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006006:	1c59      	adds	r1, r3, #1
 8006008:	911d      	str	r1, [sp, #116]	; 0x74
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b30      	cmp	r3, #48	; 0x30
 800600e:	d0f9      	beq.n	8006004 <_strtod_l+0x2ac>
 8006010:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006014:	2908      	cmp	r1, #8
 8006016:	f63f af79 	bhi.w	8005f0c <_strtod_l+0x1b4>
 800601a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800601e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006024:	1c59      	adds	r1, r3, #1
 8006026:	911d      	str	r1, [sp, #116]	; 0x74
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800602e:	2e09      	cmp	r6, #9
 8006030:	d937      	bls.n	80060a2 <_strtod_l+0x34a>
 8006032:	9e08      	ldr	r6, [sp, #32]
 8006034:	1b89      	subs	r1, r1, r6
 8006036:	2908      	cmp	r1, #8
 8006038:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800603c:	dc02      	bgt.n	8006044 <_strtod_l+0x2ec>
 800603e:	4576      	cmp	r6, lr
 8006040:	bfa8      	it	ge
 8006042:	4676      	movge	r6, lr
 8006044:	f1bc 0f00 	cmp.w	ip, #0
 8006048:	d000      	beq.n	800604c <_strtod_l+0x2f4>
 800604a:	4276      	negs	r6, r6
 800604c:	2d00      	cmp	r5, #0
 800604e:	d14f      	bne.n	80060f0 <_strtod_l+0x398>
 8006050:	9904      	ldr	r1, [sp, #16]
 8006052:	4301      	orrs	r1, r0
 8006054:	f47f aec2 	bne.w	8005ddc <_strtod_l+0x84>
 8006058:	2a00      	cmp	r2, #0
 800605a:	f47f aedb 	bne.w	8005e14 <_strtod_l+0xbc>
 800605e:	2b69      	cmp	r3, #105	; 0x69
 8006060:	d027      	beq.n	80060b2 <_strtod_l+0x35a>
 8006062:	dc24      	bgt.n	80060ae <_strtod_l+0x356>
 8006064:	2b49      	cmp	r3, #73	; 0x49
 8006066:	d024      	beq.n	80060b2 <_strtod_l+0x35a>
 8006068:	2b4e      	cmp	r3, #78	; 0x4e
 800606a:	f47f aed3 	bne.w	8005e14 <_strtod_l+0xbc>
 800606e:	499e      	ldr	r1, [pc, #632]	; (80062e8 <_strtod_l+0x590>)
 8006070:	a81d      	add	r0, sp, #116	; 0x74
 8006072:	f001 fe4d 	bl	8007d10 <__match>
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f aecc 	beq.w	8005e14 <_strtod_l+0xbc>
 800607c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b28      	cmp	r3, #40	; 0x28
 8006082:	d12d      	bne.n	80060e0 <_strtod_l+0x388>
 8006084:	4999      	ldr	r1, [pc, #612]	; (80062ec <_strtod_l+0x594>)
 8006086:	aa20      	add	r2, sp, #128	; 0x80
 8006088:	a81d      	add	r0, sp, #116	; 0x74
 800608a:	f001 fe55 	bl	8007d38 <__hexnan>
 800608e:	2805      	cmp	r0, #5
 8006090:	d126      	bne.n	80060e0 <_strtod_l+0x388>
 8006092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006094:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006098:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800609c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80060a0:	e69c      	b.n	8005ddc <_strtod_l+0x84>
 80060a2:	210a      	movs	r1, #10
 80060a4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80060a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80060ac:	e7b9      	b.n	8006022 <_strtod_l+0x2ca>
 80060ae:	2b6e      	cmp	r3, #110	; 0x6e
 80060b0:	e7db      	b.n	800606a <_strtod_l+0x312>
 80060b2:	498f      	ldr	r1, [pc, #572]	; (80062f0 <_strtod_l+0x598>)
 80060b4:	a81d      	add	r0, sp, #116	; 0x74
 80060b6:	f001 fe2b 	bl	8007d10 <__match>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f43f aeaa 	beq.w	8005e14 <_strtod_l+0xbc>
 80060c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060c2:	498c      	ldr	r1, [pc, #560]	; (80062f4 <_strtod_l+0x59c>)
 80060c4:	3b01      	subs	r3, #1
 80060c6:	a81d      	add	r0, sp, #116	; 0x74
 80060c8:	931d      	str	r3, [sp, #116]	; 0x74
 80060ca:	f001 fe21 	bl	8007d10 <__match>
 80060ce:	b910      	cbnz	r0, 80060d6 <_strtod_l+0x37e>
 80060d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060d2:	3301      	adds	r3, #1
 80060d4:	931d      	str	r3, [sp, #116]	; 0x74
 80060d6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006304 <_strtod_l+0x5ac>
 80060da:	f04f 0a00 	mov.w	sl, #0
 80060de:	e67d      	b.n	8005ddc <_strtod_l+0x84>
 80060e0:	4885      	ldr	r0, [pc, #532]	; (80062f8 <_strtod_l+0x5a0>)
 80060e2:	f002 fdc1 	bl	8008c68 <nan>
 80060e6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80060ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80060ee:	e675      	b.n	8005ddc <_strtod_l+0x84>
 80060f0:	9b07      	ldr	r3, [sp, #28]
 80060f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060f4:	1af3      	subs	r3, r6, r3
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	bf08      	it	eq
 80060fa:	462f      	moveq	r7, r5
 80060fc:	2d10      	cmp	r5, #16
 80060fe:	9308      	str	r3, [sp, #32]
 8006100:	46a8      	mov	r8, r5
 8006102:	bfa8      	it	ge
 8006104:	f04f 0810 	movge.w	r8, #16
 8006108:	f7fa fa14 	bl	8000534 <__aeabi_ui2d>
 800610c:	2d09      	cmp	r5, #9
 800610e:	4682      	mov	sl, r0
 8006110:	468b      	mov	fp, r1
 8006112:	dd13      	ble.n	800613c <_strtod_l+0x3e4>
 8006114:	4b79      	ldr	r3, [pc, #484]	; (80062fc <_strtod_l+0x5a4>)
 8006116:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800611a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800611e:	f7fa fa83 	bl	8000628 <__aeabi_dmul>
 8006122:	4682      	mov	sl, r0
 8006124:	4648      	mov	r0, r9
 8006126:	468b      	mov	fp, r1
 8006128:	f7fa fa04 	bl	8000534 <__aeabi_ui2d>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4650      	mov	r0, sl
 8006132:	4659      	mov	r1, fp
 8006134:	f7fa f8c2 	bl	80002bc <__adddf3>
 8006138:	4682      	mov	sl, r0
 800613a:	468b      	mov	fp, r1
 800613c:	2d0f      	cmp	r5, #15
 800613e:	dc38      	bgt.n	80061b2 <_strtod_l+0x45a>
 8006140:	9b08      	ldr	r3, [sp, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f43f ae4a 	beq.w	8005ddc <_strtod_l+0x84>
 8006148:	dd24      	ble.n	8006194 <_strtod_l+0x43c>
 800614a:	2b16      	cmp	r3, #22
 800614c:	dc0b      	bgt.n	8006166 <_strtod_l+0x40e>
 800614e:	4d6b      	ldr	r5, [pc, #428]	; (80062fc <_strtod_l+0x5a4>)
 8006150:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006154:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006158:	4652      	mov	r2, sl
 800615a:	465b      	mov	r3, fp
 800615c:	f7fa fa64 	bl	8000628 <__aeabi_dmul>
 8006160:	4682      	mov	sl, r0
 8006162:	468b      	mov	fp, r1
 8006164:	e63a      	b.n	8005ddc <_strtod_l+0x84>
 8006166:	9a08      	ldr	r2, [sp, #32]
 8006168:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800616c:	4293      	cmp	r3, r2
 800616e:	db20      	blt.n	80061b2 <_strtod_l+0x45a>
 8006170:	4c62      	ldr	r4, [pc, #392]	; (80062fc <_strtod_l+0x5a4>)
 8006172:	f1c5 050f 	rsb	r5, r5, #15
 8006176:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800617a:	4652      	mov	r2, sl
 800617c:	465b      	mov	r3, fp
 800617e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006182:	f7fa fa51 	bl	8000628 <__aeabi_dmul>
 8006186:	9b08      	ldr	r3, [sp, #32]
 8006188:	1b5d      	subs	r5, r3, r5
 800618a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800618e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006192:	e7e3      	b.n	800615c <_strtod_l+0x404>
 8006194:	9b08      	ldr	r3, [sp, #32]
 8006196:	3316      	adds	r3, #22
 8006198:	db0b      	blt.n	80061b2 <_strtod_l+0x45a>
 800619a:	9b07      	ldr	r3, [sp, #28]
 800619c:	4a57      	ldr	r2, [pc, #348]	; (80062fc <_strtod_l+0x5a4>)
 800619e:	1b9e      	subs	r6, r3, r6
 80061a0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80061a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061a8:	4650      	mov	r0, sl
 80061aa:	4659      	mov	r1, fp
 80061ac:	f7fa fb66 	bl	800087c <__aeabi_ddiv>
 80061b0:	e7d6      	b.n	8006160 <_strtod_l+0x408>
 80061b2:	9b08      	ldr	r3, [sp, #32]
 80061b4:	eba5 0808 	sub.w	r8, r5, r8
 80061b8:	4498      	add	r8, r3
 80061ba:	f1b8 0f00 	cmp.w	r8, #0
 80061be:	dd71      	ble.n	80062a4 <_strtod_l+0x54c>
 80061c0:	f018 030f 	ands.w	r3, r8, #15
 80061c4:	d00a      	beq.n	80061dc <_strtod_l+0x484>
 80061c6:	494d      	ldr	r1, [pc, #308]	; (80062fc <_strtod_l+0x5a4>)
 80061c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061cc:	4652      	mov	r2, sl
 80061ce:	465b      	mov	r3, fp
 80061d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061d4:	f7fa fa28 	bl	8000628 <__aeabi_dmul>
 80061d8:	4682      	mov	sl, r0
 80061da:	468b      	mov	fp, r1
 80061dc:	f038 080f 	bics.w	r8, r8, #15
 80061e0:	d04d      	beq.n	800627e <_strtod_l+0x526>
 80061e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80061e6:	dd22      	ble.n	800622e <_strtod_l+0x4d6>
 80061e8:	2500      	movs	r5, #0
 80061ea:	462e      	mov	r6, r5
 80061ec:	9509      	str	r5, [sp, #36]	; 0x24
 80061ee:	9507      	str	r5, [sp, #28]
 80061f0:	2322      	movs	r3, #34	; 0x22
 80061f2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006304 <_strtod_l+0x5ac>
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	f04f 0a00 	mov.w	sl, #0
 80061fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f43f adec 	beq.w	8005ddc <_strtod_l+0x84>
 8006204:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006206:	4620      	mov	r0, r4
 8006208:	f001 fe9e 	bl	8007f48 <_Bfree>
 800620c:	9907      	ldr	r1, [sp, #28]
 800620e:	4620      	mov	r0, r4
 8006210:	f001 fe9a 	bl	8007f48 <_Bfree>
 8006214:	4631      	mov	r1, r6
 8006216:	4620      	mov	r0, r4
 8006218:	f001 fe96 	bl	8007f48 <_Bfree>
 800621c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800621e:	4620      	mov	r0, r4
 8006220:	f001 fe92 	bl	8007f48 <_Bfree>
 8006224:	4629      	mov	r1, r5
 8006226:	4620      	mov	r0, r4
 8006228:	f001 fe8e 	bl	8007f48 <_Bfree>
 800622c:	e5d6      	b.n	8005ddc <_strtod_l+0x84>
 800622e:	2300      	movs	r3, #0
 8006230:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006234:	4650      	mov	r0, sl
 8006236:	4659      	mov	r1, fp
 8006238:	4699      	mov	r9, r3
 800623a:	f1b8 0f01 	cmp.w	r8, #1
 800623e:	dc21      	bgt.n	8006284 <_strtod_l+0x52c>
 8006240:	b10b      	cbz	r3, 8006246 <_strtod_l+0x4ee>
 8006242:	4682      	mov	sl, r0
 8006244:	468b      	mov	fp, r1
 8006246:	4b2e      	ldr	r3, [pc, #184]	; (8006300 <_strtod_l+0x5a8>)
 8006248:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800624c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006250:	4652      	mov	r2, sl
 8006252:	465b      	mov	r3, fp
 8006254:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006258:	f7fa f9e6 	bl	8000628 <__aeabi_dmul>
 800625c:	4b29      	ldr	r3, [pc, #164]	; (8006304 <_strtod_l+0x5ac>)
 800625e:	460a      	mov	r2, r1
 8006260:	400b      	ands	r3, r1
 8006262:	4929      	ldr	r1, [pc, #164]	; (8006308 <_strtod_l+0x5b0>)
 8006264:	428b      	cmp	r3, r1
 8006266:	4682      	mov	sl, r0
 8006268:	d8be      	bhi.n	80061e8 <_strtod_l+0x490>
 800626a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800626e:	428b      	cmp	r3, r1
 8006270:	bf86      	itte	hi
 8006272:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800630c <_strtod_l+0x5b4>
 8006276:	f04f 3aff 	movhi.w	sl, #4294967295
 800627a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800627e:	2300      	movs	r3, #0
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	e081      	b.n	8006388 <_strtod_l+0x630>
 8006284:	f018 0f01 	tst.w	r8, #1
 8006288:	d007      	beq.n	800629a <_strtod_l+0x542>
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <_strtod_l+0x5a8>)
 800628c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f7fa f9c8 	bl	8000628 <__aeabi_dmul>
 8006298:	2301      	movs	r3, #1
 800629a:	f109 0901 	add.w	r9, r9, #1
 800629e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062a2:	e7ca      	b.n	800623a <_strtod_l+0x4e2>
 80062a4:	d0eb      	beq.n	800627e <_strtod_l+0x526>
 80062a6:	f1c8 0800 	rsb	r8, r8, #0
 80062aa:	f018 020f 	ands.w	r2, r8, #15
 80062ae:	d00a      	beq.n	80062c6 <_strtod_l+0x56e>
 80062b0:	4b12      	ldr	r3, [pc, #72]	; (80062fc <_strtod_l+0x5a4>)
 80062b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062b6:	4650      	mov	r0, sl
 80062b8:	4659      	mov	r1, fp
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f7fa fadd 	bl	800087c <__aeabi_ddiv>
 80062c2:	4682      	mov	sl, r0
 80062c4:	468b      	mov	fp, r1
 80062c6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80062ca:	d0d8      	beq.n	800627e <_strtod_l+0x526>
 80062cc:	f1b8 0f1f 	cmp.w	r8, #31
 80062d0:	dd1e      	ble.n	8006310 <_strtod_l+0x5b8>
 80062d2:	2500      	movs	r5, #0
 80062d4:	462e      	mov	r6, r5
 80062d6:	9509      	str	r5, [sp, #36]	; 0x24
 80062d8:	9507      	str	r5, [sp, #28]
 80062da:	2322      	movs	r3, #34	; 0x22
 80062dc:	f04f 0a00 	mov.w	sl, #0
 80062e0:	f04f 0b00 	mov.w	fp, #0
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	e789      	b.n	80061fc <_strtod_l+0x4a4>
 80062e8:	08009981 	.word	0x08009981
 80062ec:	080099bc 	.word	0x080099bc
 80062f0:	08009979 	.word	0x08009979
 80062f4:	08009afc 	.word	0x08009afc
 80062f8:	08009db8 	.word	0x08009db8
 80062fc:	08009c98 	.word	0x08009c98
 8006300:	08009c70 	.word	0x08009c70
 8006304:	7ff00000 	.word	0x7ff00000
 8006308:	7ca00000 	.word	0x7ca00000
 800630c:	7fefffff 	.word	0x7fefffff
 8006310:	f018 0310 	ands.w	r3, r8, #16
 8006314:	bf18      	it	ne
 8006316:	236a      	movne	r3, #106	; 0x6a
 8006318:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80066d0 <_strtod_l+0x978>
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	4650      	mov	r0, sl
 8006320:	4659      	mov	r1, fp
 8006322:	2300      	movs	r3, #0
 8006324:	f018 0f01 	tst.w	r8, #1
 8006328:	d004      	beq.n	8006334 <_strtod_l+0x5dc>
 800632a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800632e:	f7fa f97b 	bl	8000628 <__aeabi_dmul>
 8006332:	2301      	movs	r3, #1
 8006334:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006338:	f109 0908 	add.w	r9, r9, #8
 800633c:	d1f2      	bne.n	8006324 <_strtod_l+0x5cc>
 800633e:	b10b      	cbz	r3, 8006344 <_strtod_l+0x5ec>
 8006340:	4682      	mov	sl, r0
 8006342:	468b      	mov	fp, r1
 8006344:	9b04      	ldr	r3, [sp, #16]
 8006346:	b1bb      	cbz	r3, 8006378 <_strtod_l+0x620>
 8006348:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800634c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006350:	2b00      	cmp	r3, #0
 8006352:	4659      	mov	r1, fp
 8006354:	dd10      	ble.n	8006378 <_strtod_l+0x620>
 8006356:	2b1f      	cmp	r3, #31
 8006358:	f340 8128 	ble.w	80065ac <_strtod_l+0x854>
 800635c:	2b34      	cmp	r3, #52	; 0x34
 800635e:	bfde      	ittt	le
 8006360:	3b20      	suble	r3, #32
 8006362:	f04f 32ff 	movle.w	r2, #4294967295
 8006366:	fa02 f303 	lslle.w	r3, r2, r3
 800636a:	f04f 0a00 	mov.w	sl, #0
 800636e:	bfcc      	ite	gt
 8006370:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006374:	ea03 0b01 	andle.w	fp, r3, r1
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	4650      	mov	r0, sl
 800637e:	4659      	mov	r1, fp
 8006380:	f7fa fbba 	bl	8000af8 <__aeabi_dcmpeq>
 8006384:	2800      	cmp	r0, #0
 8006386:	d1a4      	bne.n	80062d2 <_strtod_l+0x57a>
 8006388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800638e:	462b      	mov	r3, r5
 8006390:	463a      	mov	r2, r7
 8006392:	4620      	mov	r0, r4
 8006394:	f001 fe44 	bl	8008020 <__s2b>
 8006398:	9009      	str	r0, [sp, #36]	; 0x24
 800639a:	2800      	cmp	r0, #0
 800639c:	f43f af24 	beq.w	80061e8 <_strtod_l+0x490>
 80063a0:	9b07      	ldr	r3, [sp, #28]
 80063a2:	1b9e      	subs	r6, r3, r6
 80063a4:	9b08      	ldr	r3, [sp, #32]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb4      	ite	lt
 80063aa:	4633      	movlt	r3, r6
 80063ac:	2300      	movge	r3, #0
 80063ae:	9310      	str	r3, [sp, #64]	; 0x40
 80063b0:	9b08      	ldr	r3, [sp, #32]
 80063b2:	2500      	movs	r5, #0
 80063b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063b8:	9318      	str	r3, [sp, #96]	; 0x60
 80063ba:	462e      	mov	r6, r5
 80063bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063be:	4620      	mov	r0, r4
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	f001 fd81 	bl	8007ec8 <_Balloc>
 80063c6:	9007      	str	r0, [sp, #28]
 80063c8:	2800      	cmp	r0, #0
 80063ca:	f43f af11 	beq.w	80061f0 <_strtod_l+0x498>
 80063ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	3202      	adds	r2, #2
 80063d4:	f103 010c 	add.w	r1, r3, #12
 80063d8:	0092      	lsls	r2, r2, #2
 80063da:	300c      	adds	r0, #12
 80063dc:	f001 fd66 	bl	8007eac <memcpy>
 80063e0:	ec4b ab10 	vmov	d0, sl, fp
 80063e4:	aa20      	add	r2, sp, #128	; 0x80
 80063e6:	a91f      	add	r1, sp, #124	; 0x7c
 80063e8:	4620      	mov	r0, r4
 80063ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80063ee:	f002 f953 	bl	8008698 <__d2b>
 80063f2:	901e      	str	r0, [sp, #120]	; 0x78
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f43f aefb 	beq.w	80061f0 <_strtod_l+0x498>
 80063fa:	2101      	movs	r1, #1
 80063fc:	4620      	mov	r0, r4
 80063fe:	f001 fea9 	bl	8008154 <__i2b>
 8006402:	4606      	mov	r6, r0
 8006404:	2800      	cmp	r0, #0
 8006406:	f43f aef3 	beq.w	80061f0 <_strtod_l+0x498>
 800640a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800640c:	9904      	ldr	r1, [sp, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfab      	itete	ge
 8006412:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006414:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006416:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006418:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800641c:	bfac      	ite	ge
 800641e:	eb03 0902 	addge.w	r9, r3, r2
 8006422:	1ad7      	sublt	r7, r2, r3
 8006424:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006426:	eba3 0801 	sub.w	r8, r3, r1
 800642a:	4490      	add	r8, r2
 800642c:	4ba3      	ldr	r3, [pc, #652]	; (80066bc <_strtod_l+0x964>)
 800642e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006432:	4598      	cmp	r8, r3
 8006434:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006438:	f280 80cc 	bge.w	80065d4 <_strtod_l+0x87c>
 800643c:	eba3 0308 	sub.w	r3, r3, r8
 8006440:	2b1f      	cmp	r3, #31
 8006442:	eba2 0203 	sub.w	r2, r2, r3
 8006446:	f04f 0101 	mov.w	r1, #1
 800644a:	f300 80b6 	bgt.w	80065ba <_strtod_l+0x862>
 800644e:	fa01 f303 	lsl.w	r3, r1, r3
 8006452:	9311      	str	r3, [sp, #68]	; 0x44
 8006454:	2300      	movs	r3, #0
 8006456:	930c      	str	r3, [sp, #48]	; 0x30
 8006458:	eb09 0802 	add.w	r8, r9, r2
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	45c1      	cmp	r9, r8
 8006460:	4417      	add	r7, r2
 8006462:	441f      	add	r7, r3
 8006464:	464b      	mov	r3, r9
 8006466:	bfa8      	it	ge
 8006468:	4643      	movge	r3, r8
 800646a:	42bb      	cmp	r3, r7
 800646c:	bfa8      	it	ge
 800646e:	463b      	movge	r3, r7
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfc2      	ittt	gt
 8006474:	eba8 0803 	subgt.w	r8, r8, r3
 8006478:	1aff      	subgt	r7, r7, r3
 800647a:	eba9 0903 	subgt.w	r9, r9, r3
 800647e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	dd17      	ble.n	80064b4 <_strtod_l+0x75c>
 8006484:	4631      	mov	r1, r6
 8006486:	461a      	mov	r2, r3
 8006488:	4620      	mov	r0, r4
 800648a:	f001 ff1f 	bl	80082cc <__pow5mult>
 800648e:	4606      	mov	r6, r0
 8006490:	2800      	cmp	r0, #0
 8006492:	f43f aead 	beq.w	80061f0 <_strtod_l+0x498>
 8006496:	4601      	mov	r1, r0
 8006498:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800649a:	4620      	mov	r0, r4
 800649c:	f001 fe70 	bl	8008180 <__multiply>
 80064a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80064a2:	2800      	cmp	r0, #0
 80064a4:	f43f aea4 	beq.w	80061f0 <_strtod_l+0x498>
 80064a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80064aa:	4620      	mov	r0, r4
 80064ac:	f001 fd4c 	bl	8007f48 <_Bfree>
 80064b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064b2:	931e      	str	r3, [sp, #120]	; 0x78
 80064b4:	f1b8 0f00 	cmp.w	r8, #0
 80064b8:	f300 8091 	bgt.w	80065de <_strtod_l+0x886>
 80064bc:	9b08      	ldr	r3, [sp, #32]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd08      	ble.n	80064d4 <_strtod_l+0x77c>
 80064c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80064c4:	9907      	ldr	r1, [sp, #28]
 80064c6:	4620      	mov	r0, r4
 80064c8:	f001 ff00 	bl	80082cc <__pow5mult>
 80064cc:	9007      	str	r0, [sp, #28]
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f43f ae8e 	beq.w	80061f0 <_strtod_l+0x498>
 80064d4:	2f00      	cmp	r7, #0
 80064d6:	dd08      	ble.n	80064ea <_strtod_l+0x792>
 80064d8:	9907      	ldr	r1, [sp, #28]
 80064da:	463a      	mov	r2, r7
 80064dc:	4620      	mov	r0, r4
 80064de:	f001 ff4f 	bl	8008380 <__lshift>
 80064e2:	9007      	str	r0, [sp, #28]
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f43f ae83 	beq.w	80061f0 <_strtod_l+0x498>
 80064ea:	f1b9 0f00 	cmp.w	r9, #0
 80064ee:	dd08      	ble.n	8006502 <_strtod_l+0x7aa>
 80064f0:	4631      	mov	r1, r6
 80064f2:	464a      	mov	r2, r9
 80064f4:	4620      	mov	r0, r4
 80064f6:	f001 ff43 	bl	8008380 <__lshift>
 80064fa:	4606      	mov	r6, r0
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f43f ae77 	beq.w	80061f0 <_strtod_l+0x498>
 8006502:	9a07      	ldr	r2, [sp, #28]
 8006504:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006506:	4620      	mov	r0, r4
 8006508:	f001 ffc2 	bl	8008490 <__mdiff>
 800650c:	4605      	mov	r5, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f ae6e 	beq.w	80061f0 <_strtod_l+0x498>
 8006514:	68c3      	ldr	r3, [r0, #12]
 8006516:	930f      	str	r3, [sp, #60]	; 0x3c
 8006518:	2300      	movs	r3, #0
 800651a:	60c3      	str	r3, [r0, #12]
 800651c:	4631      	mov	r1, r6
 800651e:	f001 ff9b 	bl	8008458 <__mcmp>
 8006522:	2800      	cmp	r0, #0
 8006524:	da65      	bge.n	80065f2 <_strtod_l+0x89a>
 8006526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006528:	ea53 030a 	orrs.w	r3, r3, sl
 800652c:	f040 8087 	bne.w	800663e <_strtod_l+0x8e6>
 8006530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006534:	2b00      	cmp	r3, #0
 8006536:	f040 8082 	bne.w	800663e <_strtod_l+0x8e6>
 800653a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800653e:	0d1b      	lsrs	r3, r3, #20
 8006540:	051b      	lsls	r3, r3, #20
 8006542:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006546:	d97a      	bls.n	800663e <_strtod_l+0x8e6>
 8006548:	696b      	ldr	r3, [r5, #20]
 800654a:	b913      	cbnz	r3, 8006552 <_strtod_l+0x7fa>
 800654c:	692b      	ldr	r3, [r5, #16]
 800654e:	2b01      	cmp	r3, #1
 8006550:	dd75      	ble.n	800663e <_strtod_l+0x8e6>
 8006552:	4629      	mov	r1, r5
 8006554:	2201      	movs	r2, #1
 8006556:	4620      	mov	r0, r4
 8006558:	f001 ff12 	bl	8008380 <__lshift>
 800655c:	4631      	mov	r1, r6
 800655e:	4605      	mov	r5, r0
 8006560:	f001 ff7a 	bl	8008458 <__mcmp>
 8006564:	2800      	cmp	r0, #0
 8006566:	dd6a      	ble.n	800663e <_strtod_l+0x8e6>
 8006568:	9904      	ldr	r1, [sp, #16]
 800656a:	4a55      	ldr	r2, [pc, #340]	; (80066c0 <_strtod_l+0x968>)
 800656c:	465b      	mov	r3, fp
 800656e:	2900      	cmp	r1, #0
 8006570:	f000 8085 	beq.w	800667e <_strtod_l+0x926>
 8006574:	ea02 010b 	and.w	r1, r2, fp
 8006578:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800657c:	dc7f      	bgt.n	800667e <_strtod_l+0x926>
 800657e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006582:	f77f aeaa 	ble.w	80062da <_strtod_l+0x582>
 8006586:	4a4f      	ldr	r2, [pc, #316]	; (80066c4 <_strtod_l+0x96c>)
 8006588:	2300      	movs	r3, #0
 800658a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800658e:	4650      	mov	r0, sl
 8006590:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006594:	4659      	mov	r1, fp
 8006596:	f7fa f847 	bl	8000628 <__aeabi_dmul>
 800659a:	460b      	mov	r3, r1
 800659c:	4303      	orrs	r3, r0
 800659e:	bf08      	it	eq
 80065a0:	2322      	moveq	r3, #34	; 0x22
 80065a2:	4682      	mov	sl, r0
 80065a4:	468b      	mov	fp, r1
 80065a6:	bf08      	it	eq
 80065a8:	6023      	streq	r3, [r4, #0]
 80065aa:	e62b      	b.n	8006204 <_strtod_l+0x4ac>
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	ea03 0a0a 	and.w	sl, r3, sl
 80065b8:	e6de      	b.n	8006378 <_strtod_l+0x620>
 80065ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80065be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80065c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80065c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80065ca:	fa01 f308 	lsl.w	r3, r1, r8
 80065ce:	930c      	str	r3, [sp, #48]	; 0x30
 80065d0:	9111      	str	r1, [sp, #68]	; 0x44
 80065d2:	e741      	b.n	8006458 <_strtod_l+0x700>
 80065d4:	2300      	movs	r3, #0
 80065d6:	930c      	str	r3, [sp, #48]	; 0x30
 80065d8:	2301      	movs	r3, #1
 80065da:	9311      	str	r3, [sp, #68]	; 0x44
 80065dc:	e73c      	b.n	8006458 <_strtod_l+0x700>
 80065de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80065e0:	4642      	mov	r2, r8
 80065e2:	4620      	mov	r0, r4
 80065e4:	f001 fecc 	bl	8008380 <__lshift>
 80065e8:	901e      	str	r0, [sp, #120]	; 0x78
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f47f af66 	bne.w	80064bc <_strtod_l+0x764>
 80065f0:	e5fe      	b.n	80061f0 <_strtod_l+0x498>
 80065f2:	465f      	mov	r7, fp
 80065f4:	d16e      	bne.n	80066d4 <_strtod_l+0x97c>
 80065f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065fc:	b342      	cbz	r2, 8006650 <_strtod_l+0x8f8>
 80065fe:	4a32      	ldr	r2, [pc, #200]	; (80066c8 <_strtod_l+0x970>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d128      	bne.n	8006656 <_strtod_l+0x8fe>
 8006604:	9b04      	ldr	r3, [sp, #16]
 8006606:	4650      	mov	r0, sl
 8006608:	b1eb      	cbz	r3, 8006646 <_strtod_l+0x8ee>
 800660a:	4a2d      	ldr	r2, [pc, #180]	; (80066c0 <_strtod_l+0x968>)
 800660c:	403a      	ands	r2, r7
 800660e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006612:	f04f 31ff 	mov.w	r1, #4294967295
 8006616:	d819      	bhi.n	800664c <_strtod_l+0x8f4>
 8006618:	0d12      	lsrs	r2, r2, #20
 800661a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800661e:	fa01 f303 	lsl.w	r3, r1, r3
 8006622:	4298      	cmp	r0, r3
 8006624:	d117      	bne.n	8006656 <_strtod_l+0x8fe>
 8006626:	4b29      	ldr	r3, [pc, #164]	; (80066cc <_strtod_l+0x974>)
 8006628:	429f      	cmp	r7, r3
 800662a:	d102      	bne.n	8006632 <_strtod_l+0x8da>
 800662c:	3001      	adds	r0, #1
 800662e:	f43f addf 	beq.w	80061f0 <_strtod_l+0x498>
 8006632:	4b23      	ldr	r3, [pc, #140]	; (80066c0 <_strtod_l+0x968>)
 8006634:	403b      	ands	r3, r7
 8006636:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800663a:	f04f 0a00 	mov.w	sl, #0
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1a0      	bne.n	8006586 <_strtod_l+0x82e>
 8006644:	e5de      	b.n	8006204 <_strtod_l+0x4ac>
 8006646:	f04f 33ff 	mov.w	r3, #4294967295
 800664a:	e7ea      	b.n	8006622 <_strtod_l+0x8ca>
 800664c:	460b      	mov	r3, r1
 800664e:	e7e8      	b.n	8006622 <_strtod_l+0x8ca>
 8006650:	ea53 030a 	orrs.w	r3, r3, sl
 8006654:	d088      	beq.n	8006568 <_strtod_l+0x810>
 8006656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006658:	b1db      	cbz	r3, 8006692 <_strtod_l+0x93a>
 800665a:	423b      	tst	r3, r7
 800665c:	d0ef      	beq.n	800663e <_strtod_l+0x8e6>
 800665e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006660:	9a04      	ldr	r2, [sp, #16]
 8006662:	4650      	mov	r0, sl
 8006664:	4659      	mov	r1, fp
 8006666:	b1c3      	cbz	r3, 800669a <_strtod_l+0x942>
 8006668:	f7ff fb5a 	bl	8005d20 <sulp>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006674:	f7f9 fe22 	bl	80002bc <__adddf3>
 8006678:	4682      	mov	sl, r0
 800667a:	468b      	mov	fp, r1
 800667c:	e7df      	b.n	800663e <_strtod_l+0x8e6>
 800667e:	4013      	ands	r3, r2
 8006680:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006684:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006688:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800668c:	f04f 3aff 	mov.w	sl, #4294967295
 8006690:	e7d5      	b.n	800663e <_strtod_l+0x8e6>
 8006692:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006694:	ea13 0f0a 	tst.w	r3, sl
 8006698:	e7e0      	b.n	800665c <_strtod_l+0x904>
 800669a:	f7ff fb41 	bl	8005d20 <sulp>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066a6:	f7f9 fe07 	bl	80002b8 <__aeabi_dsub>
 80066aa:	2200      	movs	r2, #0
 80066ac:	2300      	movs	r3, #0
 80066ae:	4682      	mov	sl, r0
 80066b0:	468b      	mov	fp, r1
 80066b2:	f7fa fa21 	bl	8000af8 <__aeabi_dcmpeq>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d0c1      	beq.n	800663e <_strtod_l+0x8e6>
 80066ba:	e60e      	b.n	80062da <_strtod_l+0x582>
 80066bc:	fffffc02 	.word	0xfffffc02
 80066c0:	7ff00000 	.word	0x7ff00000
 80066c4:	39500000 	.word	0x39500000
 80066c8:	000fffff 	.word	0x000fffff
 80066cc:	7fefffff 	.word	0x7fefffff
 80066d0:	080099d0 	.word	0x080099d0
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	f002 f83a 	bl	8008750 <__ratio>
 80066dc:	ec59 8b10 	vmov	r8, r9, d0
 80066e0:	ee10 0a10 	vmov	r0, s0
 80066e4:	2200      	movs	r2, #0
 80066e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066ea:	4649      	mov	r1, r9
 80066ec:	f7fa fa18 	bl	8000b20 <__aeabi_dcmple>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d07c      	beq.n	80067ee <_strtod_l+0xa96>
 80066f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d04c      	beq.n	8006794 <_strtod_l+0xa3c>
 80066fa:	4b95      	ldr	r3, [pc, #596]	; (8006950 <_strtod_l+0xbf8>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006702:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006950 <_strtod_l+0xbf8>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	4b92      	ldr	r3, [pc, #584]	; (8006954 <_strtod_l+0xbfc>)
 800670c:	403b      	ands	r3, r7
 800670e:	9311      	str	r3, [sp, #68]	; 0x44
 8006710:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006712:	4b91      	ldr	r3, [pc, #580]	; (8006958 <_strtod_l+0xc00>)
 8006714:	429a      	cmp	r2, r3
 8006716:	f040 80b2 	bne.w	800687e <_strtod_l+0xb26>
 800671a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800671e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006722:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006726:	ec4b ab10 	vmov	d0, sl, fp
 800672a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800672e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006732:	f001 ff35 	bl	80085a0 <__ulp>
 8006736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800673a:	ec53 2b10 	vmov	r2, r3, d0
 800673e:	f7f9 ff73 	bl	8000628 <__aeabi_dmul>
 8006742:	4652      	mov	r2, sl
 8006744:	465b      	mov	r3, fp
 8006746:	f7f9 fdb9 	bl	80002bc <__adddf3>
 800674a:	460b      	mov	r3, r1
 800674c:	4981      	ldr	r1, [pc, #516]	; (8006954 <_strtod_l+0xbfc>)
 800674e:	4a83      	ldr	r2, [pc, #524]	; (800695c <_strtod_l+0xc04>)
 8006750:	4019      	ands	r1, r3
 8006752:	4291      	cmp	r1, r2
 8006754:	4682      	mov	sl, r0
 8006756:	d95e      	bls.n	8006816 <_strtod_l+0xabe>
 8006758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800675e:	4293      	cmp	r3, r2
 8006760:	d103      	bne.n	800676a <_strtod_l+0xa12>
 8006762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006764:	3301      	adds	r3, #1
 8006766:	f43f ad43 	beq.w	80061f0 <_strtod_l+0x498>
 800676a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006968 <_strtod_l+0xc10>
 800676e:	f04f 3aff 	mov.w	sl, #4294967295
 8006772:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006774:	4620      	mov	r0, r4
 8006776:	f001 fbe7 	bl	8007f48 <_Bfree>
 800677a:	9907      	ldr	r1, [sp, #28]
 800677c:	4620      	mov	r0, r4
 800677e:	f001 fbe3 	bl	8007f48 <_Bfree>
 8006782:	4631      	mov	r1, r6
 8006784:	4620      	mov	r0, r4
 8006786:	f001 fbdf 	bl	8007f48 <_Bfree>
 800678a:	4629      	mov	r1, r5
 800678c:	4620      	mov	r0, r4
 800678e:	f001 fbdb 	bl	8007f48 <_Bfree>
 8006792:	e613      	b.n	80063bc <_strtod_l+0x664>
 8006794:	f1ba 0f00 	cmp.w	sl, #0
 8006798:	d11b      	bne.n	80067d2 <_strtod_l+0xa7a>
 800679a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800679e:	b9f3      	cbnz	r3, 80067de <_strtod_l+0xa86>
 80067a0:	4b6b      	ldr	r3, [pc, #428]	; (8006950 <_strtod_l+0xbf8>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	4640      	mov	r0, r8
 80067a6:	4649      	mov	r1, r9
 80067a8:	f7fa f9b0 	bl	8000b0c <__aeabi_dcmplt>
 80067ac:	b9d0      	cbnz	r0, 80067e4 <_strtod_l+0xa8c>
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	4b6b      	ldr	r3, [pc, #428]	; (8006960 <_strtod_l+0xc08>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	f7f9 ff37 	bl	8000628 <__aeabi_dmul>
 80067ba:	4680      	mov	r8, r0
 80067bc:	4689      	mov	r9, r1
 80067be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80067c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80067c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80067c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80067cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80067d0:	e79b      	b.n	800670a <_strtod_l+0x9b2>
 80067d2:	f1ba 0f01 	cmp.w	sl, #1
 80067d6:	d102      	bne.n	80067de <_strtod_l+0xa86>
 80067d8:	2f00      	cmp	r7, #0
 80067da:	f43f ad7e 	beq.w	80062da <_strtod_l+0x582>
 80067de:	4b61      	ldr	r3, [pc, #388]	; (8006964 <_strtod_l+0xc0c>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	e78c      	b.n	80066fe <_strtod_l+0x9a6>
 80067e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006960 <_strtod_l+0xc08>
 80067e8:	f04f 0800 	mov.w	r8, #0
 80067ec:	e7e7      	b.n	80067be <_strtod_l+0xa66>
 80067ee:	4b5c      	ldr	r3, [pc, #368]	; (8006960 <_strtod_l+0xc08>)
 80067f0:	4640      	mov	r0, r8
 80067f2:	4649      	mov	r1, r9
 80067f4:	2200      	movs	r2, #0
 80067f6:	f7f9 ff17 	bl	8000628 <__aeabi_dmul>
 80067fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067fc:	4680      	mov	r8, r0
 80067fe:	4689      	mov	r9, r1
 8006800:	b933      	cbnz	r3, 8006810 <_strtod_l+0xab8>
 8006802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006806:	9012      	str	r0, [sp, #72]	; 0x48
 8006808:	9313      	str	r3, [sp, #76]	; 0x4c
 800680a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800680e:	e7dd      	b.n	80067cc <_strtod_l+0xa74>
 8006810:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006814:	e7f9      	b.n	800680a <_strtod_l+0xab2>
 8006816:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800681a:	9b04      	ldr	r3, [sp, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1a8      	bne.n	8006772 <_strtod_l+0xa1a>
 8006820:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006824:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006826:	0d1b      	lsrs	r3, r3, #20
 8006828:	051b      	lsls	r3, r3, #20
 800682a:	429a      	cmp	r2, r3
 800682c:	d1a1      	bne.n	8006772 <_strtod_l+0xa1a>
 800682e:	4640      	mov	r0, r8
 8006830:	4649      	mov	r1, r9
 8006832:	f7fa fa09 	bl	8000c48 <__aeabi_d2lz>
 8006836:	f7f9 fec9 	bl	80005cc <__aeabi_l2d>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4640      	mov	r0, r8
 8006840:	4649      	mov	r1, r9
 8006842:	f7f9 fd39 	bl	80002b8 <__aeabi_dsub>
 8006846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006848:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800684c:	ea43 030a 	orr.w	r3, r3, sl
 8006850:	4313      	orrs	r3, r2
 8006852:	4680      	mov	r8, r0
 8006854:	4689      	mov	r9, r1
 8006856:	d053      	beq.n	8006900 <_strtod_l+0xba8>
 8006858:	a335      	add	r3, pc, #212	; (adr r3, 8006930 <_strtod_l+0xbd8>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7fa f955 	bl	8000b0c <__aeabi_dcmplt>
 8006862:	2800      	cmp	r0, #0
 8006864:	f47f acce 	bne.w	8006204 <_strtod_l+0x4ac>
 8006868:	a333      	add	r3, pc, #204	; (adr r3, 8006938 <_strtod_l+0xbe0>)
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7fa f969 	bl	8000b48 <__aeabi_dcmpgt>
 8006876:	2800      	cmp	r0, #0
 8006878:	f43f af7b 	beq.w	8006772 <_strtod_l+0xa1a>
 800687c:	e4c2      	b.n	8006204 <_strtod_l+0x4ac>
 800687e:	9b04      	ldr	r3, [sp, #16]
 8006880:	b333      	cbz	r3, 80068d0 <_strtod_l+0xb78>
 8006882:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006884:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006888:	d822      	bhi.n	80068d0 <_strtod_l+0xb78>
 800688a:	a32d      	add	r3, pc, #180	; (adr r3, 8006940 <_strtod_l+0xbe8>)
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	4640      	mov	r0, r8
 8006892:	4649      	mov	r1, r9
 8006894:	f7fa f944 	bl	8000b20 <__aeabi_dcmple>
 8006898:	b1a0      	cbz	r0, 80068c4 <_strtod_l+0xb6c>
 800689a:	4649      	mov	r1, r9
 800689c:	4640      	mov	r0, r8
 800689e:	f7fa f99b 	bl	8000bd8 <__aeabi_d2uiz>
 80068a2:	2801      	cmp	r0, #1
 80068a4:	bf38      	it	cc
 80068a6:	2001      	movcc	r0, #1
 80068a8:	f7f9 fe44 	bl	8000534 <__aeabi_ui2d>
 80068ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068ae:	4680      	mov	r8, r0
 80068b0:	4689      	mov	r9, r1
 80068b2:	bb13      	cbnz	r3, 80068fa <_strtod_l+0xba2>
 80068b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068b8:	9014      	str	r0, [sp, #80]	; 0x50
 80068ba:	9315      	str	r3, [sp, #84]	; 0x54
 80068bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80068c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80068c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80068cc:	1a9b      	subs	r3, r3, r2
 80068ce:	930d      	str	r3, [sp, #52]	; 0x34
 80068d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80068d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068dc:	f001 fe60 	bl	80085a0 <__ulp>
 80068e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068e4:	ec53 2b10 	vmov	r2, r3, d0
 80068e8:	f7f9 fe9e 	bl	8000628 <__aeabi_dmul>
 80068ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068f0:	f7f9 fce4 	bl	80002bc <__adddf3>
 80068f4:	4682      	mov	sl, r0
 80068f6:	468b      	mov	fp, r1
 80068f8:	e78f      	b.n	800681a <_strtod_l+0xac2>
 80068fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80068fe:	e7dd      	b.n	80068bc <_strtod_l+0xb64>
 8006900:	a311      	add	r3, pc, #68	; (adr r3, 8006948 <_strtod_l+0xbf0>)
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f7fa f901 	bl	8000b0c <__aeabi_dcmplt>
 800690a:	e7b4      	b.n	8006876 <_strtod_l+0xb1e>
 800690c:	2300      	movs	r3, #0
 800690e:	930e      	str	r3, [sp, #56]	; 0x38
 8006910:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006912:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	f7ff ba65 	b.w	8005de4 <_strtod_l+0x8c>
 800691a:	2b65      	cmp	r3, #101	; 0x65
 800691c:	f43f ab5d 	beq.w	8005fda <_strtod_l+0x282>
 8006920:	2b45      	cmp	r3, #69	; 0x45
 8006922:	f43f ab5a 	beq.w	8005fda <_strtod_l+0x282>
 8006926:	2201      	movs	r2, #1
 8006928:	f7ff bb92 	b.w	8006050 <_strtod_l+0x2f8>
 800692c:	f3af 8000 	nop.w
 8006930:	94a03595 	.word	0x94a03595
 8006934:	3fdfffff 	.word	0x3fdfffff
 8006938:	35afe535 	.word	0x35afe535
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	ffc00000 	.word	0xffc00000
 8006944:	41dfffff 	.word	0x41dfffff
 8006948:	94a03595 	.word	0x94a03595
 800694c:	3fcfffff 	.word	0x3fcfffff
 8006950:	3ff00000 	.word	0x3ff00000
 8006954:	7ff00000 	.word	0x7ff00000
 8006958:	7fe00000 	.word	0x7fe00000
 800695c:	7c9fffff 	.word	0x7c9fffff
 8006960:	3fe00000 	.word	0x3fe00000
 8006964:	bff00000 	.word	0xbff00000
 8006968:	7fefffff 	.word	0x7fefffff

0800696c <strtod>:
 800696c:	460a      	mov	r2, r1
 800696e:	4601      	mov	r1, r0
 8006970:	4802      	ldr	r0, [pc, #8]	; (800697c <strtod+0x10>)
 8006972:	4b03      	ldr	r3, [pc, #12]	; (8006980 <strtod+0x14>)
 8006974:	6800      	ldr	r0, [r0, #0]
 8006976:	f7ff b9ef 	b.w	8005d58 <_strtod_l>
 800697a:	bf00      	nop
 800697c:	20000010 	.word	0x20000010
 8006980:	20000078 	.word	0x20000078

08006984 <_strtol_l.isra.0>:
 8006984:	2b01      	cmp	r3, #1
 8006986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800698a:	d001      	beq.n	8006990 <_strtol_l.isra.0+0xc>
 800698c:	2b24      	cmp	r3, #36	; 0x24
 800698e:	d906      	bls.n	800699e <_strtol_l.isra.0+0x1a>
 8006990:	f7fe fcf0 	bl	8005374 <__errno>
 8006994:	2316      	movs	r3, #22
 8006996:	6003      	str	r3, [r0, #0]
 8006998:	2000      	movs	r0, #0
 800699a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699e:	4f3a      	ldr	r7, [pc, #232]	; (8006a88 <_strtol_l.isra.0+0x104>)
 80069a0:	468e      	mov	lr, r1
 80069a2:	4676      	mov	r6, lr
 80069a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80069a8:	5de5      	ldrb	r5, [r4, r7]
 80069aa:	f015 0508 	ands.w	r5, r5, #8
 80069ae:	d1f8      	bne.n	80069a2 <_strtol_l.isra.0+0x1e>
 80069b0:	2c2d      	cmp	r4, #45	; 0x2d
 80069b2:	d134      	bne.n	8006a1e <_strtol_l.isra.0+0x9a>
 80069b4:	f89e 4000 	ldrb.w	r4, [lr]
 80069b8:	f04f 0801 	mov.w	r8, #1
 80069bc:	f106 0e02 	add.w	lr, r6, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d05c      	beq.n	8006a7e <_strtol_l.isra.0+0xfa>
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d10c      	bne.n	80069e2 <_strtol_l.isra.0+0x5e>
 80069c8:	2c30      	cmp	r4, #48	; 0x30
 80069ca:	d10a      	bne.n	80069e2 <_strtol_l.isra.0+0x5e>
 80069cc:	f89e 4000 	ldrb.w	r4, [lr]
 80069d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80069d4:	2c58      	cmp	r4, #88	; 0x58
 80069d6:	d14d      	bne.n	8006a74 <_strtol_l.isra.0+0xf0>
 80069d8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80069dc:	2310      	movs	r3, #16
 80069de:	f10e 0e02 	add.w	lr, lr, #2
 80069e2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80069e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80069ea:	2600      	movs	r6, #0
 80069ec:	fbbc f9f3 	udiv	r9, ip, r3
 80069f0:	4635      	mov	r5, r6
 80069f2:	fb03 ca19 	mls	sl, r3, r9, ip
 80069f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80069fa:	2f09      	cmp	r7, #9
 80069fc:	d818      	bhi.n	8006a30 <_strtol_l.isra.0+0xac>
 80069fe:	463c      	mov	r4, r7
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	dd24      	ble.n	8006a4e <_strtol_l.isra.0+0xca>
 8006a04:	2e00      	cmp	r6, #0
 8006a06:	db1f      	blt.n	8006a48 <_strtol_l.isra.0+0xc4>
 8006a08:	45a9      	cmp	r9, r5
 8006a0a:	d31d      	bcc.n	8006a48 <_strtol_l.isra.0+0xc4>
 8006a0c:	d101      	bne.n	8006a12 <_strtol_l.isra.0+0x8e>
 8006a0e:	45a2      	cmp	sl, r4
 8006a10:	db1a      	blt.n	8006a48 <_strtol_l.isra.0+0xc4>
 8006a12:	fb05 4503 	mla	r5, r5, r3, r4
 8006a16:	2601      	movs	r6, #1
 8006a18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006a1c:	e7eb      	b.n	80069f6 <_strtol_l.isra.0+0x72>
 8006a1e:	2c2b      	cmp	r4, #43	; 0x2b
 8006a20:	bf08      	it	eq
 8006a22:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006a26:	46a8      	mov	r8, r5
 8006a28:	bf08      	it	eq
 8006a2a:	f106 0e02 	addeq.w	lr, r6, #2
 8006a2e:	e7c7      	b.n	80069c0 <_strtol_l.isra.0+0x3c>
 8006a30:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006a34:	2f19      	cmp	r7, #25
 8006a36:	d801      	bhi.n	8006a3c <_strtol_l.isra.0+0xb8>
 8006a38:	3c37      	subs	r4, #55	; 0x37
 8006a3a:	e7e1      	b.n	8006a00 <_strtol_l.isra.0+0x7c>
 8006a3c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006a40:	2f19      	cmp	r7, #25
 8006a42:	d804      	bhi.n	8006a4e <_strtol_l.isra.0+0xca>
 8006a44:	3c57      	subs	r4, #87	; 0x57
 8006a46:	e7db      	b.n	8006a00 <_strtol_l.isra.0+0x7c>
 8006a48:	f04f 36ff 	mov.w	r6, #4294967295
 8006a4c:	e7e4      	b.n	8006a18 <_strtol_l.isra.0+0x94>
 8006a4e:	2e00      	cmp	r6, #0
 8006a50:	da05      	bge.n	8006a5e <_strtol_l.isra.0+0xda>
 8006a52:	2322      	movs	r3, #34	; 0x22
 8006a54:	6003      	str	r3, [r0, #0]
 8006a56:	4665      	mov	r5, ip
 8006a58:	b942      	cbnz	r2, 8006a6c <_strtol_l.isra.0+0xe8>
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	e79d      	b.n	800699a <_strtol_l.isra.0+0x16>
 8006a5e:	f1b8 0f00 	cmp.w	r8, #0
 8006a62:	d000      	beq.n	8006a66 <_strtol_l.isra.0+0xe2>
 8006a64:	426d      	negs	r5, r5
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	d0f7      	beq.n	8006a5a <_strtol_l.isra.0+0xd6>
 8006a6a:	b10e      	cbz	r6, 8006a70 <_strtol_l.isra.0+0xec>
 8006a6c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006a70:	6011      	str	r1, [r2, #0]
 8006a72:	e7f2      	b.n	8006a5a <_strtol_l.isra.0+0xd6>
 8006a74:	2430      	movs	r4, #48	; 0x30
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1b3      	bne.n	80069e2 <_strtol_l.isra.0+0x5e>
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	e7b1      	b.n	80069e2 <_strtol_l.isra.0+0x5e>
 8006a7e:	2c30      	cmp	r4, #48	; 0x30
 8006a80:	d0a4      	beq.n	80069cc <_strtol_l.isra.0+0x48>
 8006a82:	230a      	movs	r3, #10
 8006a84:	e7ad      	b.n	80069e2 <_strtol_l.isra.0+0x5e>
 8006a86:	bf00      	nop
 8006a88:	080099f9 	.word	0x080099f9

08006a8c <strtol>:
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	460a      	mov	r2, r1
 8006a90:	4601      	mov	r1, r0
 8006a92:	4802      	ldr	r0, [pc, #8]	; (8006a9c <strtol+0x10>)
 8006a94:	6800      	ldr	r0, [r0, #0]
 8006a96:	f7ff bf75 	b.w	8006984 <_strtol_l.isra.0>
 8006a9a:	bf00      	nop
 8006a9c:	20000010 	.word	0x20000010

08006aa0 <quorem>:
 8006aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	6903      	ldr	r3, [r0, #16]
 8006aa6:	690c      	ldr	r4, [r1, #16]
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	4607      	mov	r7, r0
 8006aac:	f2c0 8081 	blt.w	8006bb2 <quorem+0x112>
 8006ab0:	3c01      	subs	r4, #1
 8006ab2:	f101 0814 	add.w	r8, r1, #20
 8006ab6:	f100 0514 	add.w	r5, r0, #20
 8006aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	429a      	cmp	r2, r3
 8006acc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ad8:	d331      	bcc.n	8006b3e <quorem+0x9e>
 8006ada:	f04f 0e00 	mov.w	lr, #0
 8006ade:	4640      	mov	r0, r8
 8006ae0:	46ac      	mov	ip, r5
 8006ae2:	46f2      	mov	sl, lr
 8006ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ae8:	b293      	uxth	r3, r2
 8006aea:	fb06 e303 	mla	r3, r6, r3, lr
 8006aee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	ebaa 0303 	sub.w	r3, sl, r3
 8006af8:	0c12      	lsrs	r2, r2, #16
 8006afa:	f8dc a000 	ldr.w	sl, [ip]
 8006afe:	fb06 e202 	mla	r2, r6, r2, lr
 8006b02:	fa13 f38a 	uxtah	r3, r3, sl
 8006b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b0a:	fa1f fa82 	uxth.w	sl, r2
 8006b0e:	f8dc 2000 	ldr.w	r2, [ip]
 8006b12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006b16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b20:	4581      	cmp	r9, r0
 8006b22:	f84c 3b04 	str.w	r3, [ip], #4
 8006b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b2a:	d2db      	bcs.n	8006ae4 <quorem+0x44>
 8006b2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b30:	b92b      	cbnz	r3, 8006b3e <quorem+0x9e>
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	3b04      	subs	r3, #4
 8006b36:	429d      	cmp	r5, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	d32e      	bcc.n	8006b9a <quorem+0xfa>
 8006b3c:	613c      	str	r4, [r7, #16]
 8006b3e:	4638      	mov	r0, r7
 8006b40:	f001 fc8a 	bl	8008458 <__mcmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	db24      	blt.n	8006b92 <quorem+0xf2>
 8006b48:	3601      	adds	r6, #1
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f04f 0c00 	mov.w	ip, #0
 8006b50:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b54:	f8d0 e000 	ldr.w	lr, [r0]
 8006b58:	b293      	uxth	r3, r2
 8006b5a:	ebac 0303 	sub.w	r3, ip, r3
 8006b5e:	0c12      	lsrs	r2, r2, #16
 8006b60:	fa13 f38e 	uxtah	r3, r3, lr
 8006b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b72:	45c1      	cmp	r9, r8
 8006b74:	f840 3b04 	str.w	r3, [r0], #4
 8006b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b7c:	d2e8      	bcs.n	8006b50 <quorem+0xb0>
 8006b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b86:	b922      	cbnz	r2, 8006b92 <quorem+0xf2>
 8006b88:	3b04      	subs	r3, #4
 8006b8a:	429d      	cmp	r5, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	d30a      	bcc.n	8006ba6 <quorem+0x106>
 8006b90:	613c      	str	r4, [r7, #16]
 8006b92:	4630      	mov	r0, r6
 8006b94:	b003      	add	sp, #12
 8006b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	d1cc      	bne.n	8006b3c <quorem+0x9c>
 8006ba2:	3c01      	subs	r4, #1
 8006ba4:	e7c7      	b.n	8006b36 <quorem+0x96>
 8006ba6:	6812      	ldr	r2, [r2, #0]
 8006ba8:	3b04      	subs	r3, #4
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	d1f0      	bne.n	8006b90 <quorem+0xf0>
 8006bae:	3c01      	subs	r4, #1
 8006bb0:	e7eb      	b.n	8006b8a <quorem+0xea>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e7ee      	b.n	8006b94 <quorem+0xf4>
	...

08006bb8 <_dtoa_r>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	ed2d 8b02 	vpush	{d8}
 8006bc0:	ec57 6b10 	vmov	r6, r7, d0
 8006bc4:	b095      	sub	sp, #84	; 0x54
 8006bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bcc:	9105      	str	r1, [sp, #20]
 8006bce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd8:	b975      	cbnz	r5, 8006bf8 <_dtoa_r+0x40>
 8006bda:	2010      	movs	r0, #16
 8006bdc:	f001 f94c 	bl	8007e78 <malloc>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6260      	str	r0, [r4, #36]	; 0x24
 8006be4:	b920      	cbnz	r0, 8006bf0 <_dtoa_r+0x38>
 8006be6:	4bb2      	ldr	r3, [pc, #712]	; (8006eb0 <_dtoa_r+0x2f8>)
 8006be8:	21ea      	movs	r1, #234	; 0xea
 8006bea:	48b2      	ldr	r0, [pc, #712]	; (8006eb4 <_dtoa_r+0x2fc>)
 8006bec:	f002 f874 	bl	8008cd8 <__assert_func>
 8006bf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bf4:	6005      	str	r5, [r0, #0]
 8006bf6:	60c5      	str	r5, [r0, #12]
 8006bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bfa:	6819      	ldr	r1, [r3, #0]
 8006bfc:	b151      	cbz	r1, 8006c14 <_dtoa_r+0x5c>
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	604a      	str	r2, [r1, #4]
 8006c02:	2301      	movs	r3, #1
 8006c04:	4093      	lsls	r3, r2
 8006c06:	608b      	str	r3, [r1, #8]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f001 f99d 	bl	8007f48 <_Bfree>
 8006c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	1e3b      	subs	r3, r7, #0
 8006c16:	bfb9      	ittee	lt
 8006c18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c1c:	9303      	strlt	r3, [sp, #12]
 8006c1e:	2300      	movge	r3, #0
 8006c20:	f8c8 3000 	strge.w	r3, [r8]
 8006c24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006c28:	4ba3      	ldr	r3, [pc, #652]	; (8006eb8 <_dtoa_r+0x300>)
 8006c2a:	bfbc      	itt	lt
 8006c2c:	2201      	movlt	r2, #1
 8006c2e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c32:	ea33 0309 	bics.w	r3, r3, r9
 8006c36:	d11b      	bne.n	8006c70 <_dtoa_r+0xb8>
 8006c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c44:	4333      	orrs	r3, r6
 8006c46:	f000 857a 	beq.w	800773e <_dtoa_r+0xb86>
 8006c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4c:	b963      	cbnz	r3, 8006c68 <_dtoa_r+0xb0>
 8006c4e:	4b9b      	ldr	r3, [pc, #620]	; (8006ebc <_dtoa_r+0x304>)
 8006c50:	e024      	b.n	8006c9c <_dtoa_r+0xe4>
 8006c52:	4b9b      	ldr	r3, [pc, #620]	; (8006ec0 <_dtoa_r+0x308>)
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	9800      	ldr	r0, [sp, #0]
 8006c5e:	b015      	add	sp, #84	; 0x54
 8006c60:	ecbd 8b02 	vpop	{d8}
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	4b94      	ldr	r3, [pc, #592]	; (8006ebc <_dtoa_r+0x304>)
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	3303      	adds	r3, #3
 8006c6e:	e7f3      	b.n	8006c58 <_dtoa_r+0xa0>
 8006c70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	ec51 0b17 	vmov	r0, r1, d7
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c80:	f7f9 ff3a 	bl	8000af8 <__aeabi_dcmpeq>
 8006c84:	4680      	mov	r8, r0
 8006c86:	b158      	cbz	r0, 8006ca0 <_dtoa_r+0xe8>
 8006c88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 8551 	beq.w	8007738 <_dtoa_r+0xb80>
 8006c96:	488b      	ldr	r0, [pc, #556]	; (8006ec4 <_dtoa_r+0x30c>)
 8006c98:	6018      	str	r0, [r3, #0]
 8006c9a:	1e43      	subs	r3, r0, #1
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	e7dd      	b.n	8006c5c <_dtoa_r+0xa4>
 8006ca0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006ca4:	aa12      	add	r2, sp, #72	; 0x48
 8006ca6:	a913      	add	r1, sp, #76	; 0x4c
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f001 fcf5 	bl	8008698 <__d2b>
 8006cae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cb2:	4683      	mov	fp, r0
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	d07c      	beq.n	8006db2 <_dtoa_r+0x1fa>
 8006cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006cc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006cca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cd2:	4b7d      	ldr	r3, [pc, #500]	; (8006ec8 <_dtoa_r+0x310>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 faed 	bl	80002b8 <__aeabi_dsub>
 8006cde:	a36e      	add	r3, pc, #440	; (adr r3, 8006e98 <_dtoa_r+0x2e0>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f7f9 fca0 	bl	8000628 <__aeabi_dmul>
 8006ce8:	a36d      	add	r3, pc, #436	; (adr r3, 8006ea0 <_dtoa_r+0x2e8>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fae5 	bl	80002bc <__adddf3>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	460f      	mov	r7, r1
 8006cf8:	f7f9 fc2c 	bl	8000554 <__aeabi_i2d>
 8006cfc:	a36a      	add	r3, pc, #424	; (adr r3, 8006ea8 <_dtoa_r+0x2f0>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f7f9 fc91 	bl	8000628 <__aeabi_dmul>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 fad5 	bl	80002bc <__adddf3>
 8006d12:	4606      	mov	r6, r0
 8006d14:	460f      	mov	r7, r1
 8006d16:	f7f9 ff37 	bl	8000b88 <__aeabi_d2iz>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7f9 fef2 	bl	8000b0c <__aeabi_dcmplt>
 8006d28:	b148      	cbz	r0, 8006d3e <_dtoa_r+0x186>
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f7f9 fc12 	bl	8000554 <__aeabi_i2d>
 8006d30:	4632      	mov	r2, r6
 8006d32:	463b      	mov	r3, r7
 8006d34:	f7f9 fee0 	bl	8000af8 <__aeabi_dcmpeq>
 8006d38:	b908      	cbnz	r0, 8006d3e <_dtoa_r+0x186>
 8006d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d3e:	f1ba 0f16 	cmp.w	sl, #22
 8006d42:	d854      	bhi.n	8006dee <_dtoa_r+0x236>
 8006d44:	4b61      	ldr	r3, [pc, #388]	; (8006ecc <_dtoa_r+0x314>)
 8006d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d52:	f7f9 fedb 	bl	8000b0c <__aeabi_dcmplt>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d04b      	beq.n	8006df2 <_dtoa_r+0x23a>
 8006d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d5e:	2300      	movs	r3, #0
 8006d60:	930e      	str	r3, [sp, #56]	; 0x38
 8006d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d64:	1b5d      	subs	r5, r3, r5
 8006d66:	1e6b      	subs	r3, r5, #1
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	bf43      	ittte	mi
 8006d6c:	2300      	movmi	r3, #0
 8006d6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d72:	9304      	strmi	r3, [sp, #16]
 8006d74:	f04f 0800 	movpl.w	r8, #0
 8006d78:	f1ba 0f00 	cmp.w	sl, #0
 8006d7c:	db3b      	blt.n	8006df6 <_dtoa_r+0x23e>
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006d84:	4453      	add	r3, sl
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9306      	str	r3, [sp, #24]
 8006d8c:	9b05      	ldr	r3, [sp, #20]
 8006d8e:	2b09      	cmp	r3, #9
 8006d90:	d869      	bhi.n	8006e66 <_dtoa_r+0x2ae>
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	bfc4      	itt	gt
 8006d96:	3b04      	subgt	r3, #4
 8006d98:	9305      	strgt	r3, [sp, #20]
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8006da0:	bfcc      	ite	gt
 8006da2:	2500      	movgt	r5, #0
 8006da4:	2501      	movle	r5, #1
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d869      	bhi.n	8006e7e <_dtoa_r+0x2c6>
 8006daa:	e8df f003 	tbb	[pc, r3]
 8006dae:	4e2c      	.short	0x4e2c
 8006db0:	5a4c      	.short	0x5a4c
 8006db2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006db6:	441d      	add	r5, r3
 8006db8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	bfc1      	itttt	gt
 8006dc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006dc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006dcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006dd0:	bfda      	itte	le
 8006dd2:	f1c3 0320 	rsble	r3, r3, #32
 8006dd6:	fa06 f003 	lslle.w	r0, r6, r3
 8006dda:	4318      	orrgt	r0, r3
 8006ddc:	f7f9 fbaa 	bl	8000534 <__aeabi_ui2d>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4606      	mov	r6, r0
 8006de4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006de8:	3d01      	subs	r5, #1
 8006dea:	9310      	str	r3, [sp, #64]	; 0x40
 8006dec:	e771      	b.n	8006cd2 <_dtoa_r+0x11a>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e7b6      	b.n	8006d60 <_dtoa_r+0x1a8>
 8006df2:	900e      	str	r0, [sp, #56]	; 0x38
 8006df4:	e7b5      	b.n	8006d62 <_dtoa_r+0x1aa>
 8006df6:	f1ca 0300 	rsb	r3, sl, #0
 8006dfa:	9306      	str	r3, [sp, #24]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	eba8 080a 	sub.w	r8, r8, sl
 8006e02:	930d      	str	r3, [sp, #52]	; 0x34
 8006e04:	e7c2      	b.n	8006d8c <_dtoa_r+0x1d4>
 8006e06:	2300      	movs	r3, #0
 8006e08:	9308      	str	r3, [sp, #32]
 8006e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dc39      	bgt.n	8006e84 <_dtoa_r+0x2cc>
 8006e10:	f04f 0901 	mov.w	r9, #1
 8006e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e18:	464b      	mov	r3, r9
 8006e1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e20:	2200      	movs	r2, #0
 8006e22:	6042      	str	r2, [r0, #4]
 8006e24:	2204      	movs	r2, #4
 8006e26:	f102 0614 	add.w	r6, r2, #20
 8006e2a:	429e      	cmp	r6, r3
 8006e2c:	6841      	ldr	r1, [r0, #4]
 8006e2e:	d92f      	bls.n	8006e90 <_dtoa_r+0x2d8>
 8006e30:	4620      	mov	r0, r4
 8006e32:	f001 f849 	bl	8007ec8 <_Balloc>
 8006e36:	9000      	str	r0, [sp, #0]
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d14b      	bne.n	8006ed4 <_dtoa_r+0x31c>
 8006e3c:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <_dtoa_r+0x318>)
 8006e3e:	4602      	mov	r2, r0
 8006e40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e44:	e6d1      	b.n	8006bea <_dtoa_r+0x32>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e7de      	b.n	8006e08 <_dtoa_r+0x250>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9308      	str	r3, [sp, #32]
 8006e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e50:	eb0a 0903 	add.w	r9, sl, r3
 8006e54:	f109 0301 	add.w	r3, r9, #1
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	bfb8      	it	lt
 8006e5e:	2301      	movlt	r3, #1
 8006e60:	e7dd      	b.n	8006e1e <_dtoa_r+0x266>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7f2      	b.n	8006e4c <_dtoa_r+0x294>
 8006e66:	2501      	movs	r5, #1
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9305      	str	r3, [sp, #20]
 8006e6c:	9508      	str	r5, [sp, #32]
 8006e6e:	f04f 39ff 	mov.w	r9, #4294967295
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e78:	2312      	movs	r3, #18
 8006e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e7c:	e7cf      	b.n	8006e1e <_dtoa_r+0x266>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	9308      	str	r3, [sp, #32]
 8006e82:	e7f4      	b.n	8006e6e <_dtoa_r+0x2b6>
 8006e84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e88:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	e7c6      	b.n	8006e1e <_dtoa_r+0x266>
 8006e90:	3101      	adds	r1, #1
 8006e92:	6041      	str	r1, [r0, #4]
 8006e94:	0052      	lsls	r2, r2, #1
 8006e96:	e7c6      	b.n	8006e26 <_dtoa_r+0x26e>
 8006e98:	636f4361 	.word	0x636f4361
 8006e9c:	3fd287a7 	.word	0x3fd287a7
 8006ea0:	8b60c8b3 	.word	0x8b60c8b3
 8006ea4:	3fc68a28 	.word	0x3fc68a28
 8006ea8:	509f79fb 	.word	0x509f79fb
 8006eac:	3fd34413 	.word	0x3fd34413
 8006eb0:	08009b06 	.word	0x08009b06
 8006eb4:	08009b1d 	.word	0x08009b1d
 8006eb8:	7ff00000 	.word	0x7ff00000
 8006ebc:	08009b02 	.word	0x08009b02
 8006ec0:	08009af9 	.word	0x08009af9
 8006ec4:	08009985 	.word	0x08009985
 8006ec8:	3ff80000 	.word	0x3ff80000
 8006ecc:	08009c98 	.word	0x08009c98
 8006ed0:	08009b7c 	.word	0x08009b7c
 8006ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed6:	9a00      	ldr	r2, [sp, #0]
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	2b0e      	cmp	r3, #14
 8006ede:	f200 80ad 	bhi.w	800703c <_dtoa_r+0x484>
 8006ee2:	2d00      	cmp	r5, #0
 8006ee4:	f000 80aa 	beq.w	800703c <_dtoa_r+0x484>
 8006ee8:	f1ba 0f00 	cmp.w	sl, #0
 8006eec:	dd36      	ble.n	8006f5c <_dtoa_r+0x3a4>
 8006eee:	4ac3      	ldr	r2, [pc, #780]	; (80071fc <_dtoa_r+0x644>)
 8006ef0:	f00a 030f 	and.w	r3, sl, #15
 8006ef4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ef8:	ed93 7b00 	vldr	d7, [r3]
 8006efc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006f04:	eeb0 8a47 	vmov.f32	s16, s14
 8006f08:	eef0 8a67 	vmov.f32	s17, s15
 8006f0c:	d016      	beq.n	8006f3c <_dtoa_r+0x384>
 8006f0e:	4bbc      	ldr	r3, [pc, #752]	; (8007200 <_dtoa_r+0x648>)
 8006f10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f18:	f7f9 fcb0 	bl	800087c <__aeabi_ddiv>
 8006f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f20:	f007 070f 	and.w	r7, r7, #15
 8006f24:	2503      	movs	r5, #3
 8006f26:	4eb6      	ldr	r6, [pc, #728]	; (8007200 <_dtoa_r+0x648>)
 8006f28:	b957      	cbnz	r7, 8006f40 <_dtoa_r+0x388>
 8006f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2e:	ec53 2b18 	vmov	r2, r3, d8
 8006f32:	f7f9 fca3 	bl	800087c <__aeabi_ddiv>
 8006f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3a:	e029      	b.n	8006f90 <_dtoa_r+0x3d8>
 8006f3c:	2502      	movs	r5, #2
 8006f3e:	e7f2      	b.n	8006f26 <_dtoa_r+0x36e>
 8006f40:	07f9      	lsls	r1, r7, #31
 8006f42:	d508      	bpl.n	8006f56 <_dtoa_r+0x39e>
 8006f44:	ec51 0b18 	vmov	r0, r1, d8
 8006f48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f4c:	f7f9 fb6c 	bl	8000628 <__aeabi_dmul>
 8006f50:	ec41 0b18 	vmov	d8, r0, r1
 8006f54:	3501      	adds	r5, #1
 8006f56:	107f      	asrs	r7, r7, #1
 8006f58:	3608      	adds	r6, #8
 8006f5a:	e7e5      	b.n	8006f28 <_dtoa_r+0x370>
 8006f5c:	f000 80a6 	beq.w	80070ac <_dtoa_r+0x4f4>
 8006f60:	f1ca 0600 	rsb	r6, sl, #0
 8006f64:	4ba5      	ldr	r3, [pc, #660]	; (80071fc <_dtoa_r+0x644>)
 8006f66:	4fa6      	ldr	r7, [pc, #664]	; (8007200 <_dtoa_r+0x648>)
 8006f68:	f006 020f 	and.w	r2, r6, #15
 8006f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f78:	f7f9 fb56 	bl	8000628 <__aeabi_dmul>
 8006f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f80:	1136      	asrs	r6, r6, #4
 8006f82:	2300      	movs	r3, #0
 8006f84:	2502      	movs	r5, #2
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	f040 8085 	bne.w	8007096 <_dtoa_r+0x4de>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1d2      	bne.n	8006f36 <_dtoa_r+0x37e>
 8006f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 808c 	beq.w	80070b0 <_dtoa_r+0x4f8>
 8006f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f9c:	4b99      	ldr	r3, [pc, #612]	; (8007204 <_dtoa_r+0x64c>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	f7f9 fdb2 	bl	8000b0c <__aeabi_dcmplt>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f000 8081 	beq.w	80070b0 <_dtoa_r+0x4f8>
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d07d      	beq.n	80070b0 <_dtoa_r+0x4f8>
 8006fb4:	f1b9 0f00 	cmp.w	r9, #0
 8006fb8:	dd3c      	ble.n	8007034 <_dtoa_r+0x47c>
 8006fba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006fbe:	9307      	str	r3, [sp, #28]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4b91      	ldr	r3, [pc, #580]	; (8007208 <_dtoa_r+0x650>)
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 fb2e 	bl	8000628 <__aeabi_dmul>
 8006fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006fd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f7f9 faba 	bl	8000554 <__aeabi_i2d>
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	f7f9 fb20 	bl	8000628 <__aeabi_dmul>
 8006fe8:	4b88      	ldr	r3, [pc, #544]	; (800720c <_dtoa_r+0x654>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 f966 	bl	80002bc <__adddf3>
 8006ff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff8:	9303      	str	r3, [sp, #12]
 8006ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d15c      	bne.n	80070ba <_dtoa_r+0x502>
 8007000:	4b83      	ldr	r3, [pc, #524]	; (8007210 <_dtoa_r+0x658>)
 8007002:	2200      	movs	r2, #0
 8007004:	4630      	mov	r0, r6
 8007006:	4639      	mov	r1, r7
 8007008:	f7f9 f956 	bl	80002b8 <__aeabi_dsub>
 800700c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007010:	4606      	mov	r6, r0
 8007012:	460f      	mov	r7, r1
 8007014:	f7f9 fd98 	bl	8000b48 <__aeabi_dcmpgt>
 8007018:	2800      	cmp	r0, #0
 800701a:	f040 8296 	bne.w	800754a <_dtoa_r+0x992>
 800701e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007022:	4630      	mov	r0, r6
 8007024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 fd6f 	bl	8000b0c <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	f040 8288 	bne.w	8007544 <_dtoa_r+0x98c>
 8007034:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800703c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800703e:	2b00      	cmp	r3, #0
 8007040:	f2c0 8158 	blt.w	80072f4 <_dtoa_r+0x73c>
 8007044:	f1ba 0f0e 	cmp.w	sl, #14
 8007048:	f300 8154 	bgt.w	80072f4 <_dtoa_r+0x73c>
 800704c:	4b6b      	ldr	r3, [pc, #428]	; (80071fc <_dtoa_r+0x644>)
 800704e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007052:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	f280 80e3 	bge.w	8007224 <_dtoa_r+0x66c>
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	f300 80df 	bgt.w	8007224 <_dtoa_r+0x66c>
 8007066:	f040 826d 	bne.w	8007544 <_dtoa_r+0x98c>
 800706a:	4b69      	ldr	r3, [pc, #420]	; (8007210 <_dtoa_r+0x658>)
 800706c:	2200      	movs	r2, #0
 800706e:	4640      	mov	r0, r8
 8007070:	4649      	mov	r1, r9
 8007072:	f7f9 fad9 	bl	8000628 <__aeabi_dmul>
 8007076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800707a:	f7f9 fd5b 	bl	8000b34 <__aeabi_dcmpge>
 800707e:	9e01      	ldr	r6, [sp, #4]
 8007080:	4637      	mov	r7, r6
 8007082:	2800      	cmp	r0, #0
 8007084:	f040 8243 	bne.w	800750e <_dtoa_r+0x956>
 8007088:	9d00      	ldr	r5, [sp, #0]
 800708a:	2331      	movs	r3, #49	; 0x31
 800708c:	f805 3b01 	strb.w	r3, [r5], #1
 8007090:	f10a 0a01 	add.w	sl, sl, #1
 8007094:	e23f      	b.n	8007516 <_dtoa_r+0x95e>
 8007096:	07f2      	lsls	r2, r6, #31
 8007098:	d505      	bpl.n	80070a6 <_dtoa_r+0x4ee>
 800709a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709e:	f7f9 fac3 	bl	8000628 <__aeabi_dmul>
 80070a2:	3501      	adds	r5, #1
 80070a4:	2301      	movs	r3, #1
 80070a6:	1076      	asrs	r6, r6, #1
 80070a8:	3708      	adds	r7, #8
 80070aa:	e76c      	b.n	8006f86 <_dtoa_r+0x3ce>
 80070ac:	2502      	movs	r5, #2
 80070ae:	e76f      	b.n	8006f90 <_dtoa_r+0x3d8>
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80070b6:	930c      	str	r3, [sp, #48]	; 0x30
 80070b8:	e78d      	b.n	8006fd6 <_dtoa_r+0x41e>
 80070ba:	9900      	ldr	r1, [sp, #0]
 80070bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80070be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070c0:	4b4e      	ldr	r3, [pc, #312]	; (80071fc <_dtoa_r+0x644>)
 80070c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070c6:	4401      	add	r1, r0
 80070c8:	9102      	str	r1, [sp, #8]
 80070ca:	9908      	ldr	r1, [sp, #32]
 80070cc:	eeb0 8a47 	vmov.f32	s16, s14
 80070d0:	eef0 8a67 	vmov.f32	s17, s15
 80070d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070dc:	2900      	cmp	r1, #0
 80070de:	d045      	beq.n	800716c <_dtoa_r+0x5b4>
 80070e0:	494c      	ldr	r1, [pc, #304]	; (8007214 <_dtoa_r+0x65c>)
 80070e2:	2000      	movs	r0, #0
 80070e4:	f7f9 fbca 	bl	800087c <__aeabi_ddiv>
 80070e8:	ec53 2b18 	vmov	r2, r3, d8
 80070ec:	f7f9 f8e4 	bl	80002b8 <__aeabi_dsub>
 80070f0:	9d00      	ldr	r5, [sp, #0]
 80070f2:	ec41 0b18 	vmov	d8, r0, r1
 80070f6:	4639      	mov	r1, r7
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7f9 fd45 	bl	8000b88 <__aeabi_d2iz>
 80070fe:	900c      	str	r0, [sp, #48]	; 0x30
 8007100:	f7f9 fa28 	bl	8000554 <__aeabi_i2d>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 f8d4 	bl	80002b8 <__aeabi_dsub>
 8007110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007112:	3330      	adds	r3, #48	; 0x30
 8007114:	f805 3b01 	strb.w	r3, [r5], #1
 8007118:	ec53 2b18 	vmov	r2, r3, d8
 800711c:	4606      	mov	r6, r0
 800711e:	460f      	mov	r7, r1
 8007120:	f7f9 fcf4 	bl	8000b0c <__aeabi_dcmplt>
 8007124:	2800      	cmp	r0, #0
 8007126:	d165      	bne.n	80071f4 <_dtoa_r+0x63c>
 8007128:	4632      	mov	r2, r6
 800712a:	463b      	mov	r3, r7
 800712c:	4935      	ldr	r1, [pc, #212]	; (8007204 <_dtoa_r+0x64c>)
 800712e:	2000      	movs	r0, #0
 8007130:	f7f9 f8c2 	bl	80002b8 <__aeabi_dsub>
 8007134:	ec53 2b18 	vmov	r2, r3, d8
 8007138:	f7f9 fce8 	bl	8000b0c <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	f040 80b9 	bne.w	80072b4 <_dtoa_r+0x6fc>
 8007142:	9b02      	ldr	r3, [sp, #8]
 8007144:	429d      	cmp	r5, r3
 8007146:	f43f af75 	beq.w	8007034 <_dtoa_r+0x47c>
 800714a:	4b2f      	ldr	r3, [pc, #188]	; (8007208 <_dtoa_r+0x650>)
 800714c:	ec51 0b18 	vmov	r0, r1, d8
 8007150:	2200      	movs	r2, #0
 8007152:	f7f9 fa69 	bl	8000628 <__aeabi_dmul>
 8007156:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <_dtoa_r+0x650>)
 8007158:	ec41 0b18 	vmov	d8, r0, r1
 800715c:	2200      	movs	r2, #0
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 fa61 	bl	8000628 <__aeabi_dmul>
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	e7c4      	b.n	80070f6 <_dtoa_r+0x53e>
 800716c:	ec51 0b17 	vmov	r0, r1, d7
 8007170:	f7f9 fa5a 	bl	8000628 <__aeabi_dmul>
 8007174:	9b02      	ldr	r3, [sp, #8]
 8007176:	9d00      	ldr	r5, [sp, #0]
 8007178:	930c      	str	r3, [sp, #48]	; 0x30
 800717a:	ec41 0b18 	vmov	d8, r0, r1
 800717e:	4639      	mov	r1, r7
 8007180:	4630      	mov	r0, r6
 8007182:	f7f9 fd01 	bl	8000b88 <__aeabi_d2iz>
 8007186:	9011      	str	r0, [sp, #68]	; 0x44
 8007188:	f7f9 f9e4 	bl	8000554 <__aeabi_i2d>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4630      	mov	r0, r6
 8007192:	4639      	mov	r1, r7
 8007194:	f7f9 f890 	bl	80002b8 <__aeabi_dsub>
 8007198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800719a:	3330      	adds	r3, #48	; 0x30
 800719c:	f805 3b01 	strb.w	r3, [r5], #1
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	429d      	cmp	r5, r3
 80071a4:	4606      	mov	r6, r0
 80071a6:	460f      	mov	r7, r1
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	d134      	bne.n	8007218 <_dtoa_r+0x660>
 80071ae:	4b19      	ldr	r3, [pc, #100]	; (8007214 <_dtoa_r+0x65c>)
 80071b0:	ec51 0b18 	vmov	r0, r1, d8
 80071b4:	f7f9 f882 	bl	80002bc <__adddf3>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fcc2 	bl	8000b48 <__aeabi_dcmpgt>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d175      	bne.n	80072b4 <_dtoa_r+0x6fc>
 80071c8:	ec53 2b18 	vmov	r2, r3, d8
 80071cc:	4911      	ldr	r1, [pc, #68]	; (8007214 <_dtoa_r+0x65c>)
 80071ce:	2000      	movs	r0, #0
 80071d0:	f7f9 f872 	bl	80002b8 <__aeabi_dsub>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 fc96 	bl	8000b0c <__aeabi_dcmplt>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f43f af27 	beq.w	8007034 <_dtoa_r+0x47c>
 80071e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071e8:	1e6b      	subs	r3, r5, #1
 80071ea:	930c      	str	r3, [sp, #48]	; 0x30
 80071ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071f0:	2b30      	cmp	r3, #48	; 0x30
 80071f2:	d0f8      	beq.n	80071e6 <_dtoa_r+0x62e>
 80071f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071f8:	e04a      	b.n	8007290 <_dtoa_r+0x6d8>
 80071fa:	bf00      	nop
 80071fc:	08009c98 	.word	0x08009c98
 8007200:	08009c70 	.word	0x08009c70
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	40240000 	.word	0x40240000
 800720c:	401c0000 	.word	0x401c0000
 8007210:	40140000 	.word	0x40140000
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	4baf      	ldr	r3, [pc, #700]	; (80074d8 <_dtoa_r+0x920>)
 800721a:	f7f9 fa05 	bl	8000628 <__aeabi_dmul>
 800721e:	4606      	mov	r6, r0
 8007220:	460f      	mov	r7, r1
 8007222:	e7ac      	b.n	800717e <_dtoa_r+0x5c6>
 8007224:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007228:	9d00      	ldr	r5, [sp, #0]
 800722a:	4642      	mov	r2, r8
 800722c:	464b      	mov	r3, r9
 800722e:	4630      	mov	r0, r6
 8007230:	4639      	mov	r1, r7
 8007232:	f7f9 fb23 	bl	800087c <__aeabi_ddiv>
 8007236:	f7f9 fca7 	bl	8000b88 <__aeabi_d2iz>
 800723a:	9002      	str	r0, [sp, #8]
 800723c:	f7f9 f98a 	bl	8000554 <__aeabi_i2d>
 8007240:	4642      	mov	r2, r8
 8007242:	464b      	mov	r3, r9
 8007244:	f7f9 f9f0 	bl	8000628 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f7f9 f832 	bl	80002b8 <__aeabi_dsub>
 8007254:	9e02      	ldr	r6, [sp, #8]
 8007256:	9f01      	ldr	r7, [sp, #4]
 8007258:	3630      	adds	r6, #48	; 0x30
 800725a:	f805 6b01 	strb.w	r6, [r5], #1
 800725e:	9e00      	ldr	r6, [sp, #0]
 8007260:	1bae      	subs	r6, r5, r6
 8007262:	42b7      	cmp	r7, r6
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	d137      	bne.n	80072da <_dtoa_r+0x722>
 800726a:	f7f9 f827 	bl	80002bc <__adddf3>
 800726e:	4642      	mov	r2, r8
 8007270:	464b      	mov	r3, r9
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	f7f9 fc67 	bl	8000b48 <__aeabi_dcmpgt>
 800727a:	b9c8      	cbnz	r0, 80072b0 <_dtoa_r+0x6f8>
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	4630      	mov	r0, r6
 8007282:	4639      	mov	r1, r7
 8007284:	f7f9 fc38 	bl	8000af8 <__aeabi_dcmpeq>
 8007288:	b110      	cbz	r0, 8007290 <_dtoa_r+0x6d8>
 800728a:	9b02      	ldr	r3, [sp, #8]
 800728c:	07d9      	lsls	r1, r3, #31
 800728e:	d40f      	bmi.n	80072b0 <_dtoa_r+0x6f8>
 8007290:	4620      	mov	r0, r4
 8007292:	4659      	mov	r1, fp
 8007294:	f000 fe58 	bl	8007f48 <_Bfree>
 8007298:	2300      	movs	r3, #0
 800729a:	702b      	strb	r3, [r5, #0]
 800729c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800729e:	f10a 0001 	add.w	r0, sl, #1
 80072a2:	6018      	str	r0, [r3, #0]
 80072a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f43f acd8 	beq.w	8006c5c <_dtoa_r+0xa4>
 80072ac:	601d      	str	r5, [r3, #0]
 80072ae:	e4d5      	b.n	8006c5c <_dtoa_r+0xa4>
 80072b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80072b4:	462b      	mov	r3, r5
 80072b6:	461d      	mov	r5, r3
 80072b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072bc:	2a39      	cmp	r2, #57	; 0x39
 80072be:	d108      	bne.n	80072d2 <_dtoa_r+0x71a>
 80072c0:	9a00      	ldr	r2, [sp, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d1f7      	bne.n	80072b6 <_dtoa_r+0x6fe>
 80072c6:	9a07      	ldr	r2, [sp, #28]
 80072c8:	9900      	ldr	r1, [sp, #0]
 80072ca:	3201      	adds	r2, #1
 80072cc:	9207      	str	r2, [sp, #28]
 80072ce:	2230      	movs	r2, #48	; 0x30
 80072d0:	700a      	strb	r2, [r1, #0]
 80072d2:	781a      	ldrb	r2, [r3, #0]
 80072d4:	3201      	adds	r2, #1
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	e78c      	b.n	80071f4 <_dtoa_r+0x63c>
 80072da:	4b7f      	ldr	r3, [pc, #508]	; (80074d8 <_dtoa_r+0x920>)
 80072dc:	2200      	movs	r2, #0
 80072de:	f7f9 f9a3 	bl	8000628 <__aeabi_dmul>
 80072e2:	2200      	movs	r2, #0
 80072e4:	2300      	movs	r3, #0
 80072e6:	4606      	mov	r6, r0
 80072e8:	460f      	mov	r7, r1
 80072ea:	f7f9 fc05 	bl	8000af8 <__aeabi_dcmpeq>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d09b      	beq.n	800722a <_dtoa_r+0x672>
 80072f2:	e7cd      	b.n	8007290 <_dtoa_r+0x6d8>
 80072f4:	9a08      	ldr	r2, [sp, #32]
 80072f6:	2a00      	cmp	r2, #0
 80072f8:	f000 80c4 	beq.w	8007484 <_dtoa_r+0x8cc>
 80072fc:	9a05      	ldr	r2, [sp, #20]
 80072fe:	2a01      	cmp	r2, #1
 8007300:	f300 80a8 	bgt.w	8007454 <_dtoa_r+0x89c>
 8007304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007306:	2a00      	cmp	r2, #0
 8007308:	f000 80a0 	beq.w	800744c <_dtoa_r+0x894>
 800730c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007310:	9e06      	ldr	r6, [sp, #24]
 8007312:	4645      	mov	r5, r8
 8007314:	9a04      	ldr	r2, [sp, #16]
 8007316:	2101      	movs	r1, #1
 8007318:	441a      	add	r2, r3
 800731a:	4620      	mov	r0, r4
 800731c:	4498      	add	r8, r3
 800731e:	9204      	str	r2, [sp, #16]
 8007320:	f000 ff18 	bl	8008154 <__i2b>
 8007324:	4607      	mov	r7, r0
 8007326:	2d00      	cmp	r5, #0
 8007328:	dd0b      	ble.n	8007342 <_dtoa_r+0x78a>
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dd08      	ble.n	8007342 <_dtoa_r+0x78a>
 8007330:	42ab      	cmp	r3, r5
 8007332:	9a04      	ldr	r2, [sp, #16]
 8007334:	bfa8      	it	ge
 8007336:	462b      	movge	r3, r5
 8007338:	eba8 0803 	sub.w	r8, r8, r3
 800733c:	1aed      	subs	r5, r5, r3
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	9b06      	ldr	r3, [sp, #24]
 8007344:	b1fb      	cbz	r3, 8007386 <_dtoa_r+0x7ce>
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 809f 	beq.w	800748c <_dtoa_r+0x8d4>
 800734e:	2e00      	cmp	r6, #0
 8007350:	dd11      	ble.n	8007376 <_dtoa_r+0x7be>
 8007352:	4639      	mov	r1, r7
 8007354:	4632      	mov	r2, r6
 8007356:	4620      	mov	r0, r4
 8007358:	f000 ffb8 	bl	80082cc <__pow5mult>
 800735c:	465a      	mov	r2, fp
 800735e:	4601      	mov	r1, r0
 8007360:	4607      	mov	r7, r0
 8007362:	4620      	mov	r0, r4
 8007364:	f000 ff0c 	bl	8008180 <__multiply>
 8007368:	4659      	mov	r1, fp
 800736a:	9007      	str	r0, [sp, #28]
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fdeb 	bl	8007f48 <_Bfree>
 8007372:	9b07      	ldr	r3, [sp, #28]
 8007374:	469b      	mov	fp, r3
 8007376:	9b06      	ldr	r3, [sp, #24]
 8007378:	1b9a      	subs	r2, r3, r6
 800737a:	d004      	beq.n	8007386 <_dtoa_r+0x7ce>
 800737c:	4659      	mov	r1, fp
 800737e:	4620      	mov	r0, r4
 8007380:	f000 ffa4 	bl	80082cc <__pow5mult>
 8007384:	4683      	mov	fp, r0
 8007386:	2101      	movs	r1, #1
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fee3 	bl	8008154 <__i2b>
 800738e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007390:	2b00      	cmp	r3, #0
 8007392:	4606      	mov	r6, r0
 8007394:	dd7c      	ble.n	8007490 <_dtoa_r+0x8d8>
 8007396:	461a      	mov	r2, r3
 8007398:	4601      	mov	r1, r0
 800739a:	4620      	mov	r0, r4
 800739c:	f000 ff96 	bl	80082cc <__pow5mult>
 80073a0:	9b05      	ldr	r3, [sp, #20]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	4606      	mov	r6, r0
 80073a6:	dd76      	ble.n	8007496 <_dtoa_r+0x8de>
 80073a8:	2300      	movs	r3, #0
 80073aa:	9306      	str	r3, [sp, #24]
 80073ac:	6933      	ldr	r3, [r6, #16]
 80073ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073b2:	6918      	ldr	r0, [r3, #16]
 80073b4:	f000 fe7e 	bl	80080b4 <__hi0bits>
 80073b8:	f1c0 0020 	rsb	r0, r0, #32
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	4418      	add	r0, r3
 80073c0:	f010 001f 	ands.w	r0, r0, #31
 80073c4:	f000 8086 	beq.w	80074d4 <_dtoa_r+0x91c>
 80073c8:	f1c0 0320 	rsb	r3, r0, #32
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	dd7f      	ble.n	80074d0 <_dtoa_r+0x918>
 80073d0:	f1c0 001c 	rsb	r0, r0, #28
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	4403      	add	r3, r0
 80073d8:	4480      	add	r8, r0
 80073da:	4405      	add	r5, r0
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	f1b8 0f00 	cmp.w	r8, #0
 80073e2:	dd05      	ble.n	80073f0 <_dtoa_r+0x838>
 80073e4:	4659      	mov	r1, fp
 80073e6:	4642      	mov	r2, r8
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 ffc9 	bl	8008380 <__lshift>
 80073ee:	4683      	mov	fp, r0
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd05      	ble.n	8007402 <_dtoa_r+0x84a>
 80073f6:	4631      	mov	r1, r6
 80073f8:	461a      	mov	r2, r3
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 ffc0 	bl	8008380 <__lshift>
 8007400:	4606      	mov	r6, r0
 8007402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	d069      	beq.n	80074dc <_dtoa_r+0x924>
 8007408:	4631      	mov	r1, r6
 800740a:	4658      	mov	r0, fp
 800740c:	f001 f824 	bl	8008458 <__mcmp>
 8007410:	2800      	cmp	r0, #0
 8007412:	da63      	bge.n	80074dc <_dtoa_r+0x924>
 8007414:	2300      	movs	r3, #0
 8007416:	4659      	mov	r1, fp
 8007418:	220a      	movs	r2, #10
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fdb6 	bl	8007f8c <__multadd>
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007426:	4683      	mov	fp, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 818f 	beq.w	800774c <_dtoa_r+0xb94>
 800742e:	4639      	mov	r1, r7
 8007430:	2300      	movs	r3, #0
 8007432:	220a      	movs	r2, #10
 8007434:	4620      	mov	r0, r4
 8007436:	f000 fda9 	bl	8007f8c <__multadd>
 800743a:	f1b9 0f00 	cmp.w	r9, #0
 800743e:	4607      	mov	r7, r0
 8007440:	f300 808e 	bgt.w	8007560 <_dtoa_r+0x9a8>
 8007444:	9b05      	ldr	r3, [sp, #20]
 8007446:	2b02      	cmp	r3, #2
 8007448:	dc50      	bgt.n	80074ec <_dtoa_r+0x934>
 800744a:	e089      	b.n	8007560 <_dtoa_r+0x9a8>
 800744c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800744e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007452:	e75d      	b.n	8007310 <_dtoa_r+0x758>
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	1e5e      	subs	r6, r3, #1
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	42b3      	cmp	r3, r6
 800745c:	bfbf      	itttt	lt
 800745e:	9b06      	ldrlt	r3, [sp, #24]
 8007460:	9606      	strlt	r6, [sp, #24]
 8007462:	1af2      	sublt	r2, r6, r3
 8007464:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007466:	bfb6      	itet	lt
 8007468:	189b      	addlt	r3, r3, r2
 800746a:	1b9e      	subge	r6, r3, r6
 800746c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	bfb8      	it	lt
 8007472:	2600      	movlt	r6, #0
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfb5      	itete	lt
 8007478:	eba8 0503 	sublt.w	r5, r8, r3
 800747c:	9b01      	ldrge	r3, [sp, #4]
 800747e:	2300      	movlt	r3, #0
 8007480:	4645      	movge	r5, r8
 8007482:	e747      	b.n	8007314 <_dtoa_r+0x75c>
 8007484:	9e06      	ldr	r6, [sp, #24]
 8007486:	9f08      	ldr	r7, [sp, #32]
 8007488:	4645      	mov	r5, r8
 800748a:	e74c      	b.n	8007326 <_dtoa_r+0x76e>
 800748c:	9a06      	ldr	r2, [sp, #24]
 800748e:	e775      	b.n	800737c <_dtoa_r+0x7c4>
 8007490:	9b05      	ldr	r3, [sp, #20]
 8007492:	2b01      	cmp	r3, #1
 8007494:	dc18      	bgt.n	80074c8 <_dtoa_r+0x910>
 8007496:	9b02      	ldr	r3, [sp, #8]
 8007498:	b9b3      	cbnz	r3, 80074c8 <_dtoa_r+0x910>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074a0:	b9a3      	cbnz	r3, 80074cc <_dtoa_r+0x914>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074a8:	0d1b      	lsrs	r3, r3, #20
 80074aa:	051b      	lsls	r3, r3, #20
 80074ac:	b12b      	cbz	r3, 80074ba <_dtoa_r+0x902>
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	3301      	adds	r3, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	f108 0801 	add.w	r8, r8, #1
 80074b8:	2301      	movs	r3, #1
 80074ba:	9306      	str	r3, [sp, #24]
 80074bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f af74 	bne.w	80073ac <_dtoa_r+0x7f4>
 80074c4:	2001      	movs	r0, #1
 80074c6:	e779      	b.n	80073bc <_dtoa_r+0x804>
 80074c8:	2300      	movs	r3, #0
 80074ca:	e7f6      	b.n	80074ba <_dtoa_r+0x902>
 80074cc:	9b02      	ldr	r3, [sp, #8]
 80074ce:	e7f4      	b.n	80074ba <_dtoa_r+0x902>
 80074d0:	d085      	beq.n	80073de <_dtoa_r+0x826>
 80074d2:	4618      	mov	r0, r3
 80074d4:	301c      	adds	r0, #28
 80074d6:	e77d      	b.n	80073d4 <_dtoa_r+0x81c>
 80074d8:	40240000 	.word	0x40240000
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dc38      	bgt.n	8007554 <_dtoa_r+0x99c>
 80074e2:	9b05      	ldr	r3, [sp, #20]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	dd35      	ble.n	8007554 <_dtoa_r+0x99c>
 80074e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074ec:	f1b9 0f00 	cmp.w	r9, #0
 80074f0:	d10d      	bne.n	800750e <_dtoa_r+0x956>
 80074f2:	4631      	mov	r1, r6
 80074f4:	464b      	mov	r3, r9
 80074f6:	2205      	movs	r2, #5
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fd47 	bl	8007f8c <__multadd>
 80074fe:	4601      	mov	r1, r0
 8007500:	4606      	mov	r6, r0
 8007502:	4658      	mov	r0, fp
 8007504:	f000 ffa8 	bl	8008458 <__mcmp>
 8007508:	2800      	cmp	r0, #0
 800750a:	f73f adbd 	bgt.w	8007088 <_dtoa_r+0x4d0>
 800750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007510:	9d00      	ldr	r5, [sp, #0]
 8007512:	ea6f 0a03 	mvn.w	sl, r3
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	4631      	mov	r1, r6
 800751c:	4620      	mov	r0, r4
 800751e:	f000 fd13 	bl	8007f48 <_Bfree>
 8007522:	2f00      	cmp	r7, #0
 8007524:	f43f aeb4 	beq.w	8007290 <_dtoa_r+0x6d8>
 8007528:	f1b8 0f00 	cmp.w	r8, #0
 800752c:	d005      	beq.n	800753a <_dtoa_r+0x982>
 800752e:	45b8      	cmp	r8, r7
 8007530:	d003      	beq.n	800753a <_dtoa_r+0x982>
 8007532:	4641      	mov	r1, r8
 8007534:	4620      	mov	r0, r4
 8007536:	f000 fd07 	bl	8007f48 <_Bfree>
 800753a:	4639      	mov	r1, r7
 800753c:	4620      	mov	r0, r4
 800753e:	f000 fd03 	bl	8007f48 <_Bfree>
 8007542:	e6a5      	b.n	8007290 <_dtoa_r+0x6d8>
 8007544:	2600      	movs	r6, #0
 8007546:	4637      	mov	r7, r6
 8007548:	e7e1      	b.n	800750e <_dtoa_r+0x956>
 800754a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800754c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007550:	4637      	mov	r7, r6
 8007552:	e599      	b.n	8007088 <_dtoa_r+0x4d0>
 8007554:	9b08      	ldr	r3, [sp, #32]
 8007556:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80fd 	beq.w	800775a <_dtoa_r+0xba2>
 8007560:	2d00      	cmp	r5, #0
 8007562:	dd05      	ble.n	8007570 <_dtoa_r+0x9b8>
 8007564:	4639      	mov	r1, r7
 8007566:	462a      	mov	r2, r5
 8007568:	4620      	mov	r0, r4
 800756a:	f000 ff09 	bl	8008380 <__lshift>
 800756e:	4607      	mov	r7, r0
 8007570:	9b06      	ldr	r3, [sp, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d05c      	beq.n	8007630 <_dtoa_r+0xa78>
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fca5 	bl	8007ec8 <_Balloc>
 800757e:	4605      	mov	r5, r0
 8007580:	b928      	cbnz	r0, 800758e <_dtoa_r+0x9d6>
 8007582:	4b80      	ldr	r3, [pc, #512]	; (8007784 <_dtoa_r+0xbcc>)
 8007584:	4602      	mov	r2, r0
 8007586:	f240 21ea 	movw	r1, #746	; 0x2ea
 800758a:	f7ff bb2e 	b.w	8006bea <_dtoa_r+0x32>
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	3202      	adds	r2, #2
 8007592:	0092      	lsls	r2, r2, #2
 8007594:	f107 010c 	add.w	r1, r7, #12
 8007598:	300c      	adds	r0, #12
 800759a:	f000 fc87 	bl	8007eac <memcpy>
 800759e:	2201      	movs	r2, #1
 80075a0:	4629      	mov	r1, r5
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 feec 	bl	8008380 <__lshift>
 80075a8:	9b00      	ldr	r3, [sp, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	9b00      	ldr	r3, [sp, #0]
 80075b0:	444b      	add	r3, r9
 80075b2:	9307      	str	r3, [sp, #28]
 80075b4:	9b02      	ldr	r3, [sp, #8]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	46b8      	mov	r8, r7
 80075bc:	9306      	str	r3, [sp, #24]
 80075be:	4607      	mov	r7, r0
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	4631      	mov	r1, r6
 80075c4:	3b01      	subs	r3, #1
 80075c6:	4658      	mov	r0, fp
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	f7ff fa69 	bl	8006aa0 <quorem>
 80075ce:	4603      	mov	r3, r0
 80075d0:	3330      	adds	r3, #48	; 0x30
 80075d2:	9004      	str	r0, [sp, #16]
 80075d4:	4641      	mov	r1, r8
 80075d6:	4658      	mov	r0, fp
 80075d8:	9308      	str	r3, [sp, #32]
 80075da:	f000 ff3d 	bl	8008458 <__mcmp>
 80075de:	463a      	mov	r2, r7
 80075e0:	4681      	mov	r9, r0
 80075e2:	4631      	mov	r1, r6
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 ff53 	bl	8008490 <__mdiff>
 80075ea:	68c2      	ldr	r2, [r0, #12]
 80075ec:	9b08      	ldr	r3, [sp, #32]
 80075ee:	4605      	mov	r5, r0
 80075f0:	bb02      	cbnz	r2, 8007634 <_dtoa_r+0xa7c>
 80075f2:	4601      	mov	r1, r0
 80075f4:	4658      	mov	r0, fp
 80075f6:	f000 ff2f 	bl	8008458 <__mcmp>
 80075fa:	9b08      	ldr	r3, [sp, #32]
 80075fc:	4602      	mov	r2, r0
 80075fe:	4629      	mov	r1, r5
 8007600:	4620      	mov	r0, r4
 8007602:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007606:	f000 fc9f 	bl	8007f48 <_Bfree>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800760e:	9d01      	ldr	r5, [sp, #4]
 8007610:	ea43 0102 	orr.w	r1, r3, r2
 8007614:	9b06      	ldr	r3, [sp, #24]
 8007616:	430b      	orrs	r3, r1
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	d10d      	bne.n	8007638 <_dtoa_r+0xa80>
 800761c:	2b39      	cmp	r3, #57	; 0x39
 800761e:	d029      	beq.n	8007674 <_dtoa_r+0xabc>
 8007620:	f1b9 0f00 	cmp.w	r9, #0
 8007624:	dd01      	ble.n	800762a <_dtoa_r+0xa72>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	3331      	adds	r3, #49	; 0x31
 800762a:	9a02      	ldr	r2, [sp, #8]
 800762c:	7013      	strb	r3, [r2, #0]
 800762e:	e774      	b.n	800751a <_dtoa_r+0x962>
 8007630:	4638      	mov	r0, r7
 8007632:	e7b9      	b.n	80075a8 <_dtoa_r+0x9f0>
 8007634:	2201      	movs	r2, #1
 8007636:	e7e2      	b.n	80075fe <_dtoa_r+0xa46>
 8007638:	f1b9 0f00 	cmp.w	r9, #0
 800763c:	db06      	blt.n	800764c <_dtoa_r+0xa94>
 800763e:	9905      	ldr	r1, [sp, #20]
 8007640:	ea41 0909 	orr.w	r9, r1, r9
 8007644:	9906      	ldr	r1, [sp, #24]
 8007646:	ea59 0101 	orrs.w	r1, r9, r1
 800764a:	d120      	bne.n	800768e <_dtoa_r+0xad6>
 800764c:	2a00      	cmp	r2, #0
 800764e:	ddec      	ble.n	800762a <_dtoa_r+0xa72>
 8007650:	4659      	mov	r1, fp
 8007652:	2201      	movs	r2, #1
 8007654:	4620      	mov	r0, r4
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	f000 fe92 	bl	8008380 <__lshift>
 800765c:	4631      	mov	r1, r6
 800765e:	4683      	mov	fp, r0
 8007660:	f000 fefa 	bl	8008458 <__mcmp>
 8007664:	2800      	cmp	r0, #0
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	dc02      	bgt.n	8007670 <_dtoa_r+0xab8>
 800766a:	d1de      	bne.n	800762a <_dtoa_r+0xa72>
 800766c:	07da      	lsls	r2, r3, #31
 800766e:	d5dc      	bpl.n	800762a <_dtoa_r+0xa72>
 8007670:	2b39      	cmp	r3, #57	; 0x39
 8007672:	d1d8      	bne.n	8007626 <_dtoa_r+0xa6e>
 8007674:	9a02      	ldr	r2, [sp, #8]
 8007676:	2339      	movs	r3, #57	; 0x39
 8007678:	7013      	strb	r3, [r2, #0]
 800767a:	462b      	mov	r3, r5
 800767c:	461d      	mov	r5, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007684:	2a39      	cmp	r2, #57	; 0x39
 8007686:	d050      	beq.n	800772a <_dtoa_r+0xb72>
 8007688:	3201      	adds	r2, #1
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e745      	b.n	800751a <_dtoa_r+0x962>
 800768e:	2a00      	cmp	r2, #0
 8007690:	dd03      	ble.n	800769a <_dtoa_r+0xae2>
 8007692:	2b39      	cmp	r3, #57	; 0x39
 8007694:	d0ee      	beq.n	8007674 <_dtoa_r+0xabc>
 8007696:	3301      	adds	r3, #1
 8007698:	e7c7      	b.n	800762a <_dtoa_r+0xa72>
 800769a:	9a01      	ldr	r2, [sp, #4]
 800769c:	9907      	ldr	r1, [sp, #28]
 800769e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076a2:	428a      	cmp	r2, r1
 80076a4:	d02a      	beq.n	80076fc <_dtoa_r+0xb44>
 80076a6:	4659      	mov	r1, fp
 80076a8:	2300      	movs	r3, #0
 80076aa:	220a      	movs	r2, #10
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fc6d 	bl	8007f8c <__multadd>
 80076b2:	45b8      	cmp	r8, r7
 80076b4:	4683      	mov	fp, r0
 80076b6:	f04f 0300 	mov.w	r3, #0
 80076ba:	f04f 020a 	mov.w	r2, #10
 80076be:	4641      	mov	r1, r8
 80076c0:	4620      	mov	r0, r4
 80076c2:	d107      	bne.n	80076d4 <_dtoa_r+0xb1c>
 80076c4:	f000 fc62 	bl	8007f8c <__multadd>
 80076c8:	4680      	mov	r8, r0
 80076ca:	4607      	mov	r7, r0
 80076cc:	9b01      	ldr	r3, [sp, #4]
 80076ce:	3301      	adds	r3, #1
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	e775      	b.n	80075c0 <_dtoa_r+0xa08>
 80076d4:	f000 fc5a 	bl	8007f8c <__multadd>
 80076d8:	4639      	mov	r1, r7
 80076da:	4680      	mov	r8, r0
 80076dc:	2300      	movs	r3, #0
 80076de:	220a      	movs	r2, #10
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fc53 	bl	8007f8c <__multadd>
 80076e6:	4607      	mov	r7, r0
 80076e8:	e7f0      	b.n	80076cc <_dtoa_r+0xb14>
 80076ea:	f1b9 0f00 	cmp.w	r9, #0
 80076ee:	9a00      	ldr	r2, [sp, #0]
 80076f0:	bfcc      	ite	gt
 80076f2:	464d      	movgt	r5, r9
 80076f4:	2501      	movle	r5, #1
 80076f6:	4415      	add	r5, r2
 80076f8:	f04f 0800 	mov.w	r8, #0
 80076fc:	4659      	mov	r1, fp
 80076fe:	2201      	movs	r2, #1
 8007700:	4620      	mov	r0, r4
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	f000 fe3c 	bl	8008380 <__lshift>
 8007708:	4631      	mov	r1, r6
 800770a:	4683      	mov	fp, r0
 800770c:	f000 fea4 	bl	8008458 <__mcmp>
 8007710:	2800      	cmp	r0, #0
 8007712:	dcb2      	bgt.n	800767a <_dtoa_r+0xac2>
 8007714:	d102      	bne.n	800771c <_dtoa_r+0xb64>
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	07db      	lsls	r3, r3, #31
 800771a:	d4ae      	bmi.n	800767a <_dtoa_r+0xac2>
 800771c:	462b      	mov	r3, r5
 800771e:	461d      	mov	r5, r3
 8007720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007724:	2a30      	cmp	r2, #48	; 0x30
 8007726:	d0fa      	beq.n	800771e <_dtoa_r+0xb66>
 8007728:	e6f7      	b.n	800751a <_dtoa_r+0x962>
 800772a:	9a00      	ldr	r2, [sp, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d1a5      	bne.n	800767c <_dtoa_r+0xac4>
 8007730:	f10a 0a01 	add.w	sl, sl, #1
 8007734:	2331      	movs	r3, #49	; 0x31
 8007736:	e779      	b.n	800762c <_dtoa_r+0xa74>
 8007738:	4b13      	ldr	r3, [pc, #76]	; (8007788 <_dtoa_r+0xbd0>)
 800773a:	f7ff baaf 	b.w	8006c9c <_dtoa_r+0xe4>
 800773e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007740:	2b00      	cmp	r3, #0
 8007742:	f47f aa86 	bne.w	8006c52 <_dtoa_r+0x9a>
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <_dtoa_r+0xbd4>)
 8007748:	f7ff baa8 	b.w	8006c9c <_dtoa_r+0xe4>
 800774c:	f1b9 0f00 	cmp.w	r9, #0
 8007750:	dc03      	bgt.n	800775a <_dtoa_r+0xba2>
 8007752:	9b05      	ldr	r3, [sp, #20]
 8007754:	2b02      	cmp	r3, #2
 8007756:	f73f aec9 	bgt.w	80074ec <_dtoa_r+0x934>
 800775a:	9d00      	ldr	r5, [sp, #0]
 800775c:	4631      	mov	r1, r6
 800775e:	4658      	mov	r0, fp
 8007760:	f7ff f99e 	bl	8006aa0 <quorem>
 8007764:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007768:	f805 3b01 	strb.w	r3, [r5], #1
 800776c:	9a00      	ldr	r2, [sp, #0]
 800776e:	1aaa      	subs	r2, r5, r2
 8007770:	4591      	cmp	r9, r2
 8007772:	ddba      	ble.n	80076ea <_dtoa_r+0xb32>
 8007774:	4659      	mov	r1, fp
 8007776:	2300      	movs	r3, #0
 8007778:	220a      	movs	r2, #10
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fc06 	bl	8007f8c <__multadd>
 8007780:	4683      	mov	fp, r0
 8007782:	e7eb      	b.n	800775c <_dtoa_r+0xba4>
 8007784:	08009b7c 	.word	0x08009b7c
 8007788:	08009984 	.word	0x08009984
 800778c:	08009af9 	.word	0x08009af9

08007790 <rshift>:
 8007790:	6903      	ldr	r3, [r0, #16]
 8007792:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800779a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800779e:	f100 0414 	add.w	r4, r0, #20
 80077a2:	dd45      	ble.n	8007830 <rshift+0xa0>
 80077a4:	f011 011f 	ands.w	r1, r1, #31
 80077a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80077ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80077b0:	d10c      	bne.n	80077cc <rshift+0x3c>
 80077b2:	f100 0710 	add.w	r7, r0, #16
 80077b6:	4629      	mov	r1, r5
 80077b8:	42b1      	cmp	r1, r6
 80077ba:	d334      	bcc.n	8007826 <rshift+0x96>
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	1eea      	subs	r2, r5, #3
 80077c2:	4296      	cmp	r6, r2
 80077c4:	bf38      	it	cc
 80077c6:	2300      	movcc	r3, #0
 80077c8:	4423      	add	r3, r4
 80077ca:	e015      	b.n	80077f8 <rshift+0x68>
 80077cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80077d0:	f1c1 0820 	rsb	r8, r1, #32
 80077d4:	40cf      	lsrs	r7, r1
 80077d6:	f105 0e04 	add.w	lr, r5, #4
 80077da:	46a1      	mov	r9, r4
 80077dc:	4576      	cmp	r6, lr
 80077de:	46f4      	mov	ip, lr
 80077e0:	d815      	bhi.n	800780e <rshift+0x7e>
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	009a      	lsls	r2, r3, #2
 80077e6:	3a04      	subs	r2, #4
 80077e8:	3501      	adds	r5, #1
 80077ea:	42ae      	cmp	r6, r5
 80077ec:	bf38      	it	cc
 80077ee:	2200      	movcc	r2, #0
 80077f0:	18a3      	adds	r3, r4, r2
 80077f2:	50a7      	str	r7, [r4, r2]
 80077f4:	b107      	cbz	r7, 80077f8 <rshift+0x68>
 80077f6:	3304      	adds	r3, #4
 80077f8:	1b1a      	subs	r2, r3, r4
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007800:	bf08      	it	eq
 8007802:	2300      	moveq	r3, #0
 8007804:	6102      	str	r2, [r0, #16]
 8007806:	bf08      	it	eq
 8007808:	6143      	streq	r3, [r0, #20]
 800780a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800780e:	f8dc c000 	ldr.w	ip, [ip]
 8007812:	fa0c fc08 	lsl.w	ip, ip, r8
 8007816:	ea4c 0707 	orr.w	r7, ip, r7
 800781a:	f849 7b04 	str.w	r7, [r9], #4
 800781e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007822:	40cf      	lsrs	r7, r1
 8007824:	e7da      	b.n	80077dc <rshift+0x4c>
 8007826:	f851 cb04 	ldr.w	ip, [r1], #4
 800782a:	f847 cf04 	str.w	ip, [r7, #4]!
 800782e:	e7c3      	b.n	80077b8 <rshift+0x28>
 8007830:	4623      	mov	r3, r4
 8007832:	e7e1      	b.n	80077f8 <rshift+0x68>

08007834 <__hexdig_fun>:
 8007834:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007838:	2b09      	cmp	r3, #9
 800783a:	d802      	bhi.n	8007842 <__hexdig_fun+0xe>
 800783c:	3820      	subs	r0, #32
 800783e:	b2c0      	uxtb	r0, r0
 8007840:	4770      	bx	lr
 8007842:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007846:	2b05      	cmp	r3, #5
 8007848:	d801      	bhi.n	800784e <__hexdig_fun+0x1a>
 800784a:	3847      	subs	r0, #71	; 0x47
 800784c:	e7f7      	b.n	800783e <__hexdig_fun+0xa>
 800784e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007852:	2b05      	cmp	r3, #5
 8007854:	d801      	bhi.n	800785a <__hexdig_fun+0x26>
 8007856:	3827      	subs	r0, #39	; 0x27
 8007858:	e7f1      	b.n	800783e <__hexdig_fun+0xa>
 800785a:	2000      	movs	r0, #0
 800785c:	4770      	bx	lr
	...

08007860 <__gethex>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	ed2d 8b02 	vpush	{d8}
 8007868:	b089      	sub	sp, #36	; 0x24
 800786a:	ee08 0a10 	vmov	s16, r0
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	4bbc      	ldr	r3, [pc, #752]	; (8007b64 <__gethex+0x304>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	4618      	mov	r0, r3
 8007878:	468b      	mov	fp, r1
 800787a:	4690      	mov	r8, r2
 800787c:	f7f8 fcba 	bl	80001f4 <strlen>
 8007880:	9b01      	ldr	r3, [sp, #4]
 8007882:	f8db 2000 	ldr.w	r2, [fp]
 8007886:	4403      	add	r3, r0
 8007888:	4682      	mov	sl, r0
 800788a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800788e:	9305      	str	r3, [sp, #20]
 8007890:	1c93      	adds	r3, r2, #2
 8007892:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007896:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800789a:	32fe      	adds	r2, #254	; 0xfe
 800789c:	18d1      	adds	r1, r2, r3
 800789e:	461f      	mov	r7, r3
 80078a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078a4:	9100      	str	r1, [sp, #0]
 80078a6:	2830      	cmp	r0, #48	; 0x30
 80078a8:	d0f8      	beq.n	800789c <__gethex+0x3c>
 80078aa:	f7ff ffc3 	bl	8007834 <__hexdig_fun>
 80078ae:	4604      	mov	r4, r0
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d13a      	bne.n	800792a <__gethex+0xca>
 80078b4:	9901      	ldr	r1, [sp, #4]
 80078b6:	4652      	mov	r2, sl
 80078b8:	4638      	mov	r0, r7
 80078ba:	f001 f9ed 	bl	8008c98 <strncmp>
 80078be:	4605      	mov	r5, r0
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d168      	bne.n	8007996 <__gethex+0x136>
 80078c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80078c8:	eb07 060a 	add.w	r6, r7, sl
 80078cc:	f7ff ffb2 	bl	8007834 <__hexdig_fun>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d062      	beq.n	800799a <__gethex+0x13a>
 80078d4:	4633      	mov	r3, r6
 80078d6:	7818      	ldrb	r0, [r3, #0]
 80078d8:	2830      	cmp	r0, #48	; 0x30
 80078da:	461f      	mov	r7, r3
 80078dc:	f103 0301 	add.w	r3, r3, #1
 80078e0:	d0f9      	beq.n	80078d6 <__gethex+0x76>
 80078e2:	f7ff ffa7 	bl	8007834 <__hexdig_fun>
 80078e6:	2301      	movs	r3, #1
 80078e8:	fab0 f480 	clz	r4, r0
 80078ec:	0964      	lsrs	r4, r4, #5
 80078ee:	4635      	mov	r5, r6
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	463a      	mov	r2, r7
 80078f4:	4616      	mov	r6, r2
 80078f6:	3201      	adds	r2, #1
 80078f8:	7830      	ldrb	r0, [r6, #0]
 80078fa:	f7ff ff9b 	bl	8007834 <__hexdig_fun>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d1f8      	bne.n	80078f4 <__gethex+0x94>
 8007902:	9901      	ldr	r1, [sp, #4]
 8007904:	4652      	mov	r2, sl
 8007906:	4630      	mov	r0, r6
 8007908:	f001 f9c6 	bl	8008c98 <strncmp>
 800790c:	b980      	cbnz	r0, 8007930 <__gethex+0xd0>
 800790e:	b94d      	cbnz	r5, 8007924 <__gethex+0xc4>
 8007910:	eb06 050a 	add.w	r5, r6, sl
 8007914:	462a      	mov	r2, r5
 8007916:	4616      	mov	r6, r2
 8007918:	3201      	adds	r2, #1
 800791a:	7830      	ldrb	r0, [r6, #0]
 800791c:	f7ff ff8a 	bl	8007834 <__hexdig_fun>
 8007920:	2800      	cmp	r0, #0
 8007922:	d1f8      	bne.n	8007916 <__gethex+0xb6>
 8007924:	1bad      	subs	r5, r5, r6
 8007926:	00ad      	lsls	r5, r5, #2
 8007928:	e004      	b.n	8007934 <__gethex+0xd4>
 800792a:	2400      	movs	r4, #0
 800792c:	4625      	mov	r5, r4
 800792e:	e7e0      	b.n	80078f2 <__gethex+0x92>
 8007930:	2d00      	cmp	r5, #0
 8007932:	d1f7      	bne.n	8007924 <__gethex+0xc4>
 8007934:	7833      	ldrb	r3, [r6, #0]
 8007936:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800793a:	2b50      	cmp	r3, #80	; 0x50
 800793c:	d13b      	bne.n	80079b6 <__gethex+0x156>
 800793e:	7873      	ldrb	r3, [r6, #1]
 8007940:	2b2b      	cmp	r3, #43	; 0x2b
 8007942:	d02c      	beq.n	800799e <__gethex+0x13e>
 8007944:	2b2d      	cmp	r3, #45	; 0x2d
 8007946:	d02e      	beq.n	80079a6 <__gethex+0x146>
 8007948:	1c71      	adds	r1, r6, #1
 800794a:	f04f 0900 	mov.w	r9, #0
 800794e:	7808      	ldrb	r0, [r1, #0]
 8007950:	f7ff ff70 	bl	8007834 <__hexdig_fun>
 8007954:	1e43      	subs	r3, r0, #1
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b18      	cmp	r3, #24
 800795a:	d82c      	bhi.n	80079b6 <__gethex+0x156>
 800795c:	f1a0 0210 	sub.w	r2, r0, #16
 8007960:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007964:	f7ff ff66 	bl	8007834 <__hexdig_fun>
 8007968:	1e43      	subs	r3, r0, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b18      	cmp	r3, #24
 800796e:	d91d      	bls.n	80079ac <__gethex+0x14c>
 8007970:	f1b9 0f00 	cmp.w	r9, #0
 8007974:	d000      	beq.n	8007978 <__gethex+0x118>
 8007976:	4252      	negs	r2, r2
 8007978:	4415      	add	r5, r2
 800797a:	f8cb 1000 	str.w	r1, [fp]
 800797e:	b1e4      	cbz	r4, 80079ba <__gethex+0x15a>
 8007980:	9b00      	ldr	r3, [sp, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	bf14      	ite	ne
 8007986:	2700      	movne	r7, #0
 8007988:	2706      	moveq	r7, #6
 800798a:	4638      	mov	r0, r7
 800798c:	b009      	add	sp, #36	; 0x24
 800798e:	ecbd 8b02 	vpop	{d8}
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	463e      	mov	r6, r7
 8007998:	4625      	mov	r5, r4
 800799a:	2401      	movs	r4, #1
 800799c:	e7ca      	b.n	8007934 <__gethex+0xd4>
 800799e:	f04f 0900 	mov.w	r9, #0
 80079a2:	1cb1      	adds	r1, r6, #2
 80079a4:	e7d3      	b.n	800794e <__gethex+0xee>
 80079a6:	f04f 0901 	mov.w	r9, #1
 80079aa:	e7fa      	b.n	80079a2 <__gethex+0x142>
 80079ac:	230a      	movs	r3, #10
 80079ae:	fb03 0202 	mla	r2, r3, r2, r0
 80079b2:	3a10      	subs	r2, #16
 80079b4:	e7d4      	b.n	8007960 <__gethex+0x100>
 80079b6:	4631      	mov	r1, r6
 80079b8:	e7df      	b.n	800797a <__gethex+0x11a>
 80079ba:	1bf3      	subs	r3, r6, r7
 80079bc:	3b01      	subs	r3, #1
 80079be:	4621      	mov	r1, r4
 80079c0:	2b07      	cmp	r3, #7
 80079c2:	dc0b      	bgt.n	80079dc <__gethex+0x17c>
 80079c4:	ee18 0a10 	vmov	r0, s16
 80079c8:	f000 fa7e 	bl	8007ec8 <_Balloc>
 80079cc:	4604      	mov	r4, r0
 80079ce:	b940      	cbnz	r0, 80079e2 <__gethex+0x182>
 80079d0:	4b65      	ldr	r3, [pc, #404]	; (8007b68 <__gethex+0x308>)
 80079d2:	4602      	mov	r2, r0
 80079d4:	21de      	movs	r1, #222	; 0xde
 80079d6:	4865      	ldr	r0, [pc, #404]	; (8007b6c <__gethex+0x30c>)
 80079d8:	f001 f97e 	bl	8008cd8 <__assert_func>
 80079dc:	3101      	adds	r1, #1
 80079de:	105b      	asrs	r3, r3, #1
 80079e0:	e7ee      	b.n	80079c0 <__gethex+0x160>
 80079e2:	f100 0914 	add.w	r9, r0, #20
 80079e6:	f04f 0b00 	mov.w	fp, #0
 80079ea:	f1ca 0301 	rsb	r3, sl, #1
 80079ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80079f2:	f8cd b000 	str.w	fp, [sp]
 80079f6:	9306      	str	r3, [sp, #24]
 80079f8:	42b7      	cmp	r7, r6
 80079fa:	d340      	bcc.n	8007a7e <__gethex+0x21e>
 80079fc:	9802      	ldr	r0, [sp, #8]
 80079fe:	9b00      	ldr	r3, [sp, #0]
 8007a00:	f840 3b04 	str.w	r3, [r0], #4
 8007a04:	eba0 0009 	sub.w	r0, r0, r9
 8007a08:	1080      	asrs	r0, r0, #2
 8007a0a:	0146      	lsls	r6, r0, #5
 8007a0c:	6120      	str	r0, [r4, #16]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fb50 	bl	80080b4 <__hi0bits>
 8007a14:	1a30      	subs	r0, r6, r0
 8007a16:	f8d8 6000 	ldr.w	r6, [r8]
 8007a1a:	42b0      	cmp	r0, r6
 8007a1c:	dd63      	ble.n	8007ae6 <__gethex+0x286>
 8007a1e:	1b87      	subs	r7, r0, r6
 8007a20:	4639      	mov	r1, r7
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 feea 	bl	80087fc <__any_on>
 8007a28:	4682      	mov	sl, r0
 8007a2a:	b1a8      	cbz	r0, 8007a58 <__gethex+0x1f8>
 8007a2c:	1e7b      	subs	r3, r7, #1
 8007a2e:	1159      	asrs	r1, r3, #5
 8007a30:	f003 021f 	and.w	r2, r3, #31
 8007a34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007a38:	f04f 0a01 	mov.w	sl, #1
 8007a3c:	fa0a f202 	lsl.w	r2, sl, r2
 8007a40:	420a      	tst	r2, r1
 8007a42:	d009      	beq.n	8007a58 <__gethex+0x1f8>
 8007a44:	4553      	cmp	r3, sl
 8007a46:	dd05      	ble.n	8007a54 <__gethex+0x1f4>
 8007a48:	1eb9      	subs	r1, r7, #2
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fed6 	bl	80087fc <__any_on>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d145      	bne.n	8007ae0 <__gethex+0x280>
 8007a54:	f04f 0a02 	mov.w	sl, #2
 8007a58:	4639      	mov	r1, r7
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f7ff fe98 	bl	8007790 <rshift>
 8007a60:	443d      	add	r5, r7
 8007a62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a66:	42ab      	cmp	r3, r5
 8007a68:	da4c      	bge.n	8007b04 <__gethex+0x2a4>
 8007a6a:	ee18 0a10 	vmov	r0, s16
 8007a6e:	4621      	mov	r1, r4
 8007a70:	f000 fa6a 	bl	8007f48 <_Bfree>
 8007a74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a76:	2300      	movs	r3, #0
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	27a3      	movs	r7, #163	; 0xa3
 8007a7c:	e785      	b.n	800798a <__gethex+0x12a>
 8007a7e:	1e73      	subs	r3, r6, #1
 8007a80:	9a05      	ldr	r2, [sp, #20]
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d019      	beq.n	8007ac0 <__gethex+0x260>
 8007a8c:	f1bb 0f20 	cmp.w	fp, #32
 8007a90:	d107      	bne.n	8007aa2 <__gethex+0x242>
 8007a92:	9b02      	ldr	r3, [sp, #8]
 8007a94:	9a00      	ldr	r2, [sp, #0]
 8007a96:	f843 2b04 	str.w	r2, [r3], #4
 8007a9a:	9302      	str	r3, [sp, #8]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	469b      	mov	fp, r3
 8007aa2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007aa6:	f7ff fec5 	bl	8007834 <__hexdig_fun>
 8007aaa:	9b00      	ldr	r3, [sp, #0]
 8007aac:	f000 000f 	and.w	r0, r0, #15
 8007ab0:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ab4:	4303      	orrs	r3, r0
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	f10b 0b04 	add.w	fp, fp, #4
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	e00d      	b.n	8007adc <__gethex+0x27c>
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	9a06      	ldr	r2, [sp, #24]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	42bb      	cmp	r3, r7
 8007ac8:	d3e0      	bcc.n	8007a8c <__gethex+0x22c>
 8007aca:	4618      	mov	r0, r3
 8007acc:	9901      	ldr	r1, [sp, #4]
 8007ace:	9307      	str	r3, [sp, #28]
 8007ad0:	4652      	mov	r2, sl
 8007ad2:	f001 f8e1 	bl	8008c98 <strncmp>
 8007ad6:	9b07      	ldr	r3, [sp, #28]
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1d7      	bne.n	8007a8c <__gethex+0x22c>
 8007adc:	461e      	mov	r6, r3
 8007ade:	e78b      	b.n	80079f8 <__gethex+0x198>
 8007ae0:	f04f 0a03 	mov.w	sl, #3
 8007ae4:	e7b8      	b.n	8007a58 <__gethex+0x1f8>
 8007ae6:	da0a      	bge.n	8007afe <__gethex+0x29e>
 8007ae8:	1a37      	subs	r7, r6, r0
 8007aea:	4621      	mov	r1, r4
 8007aec:	ee18 0a10 	vmov	r0, s16
 8007af0:	463a      	mov	r2, r7
 8007af2:	f000 fc45 	bl	8008380 <__lshift>
 8007af6:	1bed      	subs	r5, r5, r7
 8007af8:	4604      	mov	r4, r0
 8007afa:	f100 0914 	add.w	r9, r0, #20
 8007afe:	f04f 0a00 	mov.w	sl, #0
 8007b02:	e7ae      	b.n	8007a62 <__gethex+0x202>
 8007b04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007b08:	42a8      	cmp	r0, r5
 8007b0a:	dd72      	ble.n	8007bf2 <__gethex+0x392>
 8007b0c:	1b45      	subs	r5, r0, r5
 8007b0e:	42ae      	cmp	r6, r5
 8007b10:	dc36      	bgt.n	8007b80 <__gethex+0x320>
 8007b12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d02a      	beq.n	8007b70 <__gethex+0x310>
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d02c      	beq.n	8007b78 <__gethex+0x318>
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d115      	bne.n	8007b4e <__gethex+0x2ee>
 8007b22:	42ae      	cmp	r6, r5
 8007b24:	d113      	bne.n	8007b4e <__gethex+0x2ee>
 8007b26:	2e01      	cmp	r6, #1
 8007b28:	d10b      	bne.n	8007b42 <__gethex+0x2e2>
 8007b2a:	9a04      	ldr	r2, [sp, #16]
 8007b2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	2301      	movs	r3, #1
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	f8c9 3000 	str.w	r3, [r9]
 8007b3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b3c:	2762      	movs	r7, #98	; 0x62
 8007b3e:	601c      	str	r4, [r3, #0]
 8007b40:	e723      	b.n	800798a <__gethex+0x12a>
 8007b42:	1e71      	subs	r1, r6, #1
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fe59 	bl	80087fc <__any_on>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d1ed      	bne.n	8007b2a <__gethex+0x2ca>
 8007b4e:	ee18 0a10 	vmov	r0, s16
 8007b52:	4621      	mov	r1, r4
 8007b54:	f000 f9f8 	bl	8007f48 <_Bfree>
 8007b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	2750      	movs	r7, #80	; 0x50
 8007b60:	e713      	b.n	800798a <__gethex+0x12a>
 8007b62:	bf00      	nop
 8007b64:	08009bf8 	.word	0x08009bf8
 8007b68:	08009b7c 	.word	0x08009b7c
 8007b6c:	08009b8d 	.word	0x08009b8d
 8007b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1eb      	bne.n	8007b4e <__gethex+0x2ee>
 8007b76:	e7d8      	b.n	8007b2a <__gethex+0x2ca>
 8007b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1d5      	bne.n	8007b2a <__gethex+0x2ca>
 8007b7e:	e7e6      	b.n	8007b4e <__gethex+0x2ee>
 8007b80:	1e6f      	subs	r7, r5, #1
 8007b82:	f1ba 0f00 	cmp.w	sl, #0
 8007b86:	d131      	bne.n	8007bec <__gethex+0x38c>
 8007b88:	b127      	cbz	r7, 8007b94 <__gethex+0x334>
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 fe35 	bl	80087fc <__any_on>
 8007b92:	4682      	mov	sl, r0
 8007b94:	117b      	asrs	r3, r7, #5
 8007b96:	2101      	movs	r1, #1
 8007b98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b9c:	f007 071f 	and.w	r7, r7, #31
 8007ba0:	fa01 f707 	lsl.w	r7, r1, r7
 8007ba4:	421f      	tst	r7, r3
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4620      	mov	r0, r4
 8007baa:	bf18      	it	ne
 8007bac:	f04a 0a02 	orrne.w	sl, sl, #2
 8007bb0:	1b76      	subs	r6, r6, r5
 8007bb2:	f7ff fded 	bl	8007790 <rshift>
 8007bb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bba:	2702      	movs	r7, #2
 8007bbc:	f1ba 0f00 	cmp.w	sl, #0
 8007bc0:	d048      	beq.n	8007c54 <__gethex+0x3f4>
 8007bc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d015      	beq.n	8007bf6 <__gethex+0x396>
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d017      	beq.n	8007bfe <__gethex+0x39e>
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d109      	bne.n	8007be6 <__gethex+0x386>
 8007bd2:	f01a 0f02 	tst.w	sl, #2
 8007bd6:	d006      	beq.n	8007be6 <__gethex+0x386>
 8007bd8:	f8d9 0000 	ldr.w	r0, [r9]
 8007bdc:	ea4a 0a00 	orr.w	sl, sl, r0
 8007be0:	f01a 0f01 	tst.w	sl, #1
 8007be4:	d10e      	bne.n	8007c04 <__gethex+0x3a4>
 8007be6:	f047 0710 	orr.w	r7, r7, #16
 8007bea:	e033      	b.n	8007c54 <__gethex+0x3f4>
 8007bec:	f04f 0a01 	mov.w	sl, #1
 8007bf0:	e7d0      	b.n	8007b94 <__gethex+0x334>
 8007bf2:	2701      	movs	r7, #1
 8007bf4:	e7e2      	b.n	8007bbc <__gethex+0x35c>
 8007bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bf8:	f1c3 0301 	rsb	r3, r3, #1
 8007bfc:	9315      	str	r3, [sp, #84]	; 0x54
 8007bfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0f0      	beq.n	8007be6 <__gethex+0x386>
 8007c04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c08:	f104 0314 	add.w	r3, r4, #20
 8007c0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c14:	f04f 0c00 	mov.w	ip, #0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c22:	d01c      	beq.n	8007c5e <__gethex+0x3fe>
 8007c24:	3201      	adds	r2, #1
 8007c26:	6002      	str	r2, [r0, #0]
 8007c28:	2f02      	cmp	r7, #2
 8007c2a:	f104 0314 	add.w	r3, r4, #20
 8007c2e:	d13f      	bne.n	8007cb0 <__gethex+0x450>
 8007c30:	f8d8 2000 	ldr.w	r2, [r8]
 8007c34:	3a01      	subs	r2, #1
 8007c36:	42b2      	cmp	r2, r6
 8007c38:	d10a      	bne.n	8007c50 <__gethex+0x3f0>
 8007c3a:	1171      	asrs	r1, r6, #5
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c42:	f006 061f 	and.w	r6, r6, #31
 8007c46:	fa02 f606 	lsl.w	r6, r2, r6
 8007c4a:	421e      	tst	r6, r3
 8007c4c:	bf18      	it	ne
 8007c4e:	4617      	movne	r7, r2
 8007c50:	f047 0720 	orr.w	r7, r7, #32
 8007c54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c56:	601c      	str	r4, [r3, #0]
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	601d      	str	r5, [r3, #0]
 8007c5c:	e695      	b.n	800798a <__gethex+0x12a>
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c64:	d8d8      	bhi.n	8007c18 <__gethex+0x3b8>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	459b      	cmp	fp, r3
 8007c6a:	db19      	blt.n	8007ca0 <__gethex+0x440>
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	ee18 0a10 	vmov	r0, s16
 8007c72:	3101      	adds	r1, #1
 8007c74:	f000 f928 	bl	8007ec8 <_Balloc>
 8007c78:	4681      	mov	r9, r0
 8007c7a:	b918      	cbnz	r0, 8007c84 <__gethex+0x424>
 8007c7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <__gethex+0x488>)
 8007c7e:	4602      	mov	r2, r0
 8007c80:	2184      	movs	r1, #132	; 0x84
 8007c82:	e6a8      	b.n	80079d6 <__gethex+0x176>
 8007c84:	6922      	ldr	r2, [r4, #16]
 8007c86:	3202      	adds	r2, #2
 8007c88:	f104 010c 	add.w	r1, r4, #12
 8007c8c:	0092      	lsls	r2, r2, #2
 8007c8e:	300c      	adds	r0, #12
 8007c90:	f000 f90c 	bl	8007eac <memcpy>
 8007c94:	4621      	mov	r1, r4
 8007c96:	ee18 0a10 	vmov	r0, s16
 8007c9a:	f000 f955 	bl	8007f48 <_Bfree>
 8007c9e:	464c      	mov	r4, r9
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ca8:	6122      	str	r2, [r4, #16]
 8007caa:	2201      	movs	r2, #1
 8007cac:	615a      	str	r2, [r3, #20]
 8007cae:	e7bb      	b.n	8007c28 <__gethex+0x3c8>
 8007cb0:	6922      	ldr	r2, [r4, #16]
 8007cb2:	455a      	cmp	r2, fp
 8007cb4:	dd0b      	ble.n	8007cce <__gethex+0x46e>
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7ff fd69 	bl	8007790 <rshift>
 8007cbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cc2:	3501      	adds	r5, #1
 8007cc4:	42ab      	cmp	r3, r5
 8007cc6:	f6ff aed0 	blt.w	8007a6a <__gethex+0x20a>
 8007cca:	2701      	movs	r7, #1
 8007ccc:	e7c0      	b.n	8007c50 <__gethex+0x3f0>
 8007cce:	f016 061f 	ands.w	r6, r6, #31
 8007cd2:	d0fa      	beq.n	8007cca <__gethex+0x46a>
 8007cd4:	449a      	add	sl, r3
 8007cd6:	f1c6 0620 	rsb	r6, r6, #32
 8007cda:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007cde:	f000 f9e9 	bl	80080b4 <__hi0bits>
 8007ce2:	42b0      	cmp	r0, r6
 8007ce4:	dbe7      	blt.n	8007cb6 <__gethex+0x456>
 8007ce6:	e7f0      	b.n	8007cca <__gethex+0x46a>
 8007ce8:	08009b7c 	.word	0x08009b7c

08007cec <L_shift>:
 8007cec:	f1c2 0208 	rsb	r2, r2, #8
 8007cf0:	0092      	lsls	r2, r2, #2
 8007cf2:	b570      	push	{r4, r5, r6, lr}
 8007cf4:	f1c2 0620 	rsb	r6, r2, #32
 8007cf8:	6843      	ldr	r3, [r0, #4]
 8007cfa:	6804      	ldr	r4, [r0, #0]
 8007cfc:	fa03 f506 	lsl.w	r5, r3, r6
 8007d00:	432c      	orrs	r4, r5
 8007d02:	40d3      	lsrs	r3, r2
 8007d04:	6004      	str	r4, [r0, #0]
 8007d06:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d0a:	4288      	cmp	r0, r1
 8007d0c:	d3f4      	bcc.n	8007cf8 <L_shift+0xc>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}

08007d10 <__match>:
 8007d10:	b530      	push	{r4, r5, lr}
 8007d12:	6803      	ldr	r3, [r0, #0]
 8007d14:	3301      	adds	r3, #1
 8007d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d1a:	b914      	cbnz	r4, 8007d22 <__match+0x12>
 8007d1c:	6003      	str	r3, [r0, #0]
 8007d1e:	2001      	movs	r0, #1
 8007d20:	bd30      	pop	{r4, r5, pc}
 8007d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d2a:	2d19      	cmp	r5, #25
 8007d2c:	bf98      	it	ls
 8007d2e:	3220      	addls	r2, #32
 8007d30:	42a2      	cmp	r2, r4
 8007d32:	d0f0      	beq.n	8007d16 <__match+0x6>
 8007d34:	2000      	movs	r0, #0
 8007d36:	e7f3      	b.n	8007d20 <__match+0x10>

08007d38 <__hexnan>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	680b      	ldr	r3, [r1, #0]
 8007d3e:	6801      	ldr	r1, [r0, #0]
 8007d40:	115e      	asrs	r6, r3, #5
 8007d42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d46:	f013 031f 	ands.w	r3, r3, #31
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	bf18      	it	ne
 8007d4e:	3604      	addne	r6, #4
 8007d50:	2500      	movs	r5, #0
 8007d52:	1f37      	subs	r7, r6, #4
 8007d54:	4682      	mov	sl, r0
 8007d56:	4690      	mov	r8, r2
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d5e:	46b9      	mov	r9, r7
 8007d60:	463c      	mov	r4, r7
 8007d62:	9502      	str	r5, [sp, #8]
 8007d64:	46ab      	mov	fp, r5
 8007d66:	784a      	ldrb	r2, [r1, #1]
 8007d68:	1c4b      	adds	r3, r1, #1
 8007d6a:	9303      	str	r3, [sp, #12]
 8007d6c:	b342      	cbz	r2, 8007dc0 <__hexnan+0x88>
 8007d6e:	4610      	mov	r0, r2
 8007d70:	9105      	str	r1, [sp, #20]
 8007d72:	9204      	str	r2, [sp, #16]
 8007d74:	f7ff fd5e 	bl	8007834 <__hexdig_fun>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d14f      	bne.n	8007e1c <__hexnan+0xe4>
 8007d7c:	9a04      	ldr	r2, [sp, #16]
 8007d7e:	9905      	ldr	r1, [sp, #20]
 8007d80:	2a20      	cmp	r2, #32
 8007d82:	d818      	bhi.n	8007db6 <__hexnan+0x7e>
 8007d84:	9b02      	ldr	r3, [sp, #8]
 8007d86:	459b      	cmp	fp, r3
 8007d88:	dd13      	ble.n	8007db2 <__hexnan+0x7a>
 8007d8a:	454c      	cmp	r4, r9
 8007d8c:	d206      	bcs.n	8007d9c <__hexnan+0x64>
 8007d8e:	2d07      	cmp	r5, #7
 8007d90:	dc04      	bgt.n	8007d9c <__hexnan+0x64>
 8007d92:	462a      	mov	r2, r5
 8007d94:	4649      	mov	r1, r9
 8007d96:	4620      	mov	r0, r4
 8007d98:	f7ff ffa8 	bl	8007cec <L_shift>
 8007d9c:	4544      	cmp	r4, r8
 8007d9e:	d950      	bls.n	8007e42 <__hexnan+0x10a>
 8007da0:	2300      	movs	r3, #0
 8007da2:	f1a4 0904 	sub.w	r9, r4, #4
 8007da6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007daa:	f8cd b008 	str.w	fp, [sp, #8]
 8007dae:	464c      	mov	r4, r9
 8007db0:	461d      	mov	r5, r3
 8007db2:	9903      	ldr	r1, [sp, #12]
 8007db4:	e7d7      	b.n	8007d66 <__hexnan+0x2e>
 8007db6:	2a29      	cmp	r2, #41	; 0x29
 8007db8:	d156      	bne.n	8007e68 <__hexnan+0x130>
 8007dba:	3102      	adds	r1, #2
 8007dbc:	f8ca 1000 	str.w	r1, [sl]
 8007dc0:	f1bb 0f00 	cmp.w	fp, #0
 8007dc4:	d050      	beq.n	8007e68 <__hexnan+0x130>
 8007dc6:	454c      	cmp	r4, r9
 8007dc8:	d206      	bcs.n	8007dd8 <__hexnan+0xa0>
 8007dca:	2d07      	cmp	r5, #7
 8007dcc:	dc04      	bgt.n	8007dd8 <__hexnan+0xa0>
 8007dce:	462a      	mov	r2, r5
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f7ff ff8a 	bl	8007cec <L_shift>
 8007dd8:	4544      	cmp	r4, r8
 8007dda:	d934      	bls.n	8007e46 <__hexnan+0x10e>
 8007ddc:	f1a8 0204 	sub.w	r2, r8, #4
 8007de0:	4623      	mov	r3, r4
 8007de2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007de6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007dea:	429f      	cmp	r7, r3
 8007dec:	d2f9      	bcs.n	8007de2 <__hexnan+0xaa>
 8007dee:	1b3b      	subs	r3, r7, r4
 8007df0:	f023 0303 	bic.w	r3, r3, #3
 8007df4:	3304      	adds	r3, #4
 8007df6:	3401      	adds	r4, #1
 8007df8:	3e03      	subs	r6, #3
 8007dfa:	42b4      	cmp	r4, r6
 8007dfc:	bf88      	it	hi
 8007dfe:	2304      	movhi	r3, #4
 8007e00:	4443      	add	r3, r8
 8007e02:	2200      	movs	r2, #0
 8007e04:	f843 2b04 	str.w	r2, [r3], #4
 8007e08:	429f      	cmp	r7, r3
 8007e0a:	d2fb      	bcs.n	8007e04 <__hexnan+0xcc>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	b91b      	cbnz	r3, 8007e18 <__hexnan+0xe0>
 8007e10:	4547      	cmp	r7, r8
 8007e12:	d127      	bne.n	8007e64 <__hexnan+0x12c>
 8007e14:	2301      	movs	r3, #1
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	2005      	movs	r0, #5
 8007e1a:	e026      	b.n	8007e6a <__hexnan+0x132>
 8007e1c:	3501      	adds	r5, #1
 8007e1e:	2d08      	cmp	r5, #8
 8007e20:	f10b 0b01 	add.w	fp, fp, #1
 8007e24:	dd06      	ble.n	8007e34 <__hexnan+0xfc>
 8007e26:	4544      	cmp	r4, r8
 8007e28:	d9c3      	bls.n	8007db2 <__hexnan+0x7a>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e30:	2501      	movs	r5, #1
 8007e32:	3c04      	subs	r4, #4
 8007e34:	6822      	ldr	r2, [r4, #0]
 8007e36:	f000 000f 	and.w	r0, r0, #15
 8007e3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007e3e:	6022      	str	r2, [r4, #0]
 8007e40:	e7b7      	b.n	8007db2 <__hexnan+0x7a>
 8007e42:	2508      	movs	r5, #8
 8007e44:	e7b5      	b.n	8007db2 <__hexnan+0x7a>
 8007e46:	9b01      	ldr	r3, [sp, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0df      	beq.n	8007e0c <__hexnan+0xd4>
 8007e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e50:	f1c3 0320 	rsb	r3, r3, #32
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
 8007e58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e5c:	401a      	ands	r2, r3
 8007e5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007e62:	e7d3      	b.n	8007e0c <__hexnan+0xd4>
 8007e64:	3f04      	subs	r7, #4
 8007e66:	e7d1      	b.n	8007e0c <__hexnan+0xd4>
 8007e68:	2004      	movs	r0, #4
 8007e6a:	b007      	add	sp, #28
 8007e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e70 <_localeconv_r>:
 8007e70:	4800      	ldr	r0, [pc, #0]	; (8007e74 <_localeconv_r+0x4>)
 8007e72:	4770      	bx	lr
 8007e74:	20000168 	.word	0x20000168

08007e78 <malloc>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <malloc+0xc>)
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	f000 bd3d 	b.w	80088fc <_malloc_r>
 8007e82:	bf00      	nop
 8007e84:	20000010 	.word	0x20000010

08007e88 <__ascii_mbtowc>:
 8007e88:	b082      	sub	sp, #8
 8007e8a:	b901      	cbnz	r1, 8007e8e <__ascii_mbtowc+0x6>
 8007e8c:	a901      	add	r1, sp, #4
 8007e8e:	b142      	cbz	r2, 8007ea2 <__ascii_mbtowc+0x1a>
 8007e90:	b14b      	cbz	r3, 8007ea6 <__ascii_mbtowc+0x1e>
 8007e92:	7813      	ldrb	r3, [r2, #0]
 8007e94:	600b      	str	r3, [r1, #0]
 8007e96:	7812      	ldrb	r2, [r2, #0]
 8007e98:	1e10      	subs	r0, r2, #0
 8007e9a:	bf18      	it	ne
 8007e9c:	2001      	movne	r0, #1
 8007e9e:	b002      	add	sp, #8
 8007ea0:	4770      	bx	lr
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	e7fb      	b.n	8007e9e <__ascii_mbtowc+0x16>
 8007ea6:	f06f 0001 	mvn.w	r0, #1
 8007eaa:	e7f8      	b.n	8007e9e <__ascii_mbtowc+0x16>

08007eac <memcpy>:
 8007eac:	440a      	add	r2, r1
 8007eae:	4291      	cmp	r1, r2
 8007eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eb4:	d100      	bne.n	8007eb8 <memcpy+0xc>
 8007eb6:	4770      	bx	lr
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ec2:	4291      	cmp	r1, r2
 8007ec4:	d1f9      	bne.n	8007eba <memcpy+0xe>
 8007ec6:	bd10      	pop	{r4, pc}

08007ec8 <_Balloc>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ecc:	4604      	mov	r4, r0
 8007ece:	460d      	mov	r5, r1
 8007ed0:	b976      	cbnz	r6, 8007ef0 <_Balloc+0x28>
 8007ed2:	2010      	movs	r0, #16
 8007ed4:	f7ff ffd0 	bl	8007e78 <malloc>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	6260      	str	r0, [r4, #36]	; 0x24
 8007edc:	b920      	cbnz	r0, 8007ee8 <_Balloc+0x20>
 8007ede:	4b18      	ldr	r3, [pc, #96]	; (8007f40 <_Balloc+0x78>)
 8007ee0:	4818      	ldr	r0, [pc, #96]	; (8007f44 <_Balloc+0x7c>)
 8007ee2:	2166      	movs	r1, #102	; 0x66
 8007ee4:	f000 fef8 	bl	8008cd8 <__assert_func>
 8007ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eec:	6006      	str	r6, [r0, #0]
 8007eee:	60c6      	str	r6, [r0, #12]
 8007ef0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ef2:	68f3      	ldr	r3, [r6, #12]
 8007ef4:	b183      	cbz	r3, 8007f18 <_Balloc+0x50>
 8007ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007efe:	b9b8      	cbnz	r0, 8007f30 <_Balloc+0x68>
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f605 	lsl.w	r6, r1, r5
 8007f06:	1d72      	adds	r2, r6, #5
 8007f08:	0092      	lsls	r2, r2, #2
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fc97 	bl	800883e <_calloc_r>
 8007f10:	b160      	cbz	r0, 8007f2c <_Balloc+0x64>
 8007f12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f16:	e00e      	b.n	8007f36 <_Balloc+0x6e>
 8007f18:	2221      	movs	r2, #33	; 0x21
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fc8e 	bl	800883e <_calloc_r>
 8007f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f24:	60f0      	str	r0, [r6, #12]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e4      	bne.n	8007ef6 <_Balloc+0x2e>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	6802      	ldr	r2, [r0, #0]
 8007f32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f36:	2300      	movs	r3, #0
 8007f38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f3c:	e7f7      	b.n	8007f2e <_Balloc+0x66>
 8007f3e:	bf00      	nop
 8007f40:	08009b06 	.word	0x08009b06
 8007f44:	08009c0c 	.word	0x08009c0c

08007f48 <_Bfree>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b976      	cbnz	r6, 8007f70 <_Bfree+0x28>
 8007f52:	2010      	movs	r0, #16
 8007f54:	f7ff ff90 	bl	8007e78 <malloc>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6268      	str	r0, [r5, #36]	; 0x24
 8007f5c:	b920      	cbnz	r0, 8007f68 <_Bfree+0x20>
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <_Bfree+0x3c>)
 8007f60:	4809      	ldr	r0, [pc, #36]	; (8007f88 <_Bfree+0x40>)
 8007f62:	218a      	movs	r1, #138	; 0x8a
 8007f64:	f000 feb8 	bl	8008cd8 <__assert_func>
 8007f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f6c:	6006      	str	r6, [r0, #0]
 8007f6e:	60c6      	str	r6, [r0, #12]
 8007f70:	b13c      	cbz	r4, 8007f82 <_Bfree+0x3a>
 8007f72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f74:	6862      	ldr	r2, [r4, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f7c:	6021      	str	r1, [r4, #0]
 8007f7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	08009b06 	.word	0x08009b06
 8007f88:	08009c0c 	.word	0x08009c0c

08007f8c <__multadd>:
 8007f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f90:	690e      	ldr	r6, [r1, #16]
 8007f92:	4607      	mov	r7, r0
 8007f94:	4698      	mov	r8, r3
 8007f96:	460c      	mov	r4, r1
 8007f98:	f101 0014 	add.w	r0, r1, #20
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	6805      	ldr	r5, [r0, #0]
 8007fa0:	b2a9      	uxth	r1, r5
 8007fa2:	fb02 8101 	mla	r1, r2, r1, r8
 8007fa6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007faa:	0c2d      	lsrs	r5, r5, #16
 8007fac:	fb02 c505 	mla	r5, r2, r5, ip
 8007fb0:	b289      	uxth	r1, r1
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007fb8:	429e      	cmp	r6, r3
 8007fba:	f840 1b04 	str.w	r1, [r0], #4
 8007fbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007fc2:	dcec      	bgt.n	8007f9e <__multadd+0x12>
 8007fc4:	f1b8 0f00 	cmp.w	r8, #0
 8007fc8:	d022      	beq.n	8008010 <__multadd+0x84>
 8007fca:	68a3      	ldr	r3, [r4, #8]
 8007fcc:	42b3      	cmp	r3, r6
 8007fce:	dc19      	bgt.n	8008004 <__multadd+0x78>
 8007fd0:	6861      	ldr	r1, [r4, #4]
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	3101      	adds	r1, #1
 8007fd6:	f7ff ff77 	bl	8007ec8 <_Balloc>
 8007fda:	4605      	mov	r5, r0
 8007fdc:	b928      	cbnz	r0, 8007fea <__multadd+0x5e>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <__multadd+0x8c>)
 8007fe2:	480e      	ldr	r0, [pc, #56]	; (800801c <__multadd+0x90>)
 8007fe4:	21b5      	movs	r1, #181	; 0xb5
 8007fe6:	f000 fe77 	bl	8008cd8 <__assert_func>
 8007fea:	6922      	ldr	r2, [r4, #16]
 8007fec:	3202      	adds	r2, #2
 8007fee:	f104 010c 	add.w	r1, r4, #12
 8007ff2:	0092      	lsls	r2, r2, #2
 8007ff4:	300c      	adds	r0, #12
 8007ff6:	f7ff ff59 	bl	8007eac <memcpy>
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	f7ff ffa3 	bl	8007f48 <_Bfree>
 8008002:	462c      	mov	r4, r5
 8008004:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008008:	3601      	adds	r6, #1
 800800a:	f8c3 8014 	str.w	r8, [r3, #20]
 800800e:	6126      	str	r6, [r4, #16]
 8008010:	4620      	mov	r0, r4
 8008012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008016:	bf00      	nop
 8008018:	08009b7c 	.word	0x08009b7c
 800801c:	08009c0c 	.word	0x08009c0c

08008020 <__s2b>:
 8008020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008024:	460c      	mov	r4, r1
 8008026:	4615      	mov	r5, r2
 8008028:	461f      	mov	r7, r3
 800802a:	2209      	movs	r2, #9
 800802c:	3308      	adds	r3, #8
 800802e:	4606      	mov	r6, r0
 8008030:	fb93 f3f2 	sdiv	r3, r3, r2
 8008034:	2100      	movs	r1, #0
 8008036:	2201      	movs	r2, #1
 8008038:	429a      	cmp	r2, r3
 800803a:	db09      	blt.n	8008050 <__s2b+0x30>
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff ff43 	bl	8007ec8 <_Balloc>
 8008042:	b940      	cbnz	r0, 8008056 <__s2b+0x36>
 8008044:	4602      	mov	r2, r0
 8008046:	4b19      	ldr	r3, [pc, #100]	; (80080ac <__s2b+0x8c>)
 8008048:	4819      	ldr	r0, [pc, #100]	; (80080b0 <__s2b+0x90>)
 800804a:	21ce      	movs	r1, #206	; 0xce
 800804c:	f000 fe44 	bl	8008cd8 <__assert_func>
 8008050:	0052      	lsls	r2, r2, #1
 8008052:	3101      	adds	r1, #1
 8008054:	e7f0      	b.n	8008038 <__s2b+0x18>
 8008056:	9b08      	ldr	r3, [sp, #32]
 8008058:	6143      	str	r3, [r0, #20]
 800805a:	2d09      	cmp	r5, #9
 800805c:	f04f 0301 	mov.w	r3, #1
 8008060:	6103      	str	r3, [r0, #16]
 8008062:	dd16      	ble.n	8008092 <__s2b+0x72>
 8008064:	f104 0909 	add.w	r9, r4, #9
 8008068:	46c8      	mov	r8, r9
 800806a:	442c      	add	r4, r5
 800806c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008070:	4601      	mov	r1, r0
 8008072:	3b30      	subs	r3, #48	; 0x30
 8008074:	220a      	movs	r2, #10
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff ff88 	bl	8007f8c <__multadd>
 800807c:	45a0      	cmp	r8, r4
 800807e:	d1f5      	bne.n	800806c <__s2b+0x4c>
 8008080:	f1a5 0408 	sub.w	r4, r5, #8
 8008084:	444c      	add	r4, r9
 8008086:	1b2d      	subs	r5, r5, r4
 8008088:	1963      	adds	r3, r4, r5
 800808a:	42bb      	cmp	r3, r7
 800808c:	db04      	blt.n	8008098 <__s2b+0x78>
 800808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008092:	340a      	adds	r4, #10
 8008094:	2509      	movs	r5, #9
 8008096:	e7f6      	b.n	8008086 <__s2b+0x66>
 8008098:	f814 3b01 	ldrb.w	r3, [r4], #1
 800809c:	4601      	mov	r1, r0
 800809e:	3b30      	subs	r3, #48	; 0x30
 80080a0:	220a      	movs	r2, #10
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff ff72 	bl	8007f8c <__multadd>
 80080a8:	e7ee      	b.n	8008088 <__s2b+0x68>
 80080aa:	bf00      	nop
 80080ac:	08009b7c 	.word	0x08009b7c
 80080b0:	08009c0c 	.word	0x08009c0c

080080b4 <__hi0bits>:
 80080b4:	0c03      	lsrs	r3, r0, #16
 80080b6:	041b      	lsls	r3, r3, #16
 80080b8:	b9d3      	cbnz	r3, 80080f0 <__hi0bits+0x3c>
 80080ba:	0400      	lsls	r0, r0, #16
 80080bc:	2310      	movs	r3, #16
 80080be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080c2:	bf04      	itt	eq
 80080c4:	0200      	lsleq	r0, r0, #8
 80080c6:	3308      	addeq	r3, #8
 80080c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080cc:	bf04      	itt	eq
 80080ce:	0100      	lsleq	r0, r0, #4
 80080d0:	3304      	addeq	r3, #4
 80080d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080d6:	bf04      	itt	eq
 80080d8:	0080      	lsleq	r0, r0, #2
 80080da:	3302      	addeq	r3, #2
 80080dc:	2800      	cmp	r0, #0
 80080de:	db05      	blt.n	80080ec <__hi0bits+0x38>
 80080e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080e4:	f103 0301 	add.w	r3, r3, #1
 80080e8:	bf08      	it	eq
 80080ea:	2320      	moveq	r3, #32
 80080ec:	4618      	mov	r0, r3
 80080ee:	4770      	bx	lr
 80080f0:	2300      	movs	r3, #0
 80080f2:	e7e4      	b.n	80080be <__hi0bits+0xa>

080080f4 <__lo0bits>:
 80080f4:	6803      	ldr	r3, [r0, #0]
 80080f6:	f013 0207 	ands.w	r2, r3, #7
 80080fa:	4601      	mov	r1, r0
 80080fc:	d00b      	beq.n	8008116 <__lo0bits+0x22>
 80080fe:	07da      	lsls	r2, r3, #31
 8008100:	d424      	bmi.n	800814c <__lo0bits+0x58>
 8008102:	0798      	lsls	r0, r3, #30
 8008104:	bf49      	itett	mi
 8008106:	085b      	lsrmi	r3, r3, #1
 8008108:	089b      	lsrpl	r3, r3, #2
 800810a:	2001      	movmi	r0, #1
 800810c:	600b      	strmi	r3, [r1, #0]
 800810e:	bf5c      	itt	pl
 8008110:	600b      	strpl	r3, [r1, #0]
 8008112:	2002      	movpl	r0, #2
 8008114:	4770      	bx	lr
 8008116:	b298      	uxth	r0, r3
 8008118:	b9b0      	cbnz	r0, 8008148 <__lo0bits+0x54>
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	2010      	movs	r0, #16
 800811e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008122:	bf04      	itt	eq
 8008124:	0a1b      	lsreq	r3, r3, #8
 8008126:	3008      	addeq	r0, #8
 8008128:	071a      	lsls	r2, r3, #28
 800812a:	bf04      	itt	eq
 800812c:	091b      	lsreq	r3, r3, #4
 800812e:	3004      	addeq	r0, #4
 8008130:	079a      	lsls	r2, r3, #30
 8008132:	bf04      	itt	eq
 8008134:	089b      	lsreq	r3, r3, #2
 8008136:	3002      	addeq	r0, #2
 8008138:	07da      	lsls	r2, r3, #31
 800813a:	d403      	bmi.n	8008144 <__lo0bits+0x50>
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	f100 0001 	add.w	r0, r0, #1
 8008142:	d005      	beq.n	8008150 <__lo0bits+0x5c>
 8008144:	600b      	str	r3, [r1, #0]
 8008146:	4770      	bx	lr
 8008148:	4610      	mov	r0, r2
 800814a:	e7e8      	b.n	800811e <__lo0bits+0x2a>
 800814c:	2000      	movs	r0, #0
 800814e:	4770      	bx	lr
 8008150:	2020      	movs	r0, #32
 8008152:	4770      	bx	lr

08008154 <__i2b>:
 8008154:	b510      	push	{r4, lr}
 8008156:	460c      	mov	r4, r1
 8008158:	2101      	movs	r1, #1
 800815a:	f7ff feb5 	bl	8007ec8 <_Balloc>
 800815e:	4602      	mov	r2, r0
 8008160:	b928      	cbnz	r0, 800816e <__i2b+0x1a>
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <__i2b+0x24>)
 8008164:	4805      	ldr	r0, [pc, #20]	; (800817c <__i2b+0x28>)
 8008166:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800816a:	f000 fdb5 	bl	8008cd8 <__assert_func>
 800816e:	2301      	movs	r3, #1
 8008170:	6144      	str	r4, [r0, #20]
 8008172:	6103      	str	r3, [r0, #16]
 8008174:	bd10      	pop	{r4, pc}
 8008176:	bf00      	nop
 8008178:	08009b7c 	.word	0x08009b7c
 800817c:	08009c0c 	.word	0x08009c0c

08008180 <__multiply>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	4614      	mov	r4, r2
 8008186:	690a      	ldr	r2, [r1, #16]
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	429a      	cmp	r2, r3
 800818c:	bfb8      	it	lt
 800818e:	460b      	movlt	r3, r1
 8008190:	460d      	mov	r5, r1
 8008192:	bfbc      	itt	lt
 8008194:	4625      	movlt	r5, r4
 8008196:	461c      	movlt	r4, r3
 8008198:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800819c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80081a0:	68ab      	ldr	r3, [r5, #8]
 80081a2:	6869      	ldr	r1, [r5, #4]
 80081a4:	eb0a 0709 	add.w	r7, sl, r9
 80081a8:	42bb      	cmp	r3, r7
 80081aa:	b085      	sub	sp, #20
 80081ac:	bfb8      	it	lt
 80081ae:	3101      	addlt	r1, #1
 80081b0:	f7ff fe8a 	bl	8007ec8 <_Balloc>
 80081b4:	b930      	cbnz	r0, 80081c4 <__multiply+0x44>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b42      	ldr	r3, [pc, #264]	; (80082c4 <__multiply+0x144>)
 80081ba:	4843      	ldr	r0, [pc, #268]	; (80082c8 <__multiply+0x148>)
 80081bc:	f240 115d 	movw	r1, #349	; 0x15d
 80081c0:	f000 fd8a 	bl	8008cd8 <__assert_func>
 80081c4:	f100 0614 	add.w	r6, r0, #20
 80081c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80081cc:	4633      	mov	r3, r6
 80081ce:	2200      	movs	r2, #0
 80081d0:	4543      	cmp	r3, r8
 80081d2:	d31e      	bcc.n	8008212 <__multiply+0x92>
 80081d4:	f105 0c14 	add.w	ip, r5, #20
 80081d8:	f104 0314 	add.w	r3, r4, #20
 80081dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80081e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80081e4:	9202      	str	r2, [sp, #8]
 80081e6:	ebac 0205 	sub.w	r2, ip, r5
 80081ea:	3a15      	subs	r2, #21
 80081ec:	f022 0203 	bic.w	r2, r2, #3
 80081f0:	3204      	adds	r2, #4
 80081f2:	f105 0115 	add.w	r1, r5, #21
 80081f6:	458c      	cmp	ip, r1
 80081f8:	bf38      	it	cc
 80081fa:	2204      	movcc	r2, #4
 80081fc:	9201      	str	r2, [sp, #4]
 80081fe:	9a02      	ldr	r2, [sp, #8]
 8008200:	9303      	str	r3, [sp, #12]
 8008202:	429a      	cmp	r2, r3
 8008204:	d808      	bhi.n	8008218 <__multiply+0x98>
 8008206:	2f00      	cmp	r7, #0
 8008208:	dc55      	bgt.n	80082b6 <__multiply+0x136>
 800820a:	6107      	str	r7, [r0, #16]
 800820c:	b005      	add	sp, #20
 800820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008212:	f843 2b04 	str.w	r2, [r3], #4
 8008216:	e7db      	b.n	80081d0 <__multiply+0x50>
 8008218:	f8b3 a000 	ldrh.w	sl, [r3]
 800821c:	f1ba 0f00 	cmp.w	sl, #0
 8008220:	d020      	beq.n	8008264 <__multiply+0xe4>
 8008222:	f105 0e14 	add.w	lr, r5, #20
 8008226:	46b1      	mov	r9, r6
 8008228:	2200      	movs	r2, #0
 800822a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800822e:	f8d9 b000 	ldr.w	fp, [r9]
 8008232:	b2a1      	uxth	r1, r4
 8008234:	fa1f fb8b 	uxth.w	fp, fp
 8008238:	fb0a b101 	mla	r1, sl, r1, fp
 800823c:	4411      	add	r1, r2
 800823e:	f8d9 2000 	ldr.w	r2, [r9]
 8008242:	0c24      	lsrs	r4, r4, #16
 8008244:	0c12      	lsrs	r2, r2, #16
 8008246:	fb0a 2404 	mla	r4, sl, r4, r2
 800824a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800824e:	b289      	uxth	r1, r1
 8008250:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008254:	45f4      	cmp	ip, lr
 8008256:	f849 1b04 	str.w	r1, [r9], #4
 800825a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800825e:	d8e4      	bhi.n	800822a <__multiply+0xaa>
 8008260:	9901      	ldr	r1, [sp, #4]
 8008262:	5072      	str	r2, [r6, r1]
 8008264:	9a03      	ldr	r2, [sp, #12]
 8008266:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800826a:	3304      	adds	r3, #4
 800826c:	f1b9 0f00 	cmp.w	r9, #0
 8008270:	d01f      	beq.n	80082b2 <__multiply+0x132>
 8008272:	6834      	ldr	r4, [r6, #0]
 8008274:	f105 0114 	add.w	r1, r5, #20
 8008278:	46b6      	mov	lr, r6
 800827a:	f04f 0a00 	mov.w	sl, #0
 800827e:	880a      	ldrh	r2, [r1, #0]
 8008280:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008284:	fb09 b202 	mla	r2, r9, r2, fp
 8008288:	4492      	add	sl, r2
 800828a:	b2a4      	uxth	r4, r4
 800828c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008290:	f84e 4b04 	str.w	r4, [lr], #4
 8008294:	f851 4b04 	ldr.w	r4, [r1], #4
 8008298:	f8be 2000 	ldrh.w	r2, [lr]
 800829c:	0c24      	lsrs	r4, r4, #16
 800829e:	fb09 2404 	mla	r4, r9, r4, r2
 80082a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80082a6:	458c      	cmp	ip, r1
 80082a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80082ac:	d8e7      	bhi.n	800827e <__multiply+0xfe>
 80082ae:	9a01      	ldr	r2, [sp, #4]
 80082b0:	50b4      	str	r4, [r6, r2]
 80082b2:	3604      	adds	r6, #4
 80082b4:	e7a3      	b.n	80081fe <__multiply+0x7e>
 80082b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1a5      	bne.n	800820a <__multiply+0x8a>
 80082be:	3f01      	subs	r7, #1
 80082c0:	e7a1      	b.n	8008206 <__multiply+0x86>
 80082c2:	bf00      	nop
 80082c4:	08009b7c 	.word	0x08009b7c
 80082c8:	08009c0c 	.word	0x08009c0c

080082cc <__pow5mult>:
 80082cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d0:	4615      	mov	r5, r2
 80082d2:	f012 0203 	ands.w	r2, r2, #3
 80082d6:	4606      	mov	r6, r0
 80082d8:	460f      	mov	r7, r1
 80082da:	d007      	beq.n	80082ec <__pow5mult+0x20>
 80082dc:	4c25      	ldr	r4, [pc, #148]	; (8008374 <__pow5mult+0xa8>)
 80082de:	3a01      	subs	r2, #1
 80082e0:	2300      	movs	r3, #0
 80082e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082e6:	f7ff fe51 	bl	8007f8c <__multadd>
 80082ea:	4607      	mov	r7, r0
 80082ec:	10ad      	asrs	r5, r5, #2
 80082ee:	d03d      	beq.n	800836c <__pow5mult+0xa0>
 80082f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082f2:	b97c      	cbnz	r4, 8008314 <__pow5mult+0x48>
 80082f4:	2010      	movs	r0, #16
 80082f6:	f7ff fdbf 	bl	8007e78 <malloc>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6270      	str	r0, [r6, #36]	; 0x24
 80082fe:	b928      	cbnz	r0, 800830c <__pow5mult+0x40>
 8008300:	4b1d      	ldr	r3, [pc, #116]	; (8008378 <__pow5mult+0xac>)
 8008302:	481e      	ldr	r0, [pc, #120]	; (800837c <__pow5mult+0xb0>)
 8008304:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008308:	f000 fce6 	bl	8008cd8 <__assert_func>
 800830c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008310:	6004      	str	r4, [r0, #0]
 8008312:	60c4      	str	r4, [r0, #12]
 8008314:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800831c:	b94c      	cbnz	r4, 8008332 <__pow5mult+0x66>
 800831e:	f240 2171 	movw	r1, #625	; 0x271
 8008322:	4630      	mov	r0, r6
 8008324:	f7ff ff16 	bl	8008154 <__i2b>
 8008328:	2300      	movs	r3, #0
 800832a:	f8c8 0008 	str.w	r0, [r8, #8]
 800832e:	4604      	mov	r4, r0
 8008330:	6003      	str	r3, [r0, #0]
 8008332:	f04f 0900 	mov.w	r9, #0
 8008336:	07eb      	lsls	r3, r5, #31
 8008338:	d50a      	bpl.n	8008350 <__pow5mult+0x84>
 800833a:	4639      	mov	r1, r7
 800833c:	4622      	mov	r2, r4
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff ff1e 	bl	8008180 <__multiply>
 8008344:	4639      	mov	r1, r7
 8008346:	4680      	mov	r8, r0
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff fdfd 	bl	8007f48 <_Bfree>
 800834e:	4647      	mov	r7, r8
 8008350:	106d      	asrs	r5, r5, #1
 8008352:	d00b      	beq.n	800836c <__pow5mult+0xa0>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	b938      	cbnz	r0, 8008368 <__pow5mult+0x9c>
 8008358:	4622      	mov	r2, r4
 800835a:	4621      	mov	r1, r4
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff ff0f 	bl	8008180 <__multiply>
 8008362:	6020      	str	r0, [r4, #0]
 8008364:	f8c0 9000 	str.w	r9, [r0]
 8008368:	4604      	mov	r4, r0
 800836a:	e7e4      	b.n	8008336 <__pow5mult+0x6a>
 800836c:	4638      	mov	r0, r7
 800836e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008372:	bf00      	nop
 8008374:	08009d60 	.word	0x08009d60
 8008378:	08009b06 	.word	0x08009b06
 800837c:	08009c0c 	.word	0x08009c0c

08008380 <__lshift>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	460c      	mov	r4, r1
 8008386:	6849      	ldr	r1, [r1, #4]
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	4607      	mov	r7, r0
 8008392:	4691      	mov	r9, r2
 8008394:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008398:	f108 0601 	add.w	r6, r8, #1
 800839c:	42b3      	cmp	r3, r6
 800839e:	db0b      	blt.n	80083b8 <__lshift+0x38>
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff fd91 	bl	8007ec8 <_Balloc>
 80083a6:	4605      	mov	r5, r0
 80083a8:	b948      	cbnz	r0, 80083be <__lshift+0x3e>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4b28      	ldr	r3, [pc, #160]	; (8008450 <__lshift+0xd0>)
 80083ae:	4829      	ldr	r0, [pc, #164]	; (8008454 <__lshift+0xd4>)
 80083b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083b4:	f000 fc90 	bl	8008cd8 <__assert_func>
 80083b8:	3101      	adds	r1, #1
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	e7ee      	b.n	800839c <__lshift+0x1c>
 80083be:	2300      	movs	r3, #0
 80083c0:	f100 0114 	add.w	r1, r0, #20
 80083c4:	f100 0210 	add.w	r2, r0, #16
 80083c8:	4618      	mov	r0, r3
 80083ca:	4553      	cmp	r3, sl
 80083cc:	db33      	blt.n	8008436 <__lshift+0xb6>
 80083ce:	6920      	ldr	r0, [r4, #16]
 80083d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083d4:	f104 0314 	add.w	r3, r4, #20
 80083d8:	f019 091f 	ands.w	r9, r9, #31
 80083dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083e4:	d02b      	beq.n	800843e <__lshift+0xbe>
 80083e6:	f1c9 0e20 	rsb	lr, r9, #32
 80083ea:	468a      	mov	sl, r1
 80083ec:	2200      	movs	r2, #0
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	fa00 f009 	lsl.w	r0, r0, r9
 80083f4:	4302      	orrs	r2, r0
 80083f6:	f84a 2b04 	str.w	r2, [sl], #4
 80083fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fe:	459c      	cmp	ip, r3
 8008400:	fa22 f20e 	lsr.w	r2, r2, lr
 8008404:	d8f3      	bhi.n	80083ee <__lshift+0x6e>
 8008406:	ebac 0304 	sub.w	r3, ip, r4
 800840a:	3b15      	subs	r3, #21
 800840c:	f023 0303 	bic.w	r3, r3, #3
 8008410:	3304      	adds	r3, #4
 8008412:	f104 0015 	add.w	r0, r4, #21
 8008416:	4584      	cmp	ip, r0
 8008418:	bf38      	it	cc
 800841a:	2304      	movcc	r3, #4
 800841c:	50ca      	str	r2, [r1, r3]
 800841e:	b10a      	cbz	r2, 8008424 <__lshift+0xa4>
 8008420:	f108 0602 	add.w	r6, r8, #2
 8008424:	3e01      	subs	r6, #1
 8008426:	4638      	mov	r0, r7
 8008428:	612e      	str	r6, [r5, #16]
 800842a:	4621      	mov	r1, r4
 800842c:	f7ff fd8c 	bl	8007f48 <_Bfree>
 8008430:	4628      	mov	r0, r5
 8008432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008436:	f842 0f04 	str.w	r0, [r2, #4]!
 800843a:	3301      	adds	r3, #1
 800843c:	e7c5      	b.n	80083ca <__lshift+0x4a>
 800843e:	3904      	subs	r1, #4
 8008440:	f853 2b04 	ldr.w	r2, [r3], #4
 8008444:	f841 2f04 	str.w	r2, [r1, #4]!
 8008448:	459c      	cmp	ip, r3
 800844a:	d8f9      	bhi.n	8008440 <__lshift+0xc0>
 800844c:	e7ea      	b.n	8008424 <__lshift+0xa4>
 800844e:	bf00      	nop
 8008450:	08009b7c 	.word	0x08009b7c
 8008454:	08009c0c 	.word	0x08009c0c

08008458 <__mcmp>:
 8008458:	b530      	push	{r4, r5, lr}
 800845a:	6902      	ldr	r2, [r0, #16]
 800845c:	690c      	ldr	r4, [r1, #16]
 800845e:	1b12      	subs	r2, r2, r4
 8008460:	d10e      	bne.n	8008480 <__mcmp+0x28>
 8008462:	f100 0314 	add.w	r3, r0, #20
 8008466:	3114      	adds	r1, #20
 8008468:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800846c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008470:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008474:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008478:	42a5      	cmp	r5, r4
 800847a:	d003      	beq.n	8008484 <__mcmp+0x2c>
 800847c:	d305      	bcc.n	800848a <__mcmp+0x32>
 800847e:	2201      	movs	r2, #1
 8008480:	4610      	mov	r0, r2
 8008482:	bd30      	pop	{r4, r5, pc}
 8008484:	4283      	cmp	r3, r0
 8008486:	d3f3      	bcc.n	8008470 <__mcmp+0x18>
 8008488:	e7fa      	b.n	8008480 <__mcmp+0x28>
 800848a:	f04f 32ff 	mov.w	r2, #4294967295
 800848e:	e7f7      	b.n	8008480 <__mcmp+0x28>

08008490 <__mdiff>:
 8008490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	460c      	mov	r4, r1
 8008496:	4606      	mov	r6, r0
 8008498:	4611      	mov	r1, r2
 800849a:	4620      	mov	r0, r4
 800849c:	4617      	mov	r7, r2
 800849e:	f7ff ffdb 	bl	8008458 <__mcmp>
 80084a2:	1e05      	subs	r5, r0, #0
 80084a4:	d110      	bne.n	80084c8 <__mdiff+0x38>
 80084a6:	4629      	mov	r1, r5
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff fd0d 	bl	8007ec8 <_Balloc>
 80084ae:	b930      	cbnz	r0, 80084be <__mdiff+0x2e>
 80084b0:	4b39      	ldr	r3, [pc, #228]	; (8008598 <__mdiff+0x108>)
 80084b2:	4602      	mov	r2, r0
 80084b4:	f240 2132 	movw	r1, #562	; 0x232
 80084b8:	4838      	ldr	r0, [pc, #224]	; (800859c <__mdiff+0x10c>)
 80084ba:	f000 fc0d 	bl	8008cd8 <__assert_func>
 80084be:	2301      	movs	r3, #1
 80084c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c8:	bfa4      	itt	ge
 80084ca:	463b      	movge	r3, r7
 80084cc:	4627      	movge	r7, r4
 80084ce:	4630      	mov	r0, r6
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	bfa6      	itte	ge
 80084d4:	461c      	movge	r4, r3
 80084d6:	2500      	movge	r5, #0
 80084d8:	2501      	movlt	r5, #1
 80084da:	f7ff fcf5 	bl	8007ec8 <_Balloc>
 80084de:	b920      	cbnz	r0, 80084ea <__mdiff+0x5a>
 80084e0:	4b2d      	ldr	r3, [pc, #180]	; (8008598 <__mdiff+0x108>)
 80084e2:	4602      	mov	r2, r0
 80084e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084e8:	e7e6      	b.n	80084b8 <__mdiff+0x28>
 80084ea:	693e      	ldr	r6, [r7, #16]
 80084ec:	60c5      	str	r5, [r0, #12]
 80084ee:	6925      	ldr	r5, [r4, #16]
 80084f0:	f107 0114 	add.w	r1, r7, #20
 80084f4:	f104 0914 	add.w	r9, r4, #20
 80084f8:	f100 0e14 	add.w	lr, r0, #20
 80084fc:	f107 0210 	add.w	r2, r7, #16
 8008500:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008504:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008508:	46f2      	mov	sl, lr
 800850a:	2700      	movs	r7, #0
 800850c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008510:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008514:	fa1f f883 	uxth.w	r8, r3
 8008518:	fa17 f78b 	uxtah	r7, r7, fp
 800851c:	0c1b      	lsrs	r3, r3, #16
 800851e:	eba7 0808 	sub.w	r8, r7, r8
 8008522:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008526:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800852a:	fa1f f888 	uxth.w	r8, r8
 800852e:	141f      	asrs	r7, r3, #16
 8008530:	454d      	cmp	r5, r9
 8008532:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008536:	f84a 3b04 	str.w	r3, [sl], #4
 800853a:	d8e7      	bhi.n	800850c <__mdiff+0x7c>
 800853c:	1b2b      	subs	r3, r5, r4
 800853e:	3b15      	subs	r3, #21
 8008540:	f023 0303 	bic.w	r3, r3, #3
 8008544:	3304      	adds	r3, #4
 8008546:	3415      	adds	r4, #21
 8008548:	42a5      	cmp	r5, r4
 800854a:	bf38      	it	cc
 800854c:	2304      	movcc	r3, #4
 800854e:	4419      	add	r1, r3
 8008550:	4473      	add	r3, lr
 8008552:	469e      	mov	lr, r3
 8008554:	460d      	mov	r5, r1
 8008556:	4565      	cmp	r5, ip
 8008558:	d30e      	bcc.n	8008578 <__mdiff+0xe8>
 800855a:	f10c 0203 	add.w	r2, ip, #3
 800855e:	1a52      	subs	r2, r2, r1
 8008560:	f022 0203 	bic.w	r2, r2, #3
 8008564:	3903      	subs	r1, #3
 8008566:	458c      	cmp	ip, r1
 8008568:	bf38      	it	cc
 800856a:	2200      	movcc	r2, #0
 800856c:	441a      	add	r2, r3
 800856e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008572:	b17b      	cbz	r3, 8008594 <__mdiff+0x104>
 8008574:	6106      	str	r6, [r0, #16]
 8008576:	e7a5      	b.n	80084c4 <__mdiff+0x34>
 8008578:	f855 8b04 	ldr.w	r8, [r5], #4
 800857c:	fa17 f488 	uxtah	r4, r7, r8
 8008580:	1422      	asrs	r2, r4, #16
 8008582:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008586:	b2a4      	uxth	r4, r4
 8008588:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800858c:	f84e 4b04 	str.w	r4, [lr], #4
 8008590:	1417      	asrs	r7, r2, #16
 8008592:	e7e0      	b.n	8008556 <__mdiff+0xc6>
 8008594:	3e01      	subs	r6, #1
 8008596:	e7ea      	b.n	800856e <__mdiff+0xde>
 8008598:	08009b7c 	.word	0x08009b7c
 800859c:	08009c0c 	.word	0x08009c0c

080085a0 <__ulp>:
 80085a0:	b082      	sub	sp, #8
 80085a2:	ed8d 0b00 	vstr	d0, [sp]
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	4912      	ldr	r1, [pc, #72]	; (80085f4 <__ulp+0x54>)
 80085aa:	4019      	ands	r1, r3
 80085ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80085b0:	2900      	cmp	r1, #0
 80085b2:	dd05      	ble.n	80085c0 <__ulp+0x20>
 80085b4:	2200      	movs	r2, #0
 80085b6:	460b      	mov	r3, r1
 80085b8:	ec43 2b10 	vmov	d0, r2, r3
 80085bc:	b002      	add	sp, #8
 80085be:	4770      	bx	lr
 80085c0:	4249      	negs	r1, r1
 80085c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80085c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80085ca:	f04f 0200 	mov.w	r2, #0
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	da04      	bge.n	80085de <__ulp+0x3e>
 80085d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80085d8:	fa41 f300 	asr.w	r3, r1, r0
 80085dc:	e7ec      	b.n	80085b8 <__ulp+0x18>
 80085de:	f1a0 0114 	sub.w	r1, r0, #20
 80085e2:	291e      	cmp	r1, #30
 80085e4:	bfda      	itte	le
 80085e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80085ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80085ee:	2101      	movgt	r1, #1
 80085f0:	460a      	mov	r2, r1
 80085f2:	e7e1      	b.n	80085b8 <__ulp+0x18>
 80085f4:	7ff00000 	.word	0x7ff00000

080085f8 <__b2d>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	6905      	ldr	r5, [r0, #16]
 80085fc:	f100 0714 	add.w	r7, r0, #20
 8008600:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008604:	1f2e      	subs	r6, r5, #4
 8008606:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800860a:	4620      	mov	r0, r4
 800860c:	f7ff fd52 	bl	80080b4 <__hi0bits>
 8008610:	f1c0 0320 	rsb	r3, r0, #32
 8008614:	280a      	cmp	r0, #10
 8008616:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008694 <__b2d+0x9c>
 800861a:	600b      	str	r3, [r1, #0]
 800861c:	dc14      	bgt.n	8008648 <__b2d+0x50>
 800861e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008622:	fa24 f10e 	lsr.w	r1, r4, lr
 8008626:	42b7      	cmp	r7, r6
 8008628:	ea41 030c 	orr.w	r3, r1, ip
 800862c:	bf34      	ite	cc
 800862e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008632:	2100      	movcs	r1, #0
 8008634:	3015      	adds	r0, #21
 8008636:	fa04 f000 	lsl.w	r0, r4, r0
 800863a:	fa21 f10e 	lsr.w	r1, r1, lr
 800863e:	ea40 0201 	orr.w	r2, r0, r1
 8008642:	ec43 2b10 	vmov	d0, r2, r3
 8008646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008648:	42b7      	cmp	r7, r6
 800864a:	bf3a      	itte	cc
 800864c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008650:	f1a5 0608 	subcc.w	r6, r5, #8
 8008654:	2100      	movcs	r1, #0
 8008656:	380b      	subs	r0, #11
 8008658:	d017      	beq.n	800868a <__b2d+0x92>
 800865a:	f1c0 0c20 	rsb	ip, r0, #32
 800865e:	fa04 f500 	lsl.w	r5, r4, r0
 8008662:	42be      	cmp	r6, r7
 8008664:	fa21 f40c 	lsr.w	r4, r1, ip
 8008668:	ea45 0504 	orr.w	r5, r5, r4
 800866c:	bf8c      	ite	hi
 800866e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008672:	2400      	movls	r4, #0
 8008674:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008678:	fa01 f000 	lsl.w	r0, r1, r0
 800867c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008680:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008684:	ea40 0204 	orr.w	r2, r0, r4
 8008688:	e7db      	b.n	8008642 <__b2d+0x4a>
 800868a:	ea44 030c 	orr.w	r3, r4, ip
 800868e:	460a      	mov	r2, r1
 8008690:	e7d7      	b.n	8008642 <__b2d+0x4a>
 8008692:	bf00      	nop
 8008694:	3ff00000 	.word	0x3ff00000

08008698 <__d2b>:
 8008698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800869c:	4689      	mov	r9, r1
 800869e:	2101      	movs	r1, #1
 80086a0:	ec57 6b10 	vmov	r6, r7, d0
 80086a4:	4690      	mov	r8, r2
 80086a6:	f7ff fc0f 	bl	8007ec8 <_Balloc>
 80086aa:	4604      	mov	r4, r0
 80086ac:	b930      	cbnz	r0, 80086bc <__d2b+0x24>
 80086ae:	4602      	mov	r2, r0
 80086b0:	4b25      	ldr	r3, [pc, #148]	; (8008748 <__d2b+0xb0>)
 80086b2:	4826      	ldr	r0, [pc, #152]	; (800874c <__d2b+0xb4>)
 80086b4:	f240 310a 	movw	r1, #778	; 0x30a
 80086b8:	f000 fb0e 	bl	8008cd8 <__assert_func>
 80086bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086c4:	bb35      	cbnz	r5, 8008714 <__d2b+0x7c>
 80086c6:	2e00      	cmp	r6, #0
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	d028      	beq.n	800871e <__d2b+0x86>
 80086cc:	4668      	mov	r0, sp
 80086ce:	9600      	str	r6, [sp, #0]
 80086d0:	f7ff fd10 	bl	80080f4 <__lo0bits>
 80086d4:	9900      	ldr	r1, [sp, #0]
 80086d6:	b300      	cbz	r0, 800871a <__d2b+0x82>
 80086d8:	9a01      	ldr	r2, [sp, #4]
 80086da:	f1c0 0320 	rsb	r3, r0, #32
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	430b      	orrs	r3, r1
 80086e4:	40c2      	lsrs	r2, r0
 80086e6:	6163      	str	r3, [r4, #20]
 80086e8:	9201      	str	r2, [sp, #4]
 80086ea:	9b01      	ldr	r3, [sp, #4]
 80086ec:	61a3      	str	r3, [r4, #24]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bf14      	ite	ne
 80086f2:	2202      	movne	r2, #2
 80086f4:	2201      	moveq	r2, #1
 80086f6:	6122      	str	r2, [r4, #16]
 80086f8:	b1d5      	cbz	r5, 8008730 <__d2b+0x98>
 80086fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086fe:	4405      	add	r5, r0
 8008700:	f8c9 5000 	str.w	r5, [r9]
 8008704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008708:	f8c8 0000 	str.w	r0, [r8]
 800870c:	4620      	mov	r0, r4
 800870e:	b003      	add	sp, #12
 8008710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008718:	e7d5      	b.n	80086c6 <__d2b+0x2e>
 800871a:	6161      	str	r1, [r4, #20]
 800871c:	e7e5      	b.n	80086ea <__d2b+0x52>
 800871e:	a801      	add	r0, sp, #4
 8008720:	f7ff fce8 	bl	80080f4 <__lo0bits>
 8008724:	9b01      	ldr	r3, [sp, #4]
 8008726:	6163      	str	r3, [r4, #20]
 8008728:	2201      	movs	r2, #1
 800872a:	6122      	str	r2, [r4, #16]
 800872c:	3020      	adds	r0, #32
 800872e:	e7e3      	b.n	80086f8 <__d2b+0x60>
 8008730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008738:	f8c9 0000 	str.w	r0, [r9]
 800873c:	6918      	ldr	r0, [r3, #16]
 800873e:	f7ff fcb9 	bl	80080b4 <__hi0bits>
 8008742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008746:	e7df      	b.n	8008708 <__d2b+0x70>
 8008748:	08009b7c 	.word	0x08009b7c
 800874c:	08009c0c 	.word	0x08009c0c

08008750 <__ratio>:
 8008750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	4688      	mov	r8, r1
 8008756:	4669      	mov	r1, sp
 8008758:	4681      	mov	r9, r0
 800875a:	f7ff ff4d 	bl	80085f8 <__b2d>
 800875e:	a901      	add	r1, sp, #4
 8008760:	4640      	mov	r0, r8
 8008762:	ec55 4b10 	vmov	r4, r5, d0
 8008766:	f7ff ff47 	bl	80085f8 <__b2d>
 800876a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800876e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008772:	eba3 0c02 	sub.w	ip, r3, r2
 8008776:	e9dd 3200 	ldrd	r3, r2, [sp]
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008780:	ec51 0b10 	vmov	r0, r1, d0
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfd6      	itet	le
 8008788:	460a      	movle	r2, r1
 800878a:	462a      	movgt	r2, r5
 800878c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008790:	468b      	mov	fp, r1
 8008792:	462f      	mov	r7, r5
 8008794:	bfd4      	ite	le
 8008796:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800879a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800879e:	4620      	mov	r0, r4
 80087a0:	ee10 2a10 	vmov	r2, s0
 80087a4:	465b      	mov	r3, fp
 80087a6:	4639      	mov	r1, r7
 80087a8:	f7f8 f868 	bl	800087c <__aeabi_ddiv>
 80087ac:	ec41 0b10 	vmov	d0, r0, r1
 80087b0:	b003      	add	sp, #12
 80087b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087b6 <__copybits>:
 80087b6:	3901      	subs	r1, #1
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	1149      	asrs	r1, r1, #5
 80087bc:	6914      	ldr	r4, [r2, #16]
 80087be:	3101      	adds	r1, #1
 80087c0:	f102 0314 	add.w	r3, r2, #20
 80087c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087cc:	1f05      	subs	r5, r0, #4
 80087ce:	42a3      	cmp	r3, r4
 80087d0:	d30c      	bcc.n	80087ec <__copybits+0x36>
 80087d2:	1aa3      	subs	r3, r4, r2
 80087d4:	3b11      	subs	r3, #17
 80087d6:	f023 0303 	bic.w	r3, r3, #3
 80087da:	3211      	adds	r2, #17
 80087dc:	42a2      	cmp	r2, r4
 80087de:	bf88      	it	hi
 80087e0:	2300      	movhi	r3, #0
 80087e2:	4418      	add	r0, r3
 80087e4:	2300      	movs	r3, #0
 80087e6:	4288      	cmp	r0, r1
 80087e8:	d305      	bcc.n	80087f6 <__copybits+0x40>
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80087f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80087f4:	e7eb      	b.n	80087ce <__copybits+0x18>
 80087f6:	f840 3b04 	str.w	r3, [r0], #4
 80087fa:	e7f4      	b.n	80087e6 <__copybits+0x30>

080087fc <__any_on>:
 80087fc:	f100 0214 	add.w	r2, r0, #20
 8008800:	6900      	ldr	r0, [r0, #16]
 8008802:	114b      	asrs	r3, r1, #5
 8008804:	4298      	cmp	r0, r3
 8008806:	b510      	push	{r4, lr}
 8008808:	db11      	blt.n	800882e <__any_on+0x32>
 800880a:	dd0a      	ble.n	8008822 <__any_on+0x26>
 800880c:	f011 011f 	ands.w	r1, r1, #31
 8008810:	d007      	beq.n	8008822 <__any_on+0x26>
 8008812:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008816:	fa24 f001 	lsr.w	r0, r4, r1
 800881a:	fa00 f101 	lsl.w	r1, r0, r1
 800881e:	428c      	cmp	r4, r1
 8008820:	d10b      	bne.n	800883a <__any_on+0x3e>
 8008822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008826:	4293      	cmp	r3, r2
 8008828:	d803      	bhi.n	8008832 <__any_on+0x36>
 800882a:	2000      	movs	r0, #0
 800882c:	bd10      	pop	{r4, pc}
 800882e:	4603      	mov	r3, r0
 8008830:	e7f7      	b.n	8008822 <__any_on+0x26>
 8008832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008836:	2900      	cmp	r1, #0
 8008838:	d0f5      	beq.n	8008826 <__any_on+0x2a>
 800883a:	2001      	movs	r0, #1
 800883c:	e7f6      	b.n	800882c <__any_on+0x30>

0800883e <_calloc_r>:
 800883e:	b513      	push	{r0, r1, r4, lr}
 8008840:	434a      	muls	r2, r1
 8008842:	4611      	mov	r1, r2
 8008844:	9201      	str	r2, [sp, #4]
 8008846:	f000 f859 	bl	80088fc <_malloc_r>
 800884a:	4604      	mov	r4, r0
 800884c:	b118      	cbz	r0, 8008856 <_calloc_r+0x18>
 800884e:	9a01      	ldr	r2, [sp, #4]
 8008850:	2100      	movs	r1, #0
 8008852:	f7fc fdb9 	bl	80053c8 <memset>
 8008856:	4620      	mov	r0, r4
 8008858:	b002      	add	sp, #8
 800885a:	bd10      	pop	{r4, pc}

0800885c <_free_r>:
 800885c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800885e:	2900      	cmp	r1, #0
 8008860:	d048      	beq.n	80088f4 <_free_r+0x98>
 8008862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008866:	9001      	str	r0, [sp, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f1a1 0404 	sub.w	r4, r1, #4
 800886e:	bfb8      	it	lt
 8008870:	18e4      	addlt	r4, r4, r3
 8008872:	f000 fa7b 	bl	8008d6c <__malloc_lock>
 8008876:	4a20      	ldr	r2, [pc, #128]	; (80088f8 <_free_r+0x9c>)
 8008878:	9801      	ldr	r0, [sp, #4]
 800887a:	6813      	ldr	r3, [r2, #0]
 800887c:	4615      	mov	r5, r2
 800887e:	b933      	cbnz	r3, 800888e <_free_r+0x32>
 8008880:	6063      	str	r3, [r4, #4]
 8008882:	6014      	str	r4, [r2, #0]
 8008884:	b003      	add	sp, #12
 8008886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800888a:	f000 ba75 	b.w	8008d78 <__malloc_unlock>
 800888e:	42a3      	cmp	r3, r4
 8008890:	d90b      	bls.n	80088aa <_free_r+0x4e>
 8008892:	6821      	ldr	r1, [r4, #0]
 8008894:	1862      	adds	r2, r4, r1
 8008896:	4293      	cmp	r3, r2
 8008898:	bf04      	itt	eq
 800889a:	681a      	ldreq	r2, [r3, #0]
 800889c:	685b      	ldreq	r3, [r3, #4]
 800889e:	6063      	str	r3, [r4, #4]
 80088a0:	bf04      	itt	eq
 80088a2:	1852      	addeq	r2, r2, r1
 80088a4:	6022      	streq	r2, [r4, #0]
 80088a6:	602c      	str	r4, [r5, #0]
 80088a8:	e7ec      	b.n	8008884 <_free_r+0x28>
 80088aa:	461a      	mov	r2, r3
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	b10b      	cbz	r3, 80088b4 <_free_r+0x58>
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	d9fa      	bls.n	80088aa <_free_r+0x4e>
 80088b4:	6811      	ldr	r1, [r2, #0]
 80088b6:	1855      	adds	r5, r2, r1
 80088b8:	42a5      	cmp	r5, r4
 80088ba:	d10b      	bne.n	80088d4 <_free_r+0x78>
 80088bc:	6824      	ldr	r4, [r4, #0]
 80088be:	4421      	add	r1, r4
 80088c0:	1854      	adds	r4, r2, r1
 80088c2:	42a3      	cmp	r3, r4
 80088c4:	6011      	str	r1, [r2, #0]
 80088c6:	d1dd      	bne.n	8008884 <_free_r+0x28>
 80088c8:	681c      	ldr	r4, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	6053      	str	r3, [r2, #4]
 80088ce:	4421      	add	r1, r4
 80088d0:	6011      	str	r1, [r2, #0]
 80088d2:	e7d7      	b.n	8008884 <_free_r+0x28>
 80088d4:	d902      	bls.n	80088dc <_free_r+0x80>
 80088d6:	230c      	movs	r3, #12
 80088d8:	6003      	str	r3, [r0, #0]
 80088da:	e7d3      	b.n	8008884 <_free_r+0x28>
 80088dc:	6825      	ldr	r5, [r4, #0]
 80088de:	1961      	adds	r1, r4, r5
 80088e0:	428b      	cmp	r3, r1
 80088e2:	bf04      	itt	eq
 80088e4:	6819      	ldreq	r1, [r3, #0]
 80088e6:	685b      	ldreq	r3, [r3, #4]
 80088e8:	6063      	str	r3, [r4, #4]
 80088ea:	bf04      	itt	eq
 80088ec:	1949      	addeq	r1, r1, r5
 80088ee:	6021      	streq	r1, [r4, #0]
 80088f0:	6054      	str	r4, [r2, #4]
 80088f2:	e7c7      	b.n	8008884 <_free_r+0x28>
 80088f4:	b003      	add	sp, #12
 80088f6:	bd30      	pop	{r4, r5, pc}
 80088f8:	20000498 	.word	0x20000498

080088fc <_malloc_r>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	1ccd      	adds	r5, r1, #3
 8008900:	f025 0503 	bic.w	r5, r5, #3
 8008904:	3508      	adds	r5, #8
 8008906:	2d0c      	cmp	r5, #12
 8008908:	bf38      	it	cc
 800890a:	250c      	movcc	r5, #12
 800890c:	2d00      	cmp	r5, #0
 800890e:	4606      	mov	r6, r0
 8008910:	db01      	blt.n	8008916 <_malloc_r+0x1a>
 8008912:	42a9      	cmp	r1, r5
 8008914:	d903      	bls.n	800891e <_malloc_r+0x22>
 8008916:	230c      	movs	r3, #12
 8008918:	6033      	str	r3, [r6, #0]
 800891a:	2000      	movs	r0, #0
 800891c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891e:	f000 fa25 	bl	8008d6c <__malloc_lock>
 8008922:	4921      	ldr	r1, [pc, #132]	; (80089a8 <_malloc_r+0xac>)
 8008924:	680a      	ldr	r2, [r1, #0]
 8008926:	4614      	mov	r4, r2
 8008928:	b99c      	cbnz	r4, 8008952 <_malloc_r+0x56>
 800892a:	4f20      	ldr	r7, [pc, #128]	; (80089ac <_malloc_r+0xb0>)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	b923      	cbnz	r3, 800893a <_malloc_r+0x3e>
 8008930:	4621      	mov	r1, r4
 8008932:	4630      	mov	r0, r6
 8008934:	f000 f9a0 	bl	8008c78 <_sbrk_r>
 8008938:	6038      	str	r0, [r7, #0]
 800893a:	4629      	mov	r1, r5
 800893c:	4630      	mov	r0, r6
 800893e:	f000 f99b 	bl	8008c78 <_sbrk_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d123      	bne.n	800898e <_malloc_r+0x92>
 8008946:	230c      	movs	r3, #12
 8008948:	6033      	str	r3, [r6, #0]
 800894a:	4630      	mov	r0, r6
 800894c:	f000 fa14 	bl	8008d78 <__malloc_unlock>
 8008950:	e7e3      	b.n	800891a <_malloc_r+0x1e>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	1b5b      	subs	r3, r3, r5
 8008956:	d417      	bmi.n	8008988 <_malloc_r+0x8c>
 8008958:	2b0b      	cmp	r3, #11
 800895a:	d903      	bls.n	8008964 <_malloc_r+0x68>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	441c      	add	r4, r3
 8008960:	6025      	str	r5, [r4, #0]
 8008962:	e004      	b.n	800896e <_malloc_r+0x72>
 8008964:	6863      	ldr	r3, [r4, #4]
 8008966:	42a2      	cmp	r2, r4
 8008968:	bf0c      	ite	eq
 800896a:	600b      	streq	r3, [r1, #0]
 800896c:	6053      	strne	r3, [r2, #4]
 800896e:	4630      	mov	r0, r6
 8008970:	f000 fa02 	bl	8008d78 <__malloc_unlock>
 8008974:	f104 000b 	add.w	r0, r4, #11
 8008978:	1d23      	adds	r3, r4, #4
 800897a:	f020 0007 	bic.w	r0, r0, #7
 800897e:	1ac2      	subs	r2, r0, r3
 8008980:	d0cc      	beq.n	800891c <_malloc_r+0x20>
 8008982:	1a1b      	subs	r3, r3, r0
 8008984:	50a3      	str	r3, [r4, r2]
 8008986:	e7c9      	b.n	800891c <_malloc_r+0x20>
 8008988:	4622      	mov	r2, r4
 800898a:	6864      	ldr	r4, [r4, #4]
 800898c:	e7cc      	b.n	8008928 <_malloc_r+0x2c>
 800898e:	1cc4      	adds	r4, r0, #3
 8008990:	f024 0403 	bic.w	r4, r4, #3
 8008994:	42a0      	cmp	r0, r4
 8008996:	d0e3      	beq.n	8008960 <_malloc_r+0x64>
 8008998:	1a21      	subs	r1, r4, r0
 800899a:	4630      	mov	r0, r6
 800899c:	f000 f96c 	bl	8008c78 <_sbrk_r>
 80089a0:	3001      	adds	r0, #1
 80089a2:	d1dd      	bne.n	8008960 <_malloc_r+0x64>
 80089a4:	e7cf      	b.n	8008946 <_malloc_r+0x4a>
 80089a6:	bf00      	nop
 80089a8:	20000498 	.word	0x20000498
 80089ac:	2000049c 	.word	0x2000049c

080089b0 <__ssputs_r>:
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	688e      	ldr	r6, [r1, #8]
 80089b6:	429e      	cmp	r6, r3
 80089b8:	4682      	mov	sl, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	4690      	mov	r8, r2
 80089be:	461f      	mov	r7, r3
 80089c0:	d838      	bhi.n	8008a34 <__ssputs_r+0x84>
 80089c2:	898a      	ldrh	r2, [r1, #12]
 80089c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089c8:	d032      	beq.n	8008a30 <__ssputs_r+0x80>
 80089ca:	6825      	ldr	r5, [r4, #0]
 80089cc:	6909      	ldr	r1, [r1, #16]
 80089ce:	eba5 0901 	sub.w	r9, r5, r1
 80089d2:	6965      	ldr	r5, [r4, #20]
 80089d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089dc:	3301      	adds	r3, #1
 80089de:	444b      	add	r3, r9
 80089e0:	106d      	asrs	r5, r5, #1
 80089e2:	429d      	cmp	r5, r3
 80089e4:	bf38      	it	cc
 80089e6:	461d      	movcc	r5, r3
 80089e8:	0553      	lsls	r3, r2, #21
 80089ea:	d531      	bpl.n	8008a50 <__ssputs_r+0xa0>
 80089ec:	4629      	mov	r1, r5
 80089ee:	f7ff ff85 	bl	80088fc <_malloc_r>
 80089f2:	4606      	mov	r6, r0
 80089f4:	b950      	cbnz	r0, 8008a0c <__ssputs_r+0x5c>
 80089f6:	230c      	movs	r3, #12
 80089f8:	f8ca 3000 	str.w	r3, [sl]
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0c:	6921      	ldr	r1, [r4, #16]
 8008a0e:	464a      	mov	r2, r9
 8008a10:	f7ff fa4c 	bl	8007eac <memcpy>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	6126      	str	r6, [r4, #16]
 8008a22:	6165      	str	r5, [r4, #20]
 8008a24:	444e      	add	r6, r9
 8008a26:	eba5 0509 	sub.w	r5, r5, r9
 8008a2a:	6026      	str	r6, [r4, #0]
 8008a2c:	60a5      	str	r5, [r4, #8]
 8008a2e:	463e      	mov	r6, r7
 8008a30:	42be      	cmp	r6, r7
 8008a32:	d900      	bls.n	8008a36 <__ssputs_r+0x86>
 8008a34:	463e      	mov	r6, r7
 8008a36:	4632      	mov	r2, r6
 8008a38:	6820      	ldr	r0, [r4, #0]
 8008a3a:	4641      	mov	r1, r8
 8008a3c:	f000 f97c 	bl	8008d38 <memmove>
 8008a40:	68a3      	ldr	r3, [r4, #8]
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	1b9b      	subs	r3, r3, r6
 8008a46:	4432      	add	r2, r6
 8008a48:	60a3      	str	r3, [r4, #8]
 8008a4a:	6022      	str	r2, [r4, #0]
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	e7db      	b.n	8008a08 <__ssputs_r+0x58>
 8008a50:	462a      	mov	r2, r5
 8008a52:	f000 f997 	bl	8008d84 <_realloc_r>
 8008a56:	4606      	mov	r6, r0
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1e1      	bne.n	8008a20 <__ssputs_r+0x70>
 8008a5c:	6921      	ldr	r1, [r4, #16]
 8008a5e:	4650      	mov	r0, sl
 8008a60:	f7ff fefc 	bl	800885c <_free_r>
 8008a64:	e7c7      	b.n	80089f6 <__ssputs_r+0x46>
	...

08008a68 <_svfiprintf_r>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4698      	mov	r8, r3
 8008a6e:	898b      	ldrh	r3, [r1, #12]
 8008a70:	061b      	lsls	r3, r3, #24
 8008a72:	b09d      	sub	sp, #116	; 0x74
 8008a74:	4607      	mov	r7, r0
 8008a76:	460d      	mov	r5, r1
 8008a78:	4614      	mov	r4, r2
 8008a7a:	d50e      	bpl.n	8008a9a <_svfiprintf_r+0x32>
 8008a7c:	690b      	ldr	r3, [r1, #16]
 8008a7e:	b963      	cbnz	r3, 8008a9a <_svfiprintf_r+0x32>
 8008a80:	2140      	movs	r1, #64	; 0x40
 8008a82:	f7ff ff3b 	bl	80088fc <_malloc_r>
 8008a86:	6028      	str	r0, [r5, #0]
 8008a88:	6128      	str	r0, [r5, #16]
 8008a8a:	b920      	cbnz	r0, 8008a96 <_svfiprintf_r+0x2e>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	e0d1      	b.n	8008c3a <_svfiprintf_r+0x1d2>
 8008a96:	2340      	movs	r3, #64	; 0x40
 8008a98:	616b      	str	r3, [r5, #20]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9e:	2320      	movs	r3, #32
 8008aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aa8:	2330      	movs	r3, #48	; 0x30
 8008aaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c54 <_svfiprintf_r+0x1ec>
 8008aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ab2:	f04f 0901 	mov.w	r9, #1
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	469a      	mov	sl, r3
 8008aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008abe:	b10a      	cbz	r2, 8008ac4 <_svfiprintf_r+0x5c>
 8008ac0:	2a25      	cmp	r2, #37	; 0x25
 8008ac2:	d1f9      	bne.n	8008ab8 <_svfiprintf_r+0x50>
 8008ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ac8:	d00b      	beq.n	8008ae2 <_svfiprintf_r+0x7a>
 8008aca:	465b      	mov	r3, fp
 8008acc:	4622      	mov	r2, r4
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff ff6d 	bl	80089b0 <__ssputs_r>
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	f000 80aa 	beq.w	8008c30 <_svfiprintf_r+0x1c8>
 8008adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ade:	445a      	add	r2, fp
 8008ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 80a2 	beq.w	8008c30 <_svfiprintf_r+0x1c8>
 8008aec:	2300      	movs	r3, #0
 8008aee:	f04f 32ff 	mov.w	r2, #4294967295
 8008af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af6:	f10a 0a01 	add.w	sl, sl, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b02:	931a      	str	r3, [sp, #104]	; 0x68
 8008b04:	4654      	mov	r4, sl
 8008b06:	2205      	movs	r2, #5
 8008b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0c:	4851      	ldr	r0, [pc, #324]	; (8008c54 <_svfiprintf_r+0x1ec>)
 8008b0e:	f7f7 fb7f 	bl	8000210 <memchr>
 8008b12:	9a04      	ldr	r2, [sp, #16]
 8008b14:	b9d8      	cbnz	r0, 8008b4e <_svfiprintf_r+0xe6>
 8008b16:	06d0      	lsls	r0, r2, #27
 8008b18:	bf44      	itt	mi
 8008b1a:	2320      	movmi	r3, #32
 8008b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b20:	0711      	lsls	r1, r2, #28
 8008b22:	bf44      	itt	mi
 8008b24:	232b      	movmi	r3, #43	; 0x2b
 8008b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b30:	d015      	beq.n	8008b5e <_svfiprintf_r+0xf6>
 8008b32:	9a07      	ldr	r2, [sp, #28]
 8008b34:	4654      	mov	r4, sl
 8008b36:	2000      	movs	r0, #0
 8008b38:	f04f 0c0a 	mov.w	ip, #10
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b42:	3b30      	subs	r3, #48	; 0x30
 8008b44:	2b09      	cmp	r3, #9
 8008b46:	d94e      	bls.n	8008be6 <_svfiprintf_r+0x17e>
 8008b48:	b1b0      	cbz	r0, 8008b78 <_svfiprintf_r+0x110>
 8008b4a:	9207      	str	r2, [sp, #28]
 8008b4c:	e014      	b.n	8008b78 <_svfiprintf_r+0x110>
 8008b4e:	eba0 0308 	sub.w	r3, r0, r8
 8008b52:	fa09 f303 	lsl.w	r3, r9, r3
 8008b56:	4313      	orrs	r3, r2
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	46a2      	mov	sl, r4
 8008b5c:	e7d2      	b.n	8008b04 <_svfiprintf_r+0x9c>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	1d19      	adds	r1, r3, #4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	9103      	str	r1, [sp, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bfbb      	ittet	lt
 8008b6a:	425b      	neglt	r3, r3
 8008b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b70:	9307      	strge	r3, [sp, #28]
 8008b72:	9307      	strlt	r3, [sp, #28]
 8008b74:	bfb8      	it	lt
 8008b76:	9204      	strlt	r2, [sp, #16]
 8008b78:	7823      	ldrb	r3, [r4, #0]
 8008b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b7c:	d10c      	bne.n	8008b98 <_svfiprintf_r+0x130>
 8008b7e:	7863      	ldrb	r3, [r4, #1]
 8008b80:	2b2a      	cmp	r3, #42	; 0x2a
 8008b82:	d135      	bne.n	8008bf0 <_svfiprintf_r+0x188>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	1d1a      	adds	r2, r3, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	9203      	str	r2, [sp, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	bfb8      	it	lt
 8008b90:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b94:	3402      	adds	r4, #2
 8008b96:	9305      	str	r3, [sp, #20]
 8008b98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c64 <_svfiprintf_r+0x1fc>
 8008b9c:	7821      	ldrb	r1, [r4, #0]
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	4650      	mov	r0, sl
 8008ba2:	f7f7 fb35 	bl	8000210 <memchr>
 8008ba6:	b140      	cbz	r0, 8008bba <_svfiprintf_r+0x152>
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	eba0 000a 	sub.w	r0, r0, sl
 8008bae:	fa03 f000 	lsl.w	r0, r3, r0
 8008bb2:	9b04      	ldr	r3, [sp, #16]
 8008bb4:	4303      	orrs	r3, r0
 8008bb6:	3401      	adds	r4, #1
 8008bb8:	9304      	str	r3, [sp, #16]
 8008bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbe:	4826      	ldr	r0, [pc, #152]	; (8008c58 <_svfiprintf_r+0x1f0>)
 8008bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bc4:	2206      	movs	r2, #6
 8008bc6:	f7f7 fb23 	bl	8000210 <memchr>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d038      	beq.n	8008c40 <_svfiprintf_r+0x1d8>
 8008bce:	4b23      	ldr	r3, [pc, #140]	; (8008c5c <_svfiprintf_r+0x1f4>)
 8008bd0:	bb1b      	cbnz	r3, 8008c1a <_svfiprintf_r+0x1b2>
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	3307      	adds	r3, #7
 8008bd6:	f023 0307 	bic.w	r3, r3, #7
 8008bda:	3308      	adds	r3, #8
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	4433      	add	r3, r6
 8008be2:	9309      	str	r3, [sp, #36]	; 0x24
 8008be4:	e767      	b.n	8008ab6 <_svfiprintf_r+0x4e>
 8008be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bea:	460c      	mov	r4, r1
 8008bec:	2001      	movs	r0, #1
 8008bee:	e7a5      	b.n	8008b3c <_svfiprintf_r+0xd4>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	3401      	adds	r4, #1
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	f04f 0c0a 	mov.w	ip, #10
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c02:	3a30      	subs	r2, #48	; 0x30
 8008c04:	2a09      	cmp	r2, #9
 8008c06:	d903      	bls.n	8008c10 <_svfiprintf_r+0x1a8>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0c5      	beq.n	8008b98 <_svfiprintf_r+0x130>
 8008c0c:	9105      	str	r1, [sp, #20]
 8008c0e:	e7c3      	b.n	8008b98 <_svfiprintf_r+0x130>
 8008c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c14:	4604      	mov	r4, r0
 8008c16:	2301      	movs	r3, #1
 8008c18:	e7f0      	b.n	8008bfc <_svfiprintf_r+0x194>
 8008c1a:	ab03      	add	r3, sp, #12
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	462a      	mov	r2, r5
 8008c20:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <_svfiprintf_r+0x1f8>)
 8008c22:	a904      	add	r1, sp, #16
 8008c24:	4638      	mov	r0, r7
 8008c26:	f7fc fc77 	bl	8005518 <_printf_float>
 8008c2a:	1c42      	adds	r2, r0, #1
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	d1d6      	bne.n	8008bde <_svfiprintf_r+0x176>
 8008c30:	89ab      	ldrh	r3, [r5, #12]
 8008c32:	065b      	lsls	r3, r3, #25
 8008c34:	f53f af2c 	bmi.w	8008a90 <_svfiprintf_r+0x28>
 8008c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c3a:	b01d      	add	sp, #116	; 0x74
 8008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c40:	ab03      	add	r3, sp, #12
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	462a      	mov	r2, r5
 8008c46:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <_svfiprintf_r+0x1f8>)
 8008c48:	a904      	add	r1, sp, #16
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	f7fc ff08 	bl	8005a60 <_printf_i>
 8008c50:	e7eb      	b.n	8008c2a <_svfiprintf_r+0x1c2>
 8008c52:	bf00      	nop
 8008c54:	08009d6c 	.word	0x08009d6c
 8008c58:	08009d76 	.word	0x08009d76
 8008c5c:	08005519 	.word	0x08005519
 8008c60:	080089b1 	.word	0x080089b1
 8008c64:	08009d72 	.word	0x08009d72

08008c68 <nan>:
 8008c68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008c70 <nan+0x8>
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	00000000 	.word	0x00000000
 8008c74:	7ff80000 	.word	0x7ff80000

08008c78 <_sbrk_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d06      	ldr	r5, [pc, #24]	; (8008c94 <_sbrk_r+0x1c>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	602b      	str	r3, [r5, #0]
 8008c84:	f7f9 fbb8 	bl	80023f8 <_sbrk>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_sbrk_r+0x1a>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_sbrk_r+0x1a>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	20000ab0 	.word	0x20000ab0

08008c98 <strncmp>:
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	b16a      	cbz	r2, 8008cb8 <strncmp+0x20>
 8008c9c:	3901      	subs	r1, #1
 8008c9e:	1884      	adds	r4, r0, r2
 8008ca0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ca4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d103      	bne.n	8008cb4 <strncmp+0x1c>
 8008cac:	42a0      	cmp	r0, r4
 8008cae:	d001      	beq.n	8008cb4 <strncmp+0x1c>
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1f5      	bne.n	8008ca0 <strncmp+0x8>
 8008cb4:	1a98      	subs	r0, r3, r2
 8008cb6:	bd10      	pop	{r4, pc}
 8008cb8:	4610      	mov	r0, r2
 8008cba:	e7fc      	b.n	8008cb6 <strncmp+0x1e>

08008cbc <__ascii_wctomb>:
 8008cbc:	b149      	cbz	r1, 8008cd2 <__ascii_wctomb+0x16>
 8008cbe:	2aff      	cmp	r2, #255	; 0xff
 8008cc0:	bf85      	ittet	hi
 8008cc2:	238a      	movhi	r3, #138	; 0x8a
 8008cc4:	6003      	strhi	r3, [r0, #0]
 8008cc6:	700a      	strbls	r2, [r1, #0]
 8008cc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ccc:	bf98      	it	ls
 8008cce:	2001      	movls	r0, #1
 8008cd0:	4770      	bx	lr
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	4770      	bx	lr
	...

08008cd8 <__assert_func>:
 8008cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cda:	4614      	mov	r4, r2
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <__assert_func+0x2c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	68d8      	ldr	r0, [r3, #12]
 8008ce6:	b14c      	cbz	r4, 8008cfc <__assert_func+0x24>
 8008ce8:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <__assert_func+0x30>)
 8008cea:	9100      	str	r1, [sp, #0]
 8008cec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cf0:	4906      	ldr	r1, [pc, #24]	; (8008d0c <__assert_func+0x34>)
 8008cf2:	462b      	mov	r3, r5
 8008cf4:	f000 f80e 	bl	8008d14 <fiprintf>
 8008cf8:	f000 fa84 	bl	8009204 <abort>
 8008cfc:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <__assert_func+0x38>)
 8008cfe:	461c      	mov	r4, r3
 8008d00:	e7f3      	b.n	8008cea <__assert_func+0x12>
 8008d02:	bf00      	nop
 8008d04:	20000010 	.word	0x20000010
 8008d08:	08009d7d 	.word	0x08009d7d
 8008d0c:	08009d8a 	.word	0x08009d8a
 8008d10:	08009db8 	.word	0x08009db8

08008d14 <fiprintf>:
 8008d14:	b40e      	push	{r1, r2, r3}
 8008d16:	b503      	push	{r0, r1, lr}
 8008d18:	4601      	mov	r1, r0
 8008d1a:	ab03      	add	r3, sp, #12
 8008d1c:	4805      	ldr	r0, [pc, #20]	; (8008d34 <fiprintf+0x20>)
 8008d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d22:	6800      	ldr	r0, [r0, #0]
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	f000 f87d 	bl	8008e24 <_vfiprintf_r>
 8008d2a:	b002      	add	sp, #8
 8008d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d30:	b003      	add	sp, #12
 8008d32:	4770      	bx	lr
 8008d34:	20000010 	.word	0x20000010

08008d38 <memmove>:
 8008d38:	4288      	cmp	r0, r1
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	eb01 0402 	add.w	r4, r1, r2
 8008d40:	d902      	bls.n	8008d48 <memmove+0x10>
 8008d42:	4284      	cmp	r4, r0
 8008d44:	4623      	mov	r3, r4
 8008d46:	d807      	bhi.n	8008d58 <memmove+0x20>
 8008d48:	1e43      	subs	r3, r0, #1
 8008d4a:	42a1      	cmp	r1, r4
 8008d4c:	d008      	beq.n	8008d60 <memmove+0x28>
 8008d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d56:	e7f8      	b.n	8008d4a <memmove+0x12>
 8008d58:	4402      	add	r2, r0
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	428a      	cmp	r2, r1
 8008d5e:	d100      	bne.n	8008d62 <memmove+0x2a>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d6a:	e7f7      	b.n	8008d5c <memmove+0x24>

08008d6c <__malloc_lock>:
 8008d6c:	4801      	ldr	r0, [pc, #4]	; (8008d74 <__malloc_lock+0x8>)
 8008d6e:	f000 bc09 	b.w	8009584 <__retarget_lock_acquire_recursive>
 8008d72:	bf00      	nop
 8008d74:	20000ab8 	.word	0x20000ab8

08008d78 <__malloc_unlock>:
 8008d78:	4801      	ldr	r0, [pc, #4]	; (8008d80 <__malloc_unlock+0x8>)
 8008d7a:	f000 bc04 	b.w	8009586 <__retarget_lock_release_recursive>
 8008d7e:	bf00      	nop
 8008d80:	20000ab8 	.word	0x20000ab8

08008d84 <_realloc_r>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	4607      	mov	r7, r0
 8008d88:	4614      	mov	r4, r2
 8008d8a:	460e      	mov	r6, r1
 8008d8c:	b921      	cbnz	r1, 8008d98 <_realloc_r+0x14>
 8008d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d92:	4611      	mov	r1, r2
 8008d94:	f7ff bdb2 	b.w	80088fc <_malloc_r>
 8008d98:	b922      	cbnz	r2, 8008da4 <_realloc_r+0x20>
 8008d9a:	f7ff fd5f 	bl	800885c <_free_r>
 8008d9e:	4625      	mov	r5, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da4:	f000 fc54 	bl	8009650 <_malloc_usable_size_r>
 8008da8:	42a0      	cmp	r0, r4
 8008daa:	d20f      	bcs.n	8008dcc <_realloc_r+0x48>
 8008dac:	4621      	mov	r1, r4
 8008dae:	4638      	mov	r0, r7
 8008db0:	f7ff fda4 	bl	80088fc <_malloc_r>
 8008db4:	4605      	mov	r5, r0
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d0f2      	beq.n	8008da0 <_realloc_r+0x1c>
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	f7ff f875 	bl	8007eac <memcpy>
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7ff fd49 	bl	800885c <_free_r>
 8008dca:	e7e9      	b.n	8008da0 <_realloc_r+0x1c>
 8008dcc:	4635      	mov	r5, r6
 8008dce:	e7e7      	b.n	8008da0 <_realloc_r+0x1c>

08008dd0 <__sfputc_r>:
 8008dd0:	6893      	ldr	r3, [r2, #8]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	b410      	push	{r4}
 8008dd8:	6093      	str	r3, [r2, #8]
 8008dda:	da08      	bge.n	8008dee <__sfputc_r+0x1e>
 8008ddc:	6994      	ldr	r4, [r2, #24]
 8008dde:	42a3      	cmp	r3, r4
 8008de0:	db01      	blt.n	8008de6 <__sfputc_r+0x16>
 8008de2:	290a      	cmp	r1, #10
 8008de4:	d103      	bne.n	8008dee <__sfputc_r+0x1e>
 8008de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dea:	f000 b94b 	b.w	8009084 <__swbuf_r>
 8008dee:	6813      	ldr	r3, [r2, #0]
 8008df0:	1c58      	adds	r0, r3, #1
 8008df2:	6010      	str	r0, [r2, #0]
 8008df4:	7019      	strb	r1, [r3, #0]
 8008df6:	4608      	mov	r0, r1
 8008df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <__sfputs_r>:
 8008dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e00:	4606      	mov	r6, r0
 8008e02:	460f      	mov	r7, r1
 8008e04:	4614      	mov	r4, r2
 8008e06:	18d5      	adds	r5, r2, r3
 8008e08:	42ac      	cmp	r4, r5
 8008e0a:	d101      	bne.n	8008e10 <__sfputs_r+0x12>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e007      	b.n	8008e20 <__sfputs_r+0x22>
 8008e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e14:	463a      	mov	r2, r7
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7ff ffda 	bl	8008dd0 <__sfputc_r>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d1f3      	bne.n	8008e08 <__sfputs_r+0xa>
 8008e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e24 <_vfiprintf_r>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	460d      	mov	r5, r1
 8008e2a:	b09d      	sub	sp, #116	; 0x74
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	4698      	mov	r8, r3
 8008e30:	4606      	mov	r6, r0
 8008e32:	b118      	cbz	r0, 8008e3c <_vfiprintf_r+0x18>
 8008e34:	6983      	ldr	r3, [r0, #24]
 8008e36:	b90b      	cbnz	r3, 8008e3c <_vfiprintf_r+0x18>
 8008e38:	f000 fb06 	bl	8009448 <__sinit>
 8008e3c:	4b89      	ldr	r3, [pc, #548]	; (8009064 <_vfiprintf_r+0x240>)
 8008e3e:	429d      	cmp	r5, r3
 8008e40:	d11b      	bne.n	8008e7a <_vfiprintf_r+0x56>
 8008e42:	6875      	ldr	r5, [r6, #4]
 8008e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e46:	07d9      	lsls	r1, r3, #31
 8008e48:	d405      	bmi.n	8008e56 <_vfiprintf_r+0x32>
 8008e4a:	89ab      	ldrh	r3, [r5, #12]
 8008e4c:	059a      	lsls	r2, r3, #22
 8008e4e:	d402      	bmi.n	8008e56 <_vfiprintf_r+0x32>
 8008e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e52:	f000 fb97 	bl	8009584 <__retarget_lock_acquire_recursive>
 8008e56:	89ab      	ldrh	r3, [r5, #12]
 8008e58:	071b      	lsls	r3, r3, #28
 8008e5a:	d501      	bpl.n	8008e60 <_vfiprintf_r+0x3c>
 8008e5c:	692b      	ldr	r3, [r5, #16]
 8008e5e:	b9eb      	cbnz	r3, 8008e9c <_vfiprintf_r+0x78>
 8008e60:	4629      	mov	r1, r5
 8008e62:	4630      	mov	r0, r6
 8008e64:	f000 f960 	bl	8009128 <__swsetup_r>
 8008e68:	b1c0      	cbz	r0, 8008e9c <_vfiprintf_r+0x78>
 8008e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e6c:	07dc      	lsls	r4, r3, #31
 8008e6e:	d50e      	bpl.n	8008e8e <_vfiprintf_r+0x6a>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	b01d      	add	sp, #116	; 0x74
 8008e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7a:	4b7b      	ldr	r3, [pc, #492]	; (8009068 <_vfiprintf_r+0x244>)
 8008e7c:	429d      	cmp	r5, r3
 8008e7e:	d101      	bne.n	8008e84 <_vfiprintf_r+0x60>
 8008e80:	68b5      	ldr	r5, [r6, #8]
 8008e82:	e7df      	b.n	8008e44 <_vfiprintf_r+0x20>
 8008e84:	4b79      	ldr	r3, [pc, #484]	; (800906c <_vfiprintf_r+0x248>)
 8008e86:	429d      	cmp	r5, r3
 8008e88:	bf08      	it	eq
 8008e8a:	68f5      	ldreq	r5, [r6, #12]
 8008e8c:	e7da      	b.n	8008e44 <_vfiprintf_r+0x20>
 8008e8e:	89ab      	ldrh	r3, [r5, #12]
 8008e90:	0598      	lsls	r0, r3, #22
 8008e92:	d4ed      	bmi.n	8008e70 <_vfiprintf_r+0x4c>
 8008e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e96:	f000 fb76 	bl	8009586 <__retarget_lock_release_recursive>
 8008e9a:	e7e9      	b.n	8008e70 <_vfiprintf_r+0x4c>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eaa:	2330      	movs	r3, #48	; 0x30
 8008eac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009070 <_vfiprintf_r+0x24c>
 8008eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eb4:	f04f 0901 	mov.w	r9, #1
 8008eb8:	4623      	mov	r3, r4
 8008eba:	469a      	mov	sl, r3
 8008ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec0:	b10a      	cbz	r2, 8008ec6 <_vfiprintf_r+0xa2>
 8008ec2:	2a25      	cmp	r2, #37	; 0x25
 8008ec4:	d1f9      	bne.n	8008eba <_vfiprintf_r+0x96>
 8008ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8008eca:	d00b      	beq.n	8008ee4 <_vfiprintf_r+0xc0>
 8008ecc:	465b      	mov	r3, fp
 8008ece:	4622      	mov	r2, r4
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ff93 	bl	8008dfe <__sfputs_r>
 8008ed8:	3001      	adds	r0, #1
 8008eda:	f000 80aa 	beq.w	8009032 <_vfiprintf_r+0x20e>
 8008ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee0:	445a      	add	r2, fp
 8008ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 80a2 	beq.w	8009032 <_vfiprintf_r+0x20e>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef8:	f10a 0a01 	add.w	sl, sl, #1
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	9307      	str	r3, [sp, #28]
 8008f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f04:	931a      	str	r3, [sp, #104]	; 0x68
 8008f06:	4654      	mov	r4, sl
 8008f08:	2205      	movs	r2, #5
 8008f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0e:	4858      	ldr	r0, [pc, #352]	; (8009070 <_vfiprintf_r+0x24c>)
 8008f10:	f7f7 f97e 	bl	8000210 <memchr>
 8008f14:	9a04      	ldr	r2, [sp, #16]
 8008f16:	b9d8      	cbnz	r0, 8008f50 <_vfiprintf_r+0x12c>
 8008f18:	06d1      	lsls	r1, r2, #27
 8008f1a:	bf44      	itt	mi
 8008f1c:	2320      	movmi	r3, #32
 8008f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f22:	0713      	lsls	r3, r2, #28
 8008f24:	bf44      	itt	mi
 8008f26:	232b      	movmi	r3, #43	; 0x2b
 8008f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f30:	2b2a      	cmp	r3, #42	; 0x2a
 8008f32:	d015      	beq.n	8008f60 <_vfiprintf_r+0x13c>
 8008f34:	9a07      	ldr	r2, [sp, #28]
 8008f36:	4654      	mov	r4, sl
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f04f 0c0a 	mov.w	ip, #10
 8008f3e:	4621      	mov	r1, r4
 8008f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f44:	3b30      	subs	r3, #48	; 0x30
 8008f46:	2b09      	cmp	r3, #9
 8008f48:	d94e      	bls.n	8008fe8 <_vfiprintf_r+0x1c4>
 8008f4a:	b1b0      	cbz	r0, 8008f7a <_vfiprintf_r+0x156>
 8008f4c:	9207      	str	r2, [sp, #28]
 8008f4e:	e014      	b.n	8008f7a <_vfiprintf_r+0x156>
 8008f50:	eba0 0308 	sub.w	r3, r0, r8
 8008f54:	fa09 f303 	lsl.w	r3, r9, r3
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	46a2      	mov	sl, r4
 8008f5e:	e7d2      	b.n	8008f06 <_vfiprintf_r+0xe2>
 8008f60:	9b03      	ldr	r3, [sp, #12]
 8008f62:	1d19      	adds	r1, r3, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	9103      	str	r1, [sp, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	bfbb      	ittet	lt
 8008f6c:	425b      	neglt	r3, r3
 8008f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f72:	9307      	strge	r3, [sp, #28]
 8008f74:	9307      	strlt	r3, [sp, #28]
 8008f76:	bfb8      	it	lt
 8008f78:	9204      	strlt	r2, [sp, #16]
 8008f7a:	7823      	ldrb	r3, [r4, #0]
 8008f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f7e:	d10c      	bne.n	8008f9a <_vfiprintf_r+0x176>
 8008f80:	7863      	ldrb	r3, [r4, #1]
 8008f82:	2b2a      	cmp	r3, #42	; 0x2a
 8008f84:	d135      	bne.n	8008ff2 <_vfiprintf_r+0x1ce>
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	1d1a      	adds	r2, r3, #4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	9203      	str	r2, [sp, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfb8      	it	lt
 8008f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f96:	3402      	adds	r4, #2
 8008f98:	9305      	str	r3, [sp, #20]
 8008f9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009080 <_vfiprintf_r+0x25c>
 8008f9e:	7821      	ldrb	r1, [r4, #0]
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	f7f7 f934 	bl	8000210 <memchr>
 8008fa8:	b140      	cbz	r0, 8008fbc <_vfiprintf_r+0x198>
 8008faa:	2340      	movs	r3, #64	; 0x40
 8008fac:	eba0 000a 	sub.w	r0, r0, sl
 8008fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	4303      	orrs	r3, r0
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc0:	482c      	ldr	r0, [pc, #176]	; (8009074 <_vfiprintf_r+0x250>)
 8008fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fc6:	2206      	movs	r2, #6
 8008fc8:	f7f7 f922 	bl	8000210 <memchr>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d03f      	beq.n	8009050 <_vfiprintf_r+0x22c>
 8008fd0:	4b29      	ldr	r3, [pc, #164]	; (8009078 <_vfiprintf_r+0x254>)
 8008fd2:	bb1b      	cbnz	r3, 800901c <_vfiprintf_r+0x1f8>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	3307      	adds	r3, #7
 8008fd8:	f023 0307 	bic.w	r3, r3, #7
 8008fdc:	3308      	adds	r3, #8
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe2:	443b      	add	r3, r7
 8008fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe6:	e767      	b.n	8008eb8 <_vfiprintf_r+0x94>
 8008fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fec:	460c      	mov	r4, r1
 8008fee:	2001      	movs	r0, #1
 8008ff0:	e7a5      	b.n	8008f3e <_vfiprintf_r+0x11a>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	3401      	adds	r4, #1
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f04f 0c0a 	mov.w	ip, #10
 8008ffe:	4620      	mov	r0, r4
 8009000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009004:	3a30      	subs	r2, #48	; 0x30
 8009006:	2a09      	cmp	r2, #9
 8009008:	d903      	bls.n	8009012 <_vfiprintf_r+0x1ee>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c5      	beq.n	8008f9a <_vfiprintf_r+0x176>
 800900e:	9105      	str	r1, [sp, #20]
 8009010:	e7c3      	b.n	8008f9a <_vfiprintf_r+0x176>
 8009012:	fb0c 2101 	mla	r1, ip, r1, r2
 8009016:	4604      	mov	r4, r0
 8009018:	2301      	movs	r3, #1
 800901a:	e7f0      	b.n	8008ffe <_vfiprintf_r+0x1da>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4b16      	ldr	r3, [pc, #88]	; (800907c <_vfiprintf_r+0x258>)
 8009024:	a904      	add	r1, sp, #16
 8009026:	4630      	mov	r0, r6
 8009028:	f7fc fa76 	bl	8005518 <_printf_float>
 800902c:	4607      	mov	r7, r0
 800902e:	1c78      	adds	r0, r7, #1
 8009030:	d1d6      	bne.n	8008fe0 <_vfiprintf_r+0x1bc>
 8009032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009034:	07d9      	lsls	r1, r3, #31
 8009036:	d405      	bmi.n	8009044 <_vfiprintf_r+0x220>
 8009038:	89ab      	ldrh	r3, [r5, #12]
 800903a:	059a      	lsls	r2, r3, #22
 800903c:	d402      	bmi.n	8009044 <_vfiprintf_r+0x220>
 800903e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009040:	f000 faa1 	bl	8009586 <__retarget_lock_release_recursive>
 8009044:	89ab      	ldrh	r3, [r5, #12]
 8009046:	065b      	lsls	r3, r3, #25
 8009048:	f53f af12 	bmi.w	8008e70 <_vfiprintf_r+0x4c>
 800904c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800904e:	e711      	b.n	8008e74 <_vfiprintf_r+0x50>
 8009050:	ab03      	add	r3, sp, #12
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	462a      	mov	r2, r5
 8009056:	4b09      	ldr	r3, [pc, #36]	; (800907c <_vfiprintf_r+0x258>)
 8009058:	a904      	add	r1, sp, #16
 800905a:	4630      	mov	r0, r6
 800905c:	f7fc fd00 	bl	8005a60 <_printf_i>
 8009060:	e7e4      	b.n	800902c <_vfiprintf_r+0x208>
 8009062:	bf00      	nop
 8009064:	08009ddc 	.word	0x08009ddc
 8009068:	08009dfc 	.word	0x08009dfc
 800906c:	08009dbc 	.word	0x08009dbc
 8009070:	08009d6c 	.word	0x08009d6c
 8009074:	08009d76 	.word	0x08009d76
 8009078:	08005519 	.word	0x08005519
 800907c:	08008dff 	.word	0x08008dff
 8009080:	08009d72 	.word	0x08009d72

08009084 <__swbuf_r>:
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	460e      	mov	r6, r1
 8009088:	4614      	mov	r4, r2
 800908a:	4605      	mov	r5, r0
 800908c:	b118      	cbz	r0, 8009096 <__swbuf_r+0x12>
 800908e:	6983      	ldr	r3, [r0, #24]
 8009090:	b90b      	cbnz	r3, 8009096 <__swbuf_r+0x12>
 8009092:	f000 f9d9 	bl	8009448 <__sinit>
 8009096:	4b21      	ldr	r3, [pc, #132]	; (800911c <__swbuf_r+0x98>)
 8009098:	429c      	cmp	r4, r3
 800909a:	d12b      	bne.n	80090f4 <__swbuf_r+0x70>
 800909c:	686c      	ldr	r4, [r5, #4]
 800909e:	69a3      	ldr	r3, [r4, #24]
 80090a0:	60a3      	str	r3, [r4, #8]
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	071a      	lsls	r2, r3, #28
 80090a6:	d52f      	bpl.n	8009108 <__swbuf_r+0x84>
 80090a8:	6923      	ldr	r3, [r4, #16]
 80090aa:	b36b      	cbz	r3, 8009108 <__swbuf_r+0x84>
 80090ac:	6923      	ldr	r3, [r4, #16]
 80090ae:	6820      	ldr	r0, [r4, #0]
 80090b0:	1ac0      	subs	r0, r0, r3
 80090b2:	6963      	ldr	r3, [r4, #20]
 80090b4:	b2f6      	uxtb	r6, r6
 80090b6:	4283      	cmp	r3, r0
 80090b8:	4637      	mov	r7, r6
 80090ba:	dc04      	bgt.n	80090c6 <__swbuf_r+0x42>
 80090bc:	4621      	mov	r1, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 f92e 	bl	8009320 <_fflush_r>
 80090c4:	bb30      	cbnz	r0, 8009114 <__swbuf_r+0x90>
 80090c6:	68a3      	ldr	r3, [r4, #8]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	60a3      	str	r3, [r4, #8]
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	6022      	str	r2, [r4, #0]
 80090d2:	701e      	strb	r6, [r3, #0]
 80090d4:	6963      	ldr	r3, [r4, #20]
 80090d6:	3001      	adds	r0, #1
 80090d8:	4283      	cmp	r3, r0
 80090da:	d004      	beq.n	80090e6 <__swbuf_r+0x62>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	07db      	lsls	r3, r3, #31
 80090e0:	d506      	bpl.n	80090f0 <__swbuf_r+0x6c>
 80090e2:	2e0a      	cmp	r6, #10
 80090e4:	d104      	bne.n	80090f0 <__swbuf_r+0x6c>
 80090e6:	4621      	mov	r1, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	f000 f919 	bl	8009320 <_fflush_r>
 80090ee:	b988      	cbnz	r0, 8009114 <__swbuf_r+0x90>
 80090f0:	4638      	mov	r0, r7
 80090f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f4:	4b0a      	ldr	r3, [pc, #40]	; (8009120 <__swbuf_r+0x9c>)
 80090f6:	429c      	cmp	r4, r3
 80090f8:	d101      	bne.n	80090fe <__swbuf_r+0x7a>
 80090fa:	68ac      	ldr	r4, [r5, #8]
 80090fc:	e7cf      	b.n	800909e <__swbuf_r+0x1a>
 80090fe:	4b09      	ldr	r3, [pc, #36]	; (8009124 <__swbuf_r+0xa0>)
 8009100:	429c      	cmp	r4, r3
 8009102:	bf08      	it	eq
 8009104:	68ec      	ldreq	r4, [r5, #12]
 8009106:	e7ca      	b.n	800909e <__swbuf_r+0x1a>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f80c 	bl	8009128 <__swsetup_r>
 8009110:	2800      	cmp	r0, #0
 8009112:	d0cb      	beq.n	80090ac <__swbuf_r+0x28>
 8009114:	f04f 37ff 	mov.w	r7, #4294967295
 8009118:	e7ea      	b.n	80090f0 <__swbuf_r+0x6c>
 800911a:	bf00      	nop
 800911c:	08009ddc 	.word	0x08009ddc
 8009120:	08009dfc 	.word	0x08009dfc
 8009124:	08009dbc 	.word	0x08009dbc

08009128 <__swsetup_r>:
 8009128:	4b32      	ldr	r3, [pc, #200]	; (80091f4 <__swsetup_r+0xcc>)
 800912a:	b570      	push	{r4, r5, r6, lr}
 800912c:	681d      	ldr	r5, [r3, #0]
 800912e:	4606      	mov	r6, r0
 8009130:	460c      	mov	r4, r1
 8009132:	b125      	cbz	r5, 800913e <__swsetup_r+0x16>
 8009134:	69ab      	ldr	r3, [r5, #24]
 8009136:	b913      	cbnz	r3, 800913e <__swsetup_r+0x16>
 8009138:	4628      	mov	r0, r5
 800913a:	f000 f985 	bl	8009448 <__sinit>
 800913e:	4b2e      	ldr	r3, [pc, #184]	; (80091f8 <__swsetup_r+0xd0>)
 8009140:	429c      	cmp	r4, r3
 8009142:	d10f      	bne.n	8009164 <__swsetup_r+0x3c>
 8009144:	686c      	ldr	r4, [r5, #4]
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800914c:	0719      	lsls	r1, r3, #28
 800914e:	d42c      	bmi.n	80091aa <__swsetup_r+0x82>
 8009150:	06dd      	lsls	r5, r3, #27
 8009152:	d411      	bmi.n	8009178 <__swsetup_r+0x50>
 8009154:	2309      	movs	r3, #9
 8009156:	6033      	str	r3, [r6, #0]
 8009158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	e03e      	b.n	80091e2 <__swsetup_r+0xba>
 8009164:	4b25      	ldr	r3, [pc, #148]	; (80091fc <__swsetup_r+0xd4>)
 8009166:	429c      	cmp	r4, r3
 8009168:	d101      	bne.n	800916e <__swsetup_r+0x46>
 800916a:	68ac      	ldr	r4, [r5, #8]
 800916c:	e7eb      	b.n	8009146 <__swsetup_r+0x1e>
 800916e:	4b24      	ldr	r3, [pc, #144]	; (8009200 <__swsetup_r+0xd8>)
 8009170:	429c      	cmp	r4, r3
 8009172:	bf08      	it	eq
 8009174:	68ec      	ldreq	r4, [r5, #12]
 8009176:	e7e6      	b.n	8009146 <__swsetup_r+0x1e>
 8009178:	0758      	lsls	r0, r3, #29
 800917a:	d512      	bpl.n	80091a2 <__swsetup_r+0x7a>
 800917c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800917e:	b141      	cbz	r1, 8009192 <__swsetup_r+0x6a>
 8009180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009184:	4299      	cmp	r1, r3
 8009186:	d002      	beq.n	800918e <__swsetup_r+0x66>
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff fb67 	bl	800885c <_free_r>
 800918e:	2300      	movs	r3, #0
 8009190:	6363      	str	r3, [r4, #52]	; 0x34
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	2300      	movs	r3, #0
 800919c:	6063      	str	r3, [r4, #4]
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f043 0308 	orr.w	r3, r3, #8
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	b94b      	cbnz	r3, 80091c2 <__swsetup_r+0x9a>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091b8:	d003      	beq.n	80091c2 <__swsetup_r+0x9a>
 80091ba:	4621      	mov	r1, r4
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 fa07 	bl	80095d0 <__smakebuf_r>
 80091c2:	89a0      	ldrh	r0, [r4, #12]
 80091c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091c8:	f010 0301 	ands.w	r3, r0, #1
 80091cc:	d00a      	beq.n	80091e4 <__swsetup_r+0xbc>
 80091ce:	2300      	movs	r3, #0
 80091d0:	60a3      	str	r3, [r4, #8]
 80091d2:	6963      	ldr	r3, [r4, #20]
 80091d4:	425b      	negs	r3, r3
 80091d6:	61a3      	str	r3, [r4, #24]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	b943      	cbnz	r3, 80091ee <__swsetup_r+0xc6>
 80091dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091e0:	d1ba      	bne.n	8009158 <__swsetup_r+0x30>
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	0781      	lsls	r1, r0, #30
 80091e6:	bf58      	it	pl
 80091e8:	6963      	ldrpl	r3, [r4, #20]
 80091ea:	60a3      	str	r3, [r4, #8]
 80091ec:	e7f4      	b.n	80091d8 <__swsetup_r+0xb0>
 80091ee:	2000      	movs	r0, #0
 80091f0:	e7f7      	b.n	80091e2 <__swsetup_r+0xba>
 80091f2:	bf00      	nop
 80091f4:	20000010 	.word	0x20000010
 80091f8:	08009ddc 	.word	0x08009ddc
 80091fc:	08009dfc 	.word	0x08009dfc
 8009200:	08009dbc 	.word	0x08009dbc

08009204 <abort>:
 8009204:	b508      	push	{r3, lr}
 8009206:	2006      	movs	r0, #6
 8009208:	f000 fa52 	bl	80096b0 <raise>
 800920c:	2001      	movs	r0, #1
 800920e:	f7f9 f87b 	bl	8002308 <_exit>
	...

08009214 <__sflush_r>:
 8009214:	898a      	ldrh	r2, [r1, #12]
 8009216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800921a:	4605      	mov	r5, r0
 800921c:	0710      	lsls	r0, r2, #28
 800921e:	460c      	mov	r4, r1
 8009220:	d458      	bmi.n	80092d4 <__sflush_r+0xc0>
 8009222:	684b      	ldr	r3, [r1, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	dc05      	bgt.n	8009234 <__sflush_r+0x20>
 8009228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	dc02      	bgt.n	8009234 <__sflush_r+0x20>
 800922e:	2000      	movs	r0, #0
 8009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009236:	2e00      	cmp	r6, #0
 8009238:	d0f9      	beq.n	800922e <__sflush_r+0x1a>
 800923a:	2300      	movs	r3, #0
 800923c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009240:	682f      	ldr	r7, [r5, #0]
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	d032      	beq.n	80092ac <__sflush_r+0x98>
 8009246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	075a      	lsls	r2, r3, #29
 800924c:	d505      	bpl.n	800925a <__sflush_r+0x46>
 800924e:	6863      	ldr	r3, [r4, #4]
 8009250:	1ac0      	subs	r0, r0, r3
 8009252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009254:	b10b      	cbz	r3, 800925a <__sflush_r+0x46>
 8009256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009258:	1ac0      	subs	r0, r0, r3
 800925a:	2300      	movs	r3, #0
 800925c:	4602      	mov	r2, r0
 800925e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009260:	6a21      	ldr	r1, [r4, #32]
 8009262:	4628      	mov	r0, r5
 8009264:	47b0      	blx	r6
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	d106      	bne.n	800927a <__sflush_r+0x66>
 800926c:	6829      	ldr	r1, [r5, #0]
 800926e:	291d      	cmp	r1, #29
 8009270:	d82c      	bhi.n	80092cc <__sflush_r+0xb8>
 8009272:	4a2a      	ldr	r2, [pc, #168]	; (800931c <__sflush_r+0x108>)
 8009274:	40ca      	lsrs	r2, r1
 8009276:	07d6      	lsls	r6, r2, #31
 8009278:	d528      	bpl.n	80092cc <__sflush_r+0xb8>
 800927a:	2200      	movs	r2, #0
 800927c:	6062      	str	r2, [r4, #4]
 800927e:	04d9      	lsls	r1, r3, #19
 8009280:	6922      	ldr	r2, [r4, #16]
 8009282:	6022      	str	r2, [r4, #0]
 8009284:	d504      	bpl.n	8009290 <__sflush_r+0x7c>
 8009286:	1c42      	adds	r2, r0, #1
 8009288:	d101      	bne.n	800928e <__sflush_r+0x7a>
 800928a:	682b      	ldr	r3, [r5, #0]
 800928c:	b903      	cbnz	r3, 8009290 <__sflush_r+0x7c>
 800928e:	6560      	str	r0, [r4, #84]	; 0x54
 8009290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009292:	602f      	str	r7, [r5, #0]
 8009294:	2900      	cmp	r1, #0
 8009296:	d0ca      	beq.n	800922e <__sflush_r+0x1a>
 8009298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800929c:	4299      	cmp	r1, r3
 800929e:	d002      	beq.n	80092a6 <__sflush_r+0x92>
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7ff fadb 	bl	800885c <_free_r>
 80092a6:	2000      	movs	r0, #0
 80092a8:	6360      	str	r0, [r4, #52]	; 0x34
 80092aa:	e7c1      	b.n	8009230 <__sflush_r+0x1c>
 80092ac:	6a21      	ldr	r1, [r4, #32]
 80092ae:	2301      	movs	r3, #1
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b0      	blx	r6
 80092b4:	1c41      	adds	r1, r0, #1
 80092b6:	d1c7      	bne.n	8009248 <__sflush_r+0x34>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0c4      	beq.n	8009248 <__sflush_r+0x34>
 80092be:	2b1d      	cmp	r3, #29
 80092c0:	d001      	beq.n	80092c6 <__sflush_r+0xb2>
 80092c2:	2b16      	cmp	r3, #22
 80092c4:	d101      	bne.n	80092ca <__sflush_r+0xb6>
 80092c6:	602f      	str	r7, [r5, #0]
 80092c8:	e7b1      	b.n	800922e <__sflush_r+0x1a>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	e7ad      	b.n	8009230 <__sflush_r+0x1c>
 80092d4:	690f      	ldr	r7, [r1, #16]
 80092d6:	2f00      	cmp	r7, #0
 80092d8:	d0a9      	beq.n	800922e <__sflush_r+0x1a>
 80092da:	0793      	lsls	r3, r2, #30
 80092dc:	680e      	ldr	r6, [r1, #0]
 80092de:	bf08      	it	eq
 80092e0:	694b      	ldreq	r3, [r1, #20]
 80092e2:	600f      	str	r7, [r1, #0]
 80092e4:	bf18      	it	ne
 80092e6:	2300      	movne	r3, #0
 80092e8:	eba6 0807 	sub.w	r8, r6, r7
 80092ec:	608b      	str	r3, [r1, #8]
 80092ee:	f1b8 0f00 	cmp.w	r8, #0
 80092f2:	dd9c      	ble.n	800922e <__sflush_r+0x1a>
 80092f4:	6a21      	ldr	r1, [r4, #32]
 80092f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092f8:	4643      	mov	r3, r8
 80092fa:	463a      	mov	r2, r7
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b0      	blx	r6
 8009300:	2800      	cmp	r0, #0
 8009302:	dc06      	bgt.n	8009312 <__sflush_r+0xfe>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	e78e      	b.n	8009230 <__sflush_r+0x1c>
 8009312:	4407      	add	r7, r0
 8009314:	eba8 0800 	sub.w	r8, r8, r0
 8009318:	e7e9      	b.n	80092ee <__sflush_r+0xda>
 800931a:	bf00      	nop
 800931c:	20400001 	.word	0x20400001

08009320 <_fflush_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	690b      	ldr	r3, [r1, #16]
 8009324:	4605      	mov	r5, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b913      	cbnz	r3, 8009330 <_fflush_r+0x10>
 800932a:	2500      	movs	r5, #0
 800932c:	4628      	mov	r0, r5
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	b118      	cbz	r0, 800933a <_fflush_r+0x1a>
 8009332:	6983      	ldr	r3, [r0, #24]
 8009334:	b90b      	cbnz	r3, 800933a <_fflush_r+0x1a>
 8009336:	f000 f887 	bl	8009448 <__sinit>
 800933a:	4b14      	ldr	r3, [pc, #80]	; (800938c <_fflush_r+0x6c>)
 800933c:	429c      	cmp	r4, r3
 800933e:	d11b      	bne.n	8009378 <_fflush_r+0x58>
 8009340:	686c      	ldr	r4, [r5, #4]
 8009342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0ef      	beq.n	800932a <_fflush_r+0xa>
 800934a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800934c:	07d0      	lsls	r0, r2, #31
 800934e:	d404      	bmi.n	800935a <_fflush_r+0x3a>
 8009350:	0599      	lsls	r1, r3, #22
 8009352:	d402      	bmi.n	800935a <_fflush_r+0x3a>
 8009354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009356:	f000 f915 	bl	8009584 <__retarget_lock_acquire_recursive>
 800935a:	4628      	mov	r0, r5
 800935c:	4621      	mov	r1, r4
 800935e:	f7ff ff59 	bl	8009214 <__sflush_r>
 8009362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009364:	07da      	lsls	r2, r3, #31
 8009366:	4605      	mov	r5, r0
 8009368:	d4e0      	bmi.n	800932c <_fflush_r+0xc>
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	059b      	lsls	r3, r3, #22
 800936e:	d4dd      	bmi.n	800932c <_fflush_r+0xc>
 8009370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009372:	f000 f908 	bl	8009586 <__retarget_lock_release_recursive>
 8009376:	e7d9      	b.n	800932c <_fflush_r+0xc>
 8009378:	4b05      	ldr	r3, [pc, #20]	; (8009390 <_fflush_r+0x70>)
 800937a:	429c      	cmp	r4, r3
 800937c:	d101      	bne.n	8009382 <_fflush_r+0x62>
 800937e:	68ac      	ldr	r4, [r5, #8]
 8009380:	e7df      	b.n	8009342 <_fflush_r+0x22>
 8009382:	4b04      	ldr	r3, [pc, #16]	; (8009394 <_fflush_r+0x74>)
 8009384:	429c      	cmp	r4, r3
 8009386:	bf08      	it	eq
 8009388:	68ec      	ldreq	r4, [r5, #12]
 800938a:	e7da      	b.n	8009342 <_fflush_r+0x22>
 800938c:	08009ddc 	.word	0x08009ddc
 8009390:	08009dfc 	.word	0x08009dfc
 8009394:	08009dbc 	.word	0x08009dbc

08009398 <std>:
 8009398:	2300      	movs	r3, #0
 800939a:	b510      	push	{r4, lr}
 800939c:	4604      	mov	r4, r0
 800939e:	e9c0 3300 	strd	r3, r3, [r0]
 80093a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093a6:	6083      	str	r3, [r0, #8]
 80093a8:	8181      	strh	r1, [r0, #12]
 80093aa:	6643      	str	r3, [r0, #100]	; 0x64
 80093ac:	81c2      	strh	r2, [r0, #14]
 80093ae:	6183      	str	r3, [r0, #24]
 80093b0:	4619      	mov	r1, r3
 80093b2:	2208      	movs	r2, #8
 80093b4:	305c      	adds	r0, #92	; 0x5c
 80093b6:	f7fc f807 	bl	80053c8 <memset>
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <std+0x38>)
 80093bc:	6263      	str	r3, [r4, #36]	; 0x24
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <std+0x3c>)
 80093c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80093c2:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <std+0x40>)
 80093c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093c6:	4b05      	ldr	r3, [pc, #20]	; (80093dc <std+0x44>)
 80093c8:	6224      	str	r4, [r4, #32]
 80093ca:	6323      	str	r3, [r4, #48]	; 0x30
 80093cc:	bd10      	pop	{r4, pc}
 80093ce:	bf00      	nop
 80093d0:	080096e9 	.word	0x080096e9
 80093d4:	0800970b 	.word	0x0800970b
 80093d8:	08009743 	.word	0x08009743
 80093dc:	08009767 	.word	0x08009767

080093e0 <_cleanup_r>:
 80093e0:	4901      	ldr	r1, [pc, #4]	; (80093e8 <_cleanup_r+0x8>)
 80093e2:	f000 b8af 	b.w	8009544 <_fwalk_reent>
 80093e6:	bf00      	nop
 80093e8:	08009321 	.word	0x08009321

080093ec <__sfmoreglue>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	1e4a      	subs	r2, r1, #1
 80093f0:	2568      	movs	r5, #104	; 0x68
 80093f2:	4355      	muls	r5, r2
 80093f4:	460e      	mov	r6, r1
 80093f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093fa:	f7ff fa7f 	bl	80088fc <_malloc_r>
 80093fe:	4604      	mov	r4, r0
 8009400:	b140      	cbz	r0, 8009414 <__sfmoreglue+0x28>
 8009402:	2100      	movs	r1, #0
 8009404:	e9c0 1600 	strd	r1, r6, [r0]
 8009408:	300c      	adds	r0, #12
 800940a:	60a0      	str	r0, [r4, #8]
 800940c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009410:	f7fb ffda 	bl	80053c8 <memset>
 8009414:	4620      	mov	r0, r4
 8009416:	bd70      	pop	{r4, r5, r6, pc}

08009418 <__sfp_lock_acquire>:
 8009418:	4801      	ldr	r0, [pc, #4]	; (8009420 <__sfp_lock_acquire+0x8>)
 800941a:	f000 b8b3 	b.w	8009584 <__retarget_lock_acquire_recursive>
 800941e:	bf00      	nop
 8009420:	20000abc 	.word	0x20000abc

08009424 <__sfp_lock_release>:
 8009424:	4801      	ldr	r0, [pc, #4]	; (800942c <__sfp_lock_release+0x8>)
 8009426:	f000 b8ae 	b.w	8009586 <__retarget_lock_release_recursive>
 800942a:	bf00      	nop
 800942c:	20000abc 	.word	0x20000abc

08009430 <__sinit_lock_acquire>:
 8009430:	4801      	ldr	r0, [pc, #4]	; (8009438 <__sinit_lock_acquire+0x8>)
 8009432:	f000 b8a7 	b.w	8009584 <__retarget_lock_acquire_recursive>
 8009436:	bf00      	nop
 8009438:	20000ab7 	.word	0x20000ab7

0800943c <__sinit_lock_release>:
 800943c:	4801      	ldr	r0, [pc, #4]	; (8009444 <__sinit_lock_release+0x8>)
 800943e:	f000 b8a2 	b.w	8009586 <__retarget_lock_release_recursive>
 8009442:	bf00      	nop
 8009444:	20000ab7 	.word	0x20000ab7

08009448 <__sinit>:
 8009448:	b510      	push	{r4, lr}
 800944a:	4604      	mov	r4, r0
 800944c:	f7ff fff0 	bl	8009430 <__sinit_lock_acquire>
 8009450:	69a3      	ldr	r3, [r4, #24]
 8009452:	b11b      	cbz	r3, 800945c <__sinit+0x14>
 8009454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009458:	f7ff bff0 	b.w	800943c <__sinit_lock_release>
 800945c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009460:	6523      	str	r3, [r4, #80]	; 0x50
 8009462:	4b13      	ldr	r3, [pc, #76]	; (80094b0 <__sinit+0x68>)
 8009464:	4a13      	ldr	r2, [pc, #76]	; (80094b4 <__sinit+0x6c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	62a2      	str	r2, [r4, #40]	; 0x28
 800946a:	42a3      	cmp	r3, r4
 800946c:	bf04      	itt	eq
 800946e:	2301      	moveq	r3, #1
 8009470:	61a3      	streq	r3, [r4, #24]
 8009472:	4620      	mov	r0, r4
 8009474:	f000 f820 	bl	80094b8 <__sfp>
 8009478:	6060      	str	r0, [r4, #4]
 800947a:	4620      	mov	r0, r4
 800947c:	f000 f81c 	bl	80094b8 <__sfp>
 8009480:	60a0      	str	r0, [r4, #8]
 8009482:	4620      	mov	r0, r4
 8009484:	f000 f818 	bl	80094b8 <__sfp>
 8009488:	2200      	movs	r2, #0
 800948a:	60e0      	str	r0, [r4, #12]
 800948c:	2104      	movs	r1, #4
 800948e:	6860      	ldr	r0, [r4, #4]
 8009490:	f7ff ff82 	bl	8009398 <std>
 8009494:	68a0      	ldr	r0, [r4, #8]
 8009496:	2201      	movs	r2, #1
 8009498:	2109      	movs	r1, #9
 800949a:	f7ff ff7d 	bl	8009398 <std>
 800949e:	68e0      	ldr	r0, [r4, #12]
 80094a0:	2202      	movs	r2, #2
 80094a2:	2112      	movs	r1, #18
 80094a4:	f7ff ff78 	bl	8009398 <std>
 80094a8:	2301      	movs	r3, #1
 80094aa:	61a3      	str	r3, [r4, #24]
 80094ac:	e7d2      	b.n	8009454 <__sinit+0xc>
 80094ae:	bf00      	nop
 80094b0:	08009970 	.word	0x08009970
 80094b4:	080093e1 	.word	0x080093e1

080094b8 <__sfp>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	4607      	mov	r7, r0
 80094bc:	f7ff ffac 	bl	8009418 <__sfp_lock_acquire>
 80094c0:	4b1e      	ldr	r3, [pc, #120]	; (800953c <__sfp+0x84>)
 80094c2:	681e      	ldr	r6, [r3, #0]
 80094c4:	69b3      	ldr	r3, [r6, #24]
 80094c6:	b913      	cbnz	r3, 80094ce <__sfp+0x16>
 80094c8:	4630      	mov	r0, r6
 80094ca:	f7ff ffbd 	bl	8009448 <__sinit>
 80094ce:	3648      	adds	r6, #72	; 0x48
 80094d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	d503      	bpl.n	80094e0 <__sfp+0x28>
 80094d8:	6833      	ldr	r3, [r6, #0]
 80094da:	b30b      	cbz	r3, 8009520 <__sfp+0x68>
 80094dc:	6836      	ldr	r6, [r6, #0]
 80094de:	e7f7      	b.n	80094d0 <__sfp+0x18>
 80094e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094e4:	b9d5      	cbnz	r5, 800951c <__sfp+0x64>
 80094e6:	4b16      	ldr	r3, [pc, #88]	; (8009540 <__sfp+0x88>)
 80094e8:	60e3      	str	r3, [r4, #12]
 80094ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094ee:	6665      	str	r5, [r4, #100]	; 0x64
 80094f0:	f000 f847 	bl	8009582 <__retarget_lock_init_recursive>
 80094f4:	f7ff ff96 	bl	8009424 <__sfp_lock_release>
 80094f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009500:	6025      	str	r5, [r4, #0]
 8009502:	61a5      	str	r5, [r4, #24]
 8009504:	2208      	movs	r2, #8
 8009506:	4629      	mov	r1, r5
 8009508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800950c:	f7fb ff5c 	bl	80053c8 <memset>
 8009510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009518:	4620      	mov	r0, r4
 800951a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951c:	3468      	adds	r4, #104	; 0x68
 800951e:	e7d9      	b.n	80094d4 <__sfp+0x1c>
 8009520:	2104      	movs	r1, #4
 8009522:	4638      	mov	r0, r7
 8009524:	f7ff ff62 	bl	80093ec <__sfmoreglue>
 8009528:	4604      	mov	r4, r0
 800952a:	6030      	str	r0, [r6, #0]
 800952c:	2800      	cmp	r0, #0
 800952e:	d1d5      	bne.n	80094dc <__sfp+0x24>
 8009530:	f7ff ff78 	bl	8009424 <__sfp_lock_release>
 8009534:	230c      	movs	r3, #12
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	e7ee      	b.n	8009518 <__sfp+0x60>
 800953a:	bf00      	nop
 800953c:	08009970 	.word	0x08009970
 8009540:	ffff0001 	.word	0xffff0001

08009544 <_fwalk_reent>:
 8009544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009548:	4606      	mov	r6, r0
 800954a:	4688      	mov	r8, r1
 800954c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009550:	2700      	movs	r7, #0
 8009552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009556:	f1b9 0901 	subs.w	r9, r9, #1
 800955a:	d505      	bpl.n	8009568 <_fwalk_reent+0x24>
 800955c:	6824      	ldr	r4, [r4, #0]
 800955e:	2c00      	cmp	r4, #0
 8009560:	d1f7      	bne.n	8009552 <_fwalk_reent+0xe>
 8009562:	4638      	mov	r0, r7
 8009564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009568:	89ab      	ldrh	r3, [r5, #12]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d907      	bls.n	800957e <_fwalk_reent+0x3a>
 800956e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009572:	3301      	adds	r3, #1
 8009574:	d003      	beq.n	800957e <_fwalk_reent+0x3a>
 8009576:	4629      	mov	r1, r5
 8009578:	4630      	mov	r0, r6
 800957a:	47c0      	blx	r8
 800957c:	4307      	orrs	r7, r0
 800957e:	3568      	adds	r5, #104	; 0x68
 8009580:	e7e9      	b.n	8009556 <_fwalk_reent+0x12>

08009582 <__retarget_lock_init_recursive>:
 8009582:	4770      	bx	lr

08009584 <__retarget_lock_acquire_recursive>:
 8009584:	4770      	bx	lr

08009586 <__retarget_lock_release_recursive>:
 8009586:	4770      	bx	lr

08009588 <__swhatbuf_r>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	460e      	mov	r6, r1
 800958c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009590:	2900      	cmp	r1, #0
 8009592:	b096      	sub	sp, #88	; 0x58
 8009594:	4614      	mov	r4, r2
 8009596:	461d      	mov	r5, r3
 8009598:	da07      	bge.n	80095aa <__swhatbuf_r+0x22>
 800959a:	2300      	movs	r3, #0
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	89b3      	ldrh	r3, [r6, #12]
 80095a0:	061a      	lsls	r2, r3, #24
 80095a2:	d410      	bmi.n	80095c6 <__swhatbuf_r+0x3e>
 80095a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a8:	e00e      	b.n	80095c8 <__swhatbuf_r+0x40>
 80095aa:	466a      	mov	r2, sp
 80095ac:	f000 f902 	bl	80097b4 <_fstat_r>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	dbf2      	blt.n	800959a <__swhatbuf_r+0x12>
 80095b4:	9a01      	ldr	r2, [sp, #4]
 80095b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095be:	425a      	negs	r2, r3
 80095c0:	415a      	adcs	r2, r3
 80095c2:	602a      	str	r2, [r5, #0]
 80095c4:	e7ee      	b.n	80095a4 <__swhatbuf_r+0x1c>
 80095c6:	2340      	movs	r3, #64	; 0x40
 80095c8:	2000      	movs	r0, #0
 80095ca:	6023      	str	r3, [r4, #0]
 80095cc:	b016      	add	sp, #88	; 0x58
 80095ce:	bd70      	pop	{r4, r5, r6, pc}

080095d0 <__smakebuf_r>:
 80095d0:	898b      	ldrh	r3, [r1, #12]
 80095d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095d4:	079d      	lsls	r5, r3, #30
 80095d6:	4606      	mov	r6, r0
 80095d8:	460c      	mov	r4, r1
 80095da:	d507      	bpl.n	80095ec <__smakebuf_r+0x1c>
 80095dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	6123      	str	r3, [r4, #16]
 80095e4:	2301      	movs	r3, #1
 80095e6:	6163      	str	r3, [r4, #20]
 80095e8:	b002      	add	sp, #8
 80095ea:	bd70      	pop	{r4, r5, r6, pc}
 80095ec:	ab01      	add	r3, sp, #4
 80095ee:	466a      	mov	r2, sp
 80095f0:	f7ff ffca 	bl	8009588 <__swhatbuf_r>
 80095f4:	9900      	ldr	r1, [sp, #0]
 80095f6:	4605      	mov	r5, r0
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff f97f 	bl	80088fc <_malloc_r>
 80095fe:	b948      	cbnz	r0, 8009614 <__smakebuf_r+0x44>
 8009600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009604:	059a      	lsls	r2, r3, #22
 8009606:	d4ef      	bmi.n	80095e8 <__smakebuf_r+0x18>
 8009608:	f023 0303 	bic.w	r3, r3, #3
 800960c:	f043 0302 	orr.w	r3, r3, #2
 8009610:	81a3      	strh	r3, [r4, #12]
 8009612:	e7e3      	b.n	80095dc <__smakebuf_r+0xc>
 8009614:	4b0d      	ldr	r3, [pc, #52]	; (800964c <__smakebuf_r+0x7c>)
 8009616:	62b3      	str	r3, [r6, #40]	; 0x28
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	6020      	str	r0, [r4, #0]
 800961c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009620:	81a3      	strh	r3, [r4, #12]
 8009622:	9b00      	ldr	r3, [sp, #0]
 8009624:	6163      	str	r3, [r4, #20]
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	6120      	str	r0, [r4, #16]
 800962a:	b15b      	cbz	r3, 8009644 <__smakebuf_r+0x74>
 800962c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009630:	4630      	mov	r0, r6
 8009632:	f000 f8d1 	bl	80097d8 <_isatty_r>
 8009636:	b128      	cbz	r0, 8009644 <__smakebuf_r+0x74>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	f043 0301 	orr.w	r3, r3, #1
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	89a0      	ldrh	r0, [r4, #12]
 8009646:	4305      	orrs	r5, r0
 8009648:	81a5      	strh	r5, [r4, #12]
 800964a:	e7cd      	b.n	80095e8 <__smakebuf_r+0x18>
 800964c:	080093e1 	.word	0x080093e1

08009650 <_malloc_usable_size_r>:
 8009650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009654:	1f18      	subs	r0, r3, #4
 8009656:	2b00      	cmp	r3, #0
 8009658:	bfbc      	itt	lt
 800965a:	580b      	ldrlt	r3, [r1, r0]
 800965c:	18c0      	addlt	r0, r0, r3
 800965e:	4770      	bx	lr

08009660 <_raise_r>:
 8009660:	291f      	cmp	r1, #31
 8009662:	b538      	push	{r3, r4, r5, lr}
 8009664:	4604      	mov	r4, r0
 8009666:	460d      	mov	r5, r1
 8009668:	d904      	bls.n	8009674 <_raise_r+0x14>
 800966a:	2316      	movs	r3, #22
 800966c:	6003      	str	r3, [r0, #0]
 800966e:	f04f 30ff 	mov.w	r0, #4294967295
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009676:	b112      	cbz	r2, 800967e <_raise_r+0x1e>
 8009678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800967c:	b94b      	cbnz	r3, 8009692 <_raise_r+0x32>
 800967e:	4620      	mov	r0, r4
 8009680:	f000 f830 	bl	80096e4 <_getpid_r>
 8009684:	462a      	mov	r2, r5
 8009686:	4601      	mov	r1, r0
 8009688:	4620      	mov	r0, r4
 800968a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800968e:	f000 b817 	b.w	80096c0 <_kill_r>
 8009692:	2b01      	cmp	r3, #1
 8009694:	d00a      	beq.n	80096ac <_raise_r+0x4c>
 8009696:	1c59      	adds	r1, r3, #1
 8009698:	d103      	bne.n	80096a2 <_raise_r+0x42>
 800969a:	2316      	movs	r3, #22
 800969c:	6003      	str	r3, [r0, #0]
 800969e:	2001      	movs	r0, #1
 80096a0:	e7e7      	b.n	8009672 <_raise_r+0x12>
 80096a2:	2400      	movs	r4, #0
 80096a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096a8:	4628      	mov	r0, r5
 80096aa:	4798      	blx	r3
 80096ac:	2000      	movs	r0, #0
 80096ae:	e7e0      	b.n	8009672 <_raise_r+0x12>

080096b0 <raise>:
 80096b0:	4b02      	ldr	r3, [pc, #8]	; (80096bc <raise+0xc>)
 80096b2:	4601      	mov	r1, r0
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	f7ff bfd3 	b.w	8009660 <_raise_r>
 80096ba:	bf00      	nop
 80096bc:	20000010 	.word	0x20000010

080096c0 <_kill_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d07      	ldr	r5, [pc, #28]	; (80096e0 <_kill_r+0x20>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	4611      	mov	r1, r2
 80096cc:	602b      	str	r3, [r5, #0]
 80096ce:	f7f8 fe0b 	bl	80022e8 <_kill>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d102      	bne.n	80096dc <_kill_r+0x1c>
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	b103      	cbz	r3, 80096dc <_kill_r+0x1c>
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	20000ab0 	.word	0x20000ab0

080096e4 <_getpid_r>:
 80096e4:	f7f8 bdf8 	b.w	80022d8 <_getpid>

080096e8 <__sread>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	f000 f894 	bl	800981c <_read_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	bfab      	itete	ge
 80096f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096fa:	89a3      	ldrhlt	r3, [r4, #12]
 80096fc:	181b      	addge	r3, r3, r0
 80096fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009702:	bfac      	ite	ge
 8009704:	6563      	strge	r3, [r4, #84]	; 0x54
 8009706:	81a3      	strhlt	r3, [r4, #12]
 8009708:	bd10      	pop	{r4, pc}

0800970a <__swrite>:
 800970a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970e:	461f      	mov	r7, r3
 8009710:	898b      	ldrh	r3, [r1, #12]
 8009712:	05db      	lsls	r3, r3, #23
 8009714:	4605      	mov	r5, r0
 8009716:	460c      	mov	r4, r1
 8009718:	4616      	mov	r6, r2
 800971a:	d505      	bpl.n	8009728 <__swrite+0x1e>
 800971c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009720:	2302      	movs	r3, #2
 8009722:	2200      	movs	r2, #0
 8009724:	f000 f868 	bl	80097f8 <_lseek_r>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800972e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	4632      	mov	r2, r6
 8009736:	463b      	mov	r3, r7
 8009738:	4628      	mov	r0, r5
 800973a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800973e:	f000 b817 	b.w	8009770 <_write_r>

08009742 <__sseek>:
 8009742:	b510      	push	{r4, lr}
 8009744:	460c      	mov	r4, r1
 8009746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974a:	f000 f855 	bl	80097f8 <_lseek_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	bf15      	itete	ne
 8009754:	6560      	strne	r0, [r4, #84]	; 0x54
 8009756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800975a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800975e:	81a3      	strheq	r3, [r4, #12]
 8009760:	bf18      	it	ne
 8009762:	81a3      	strhne	r3, [r4, #12]
 8009764:	bd10      	pop	{r4, pc}

08009766 <__sclose>:
 8009766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976a:	f000 b813 	b.w	8009794 <_close_r>
	...

08009770 <_write_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4d07      	ldr	r5, [pc, #28]	; (8009790 <_write_r+0x20>)
 8009774:	4604      	mov	r4, r0
 8009776:	4608      	mov	r0, r1
 8009778:	4611      	mov	r1, r2
 800977a:	2200      	movs	r2, #0
 800977c:	602a      	str	r2, [r5, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	f7f8 fde9 	bl	8002356 <_write>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_write_r+0x1e>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	b103      	cbz	r3, 800978e <_write_r+0x1e>
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	20000ab0 	.word	0x20000ab0

08009794 <_close_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4d06      	ldr	r5, [pc, #24]	; (80097b0 <_close_r+0x1c>)
 8009798:	2300      	movs	r3, #0
 800979a:	4604      	mov	r4, r0
 800979c:	4608      	mov	r0, r1
 800979e:	602b      	str	r3, [r5, #0]
 80097a0:	f7f8 fdf5 	bl	800238e <_close>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_close_r+0x1a>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_close_r+0x1a>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	20000ab0 	.word	0x20000ab0

080097b4 <_fstat_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4d07      	ldr	r5, [pc, #28]	; (80097d4 <_fstat_r+0x20>)
 80097b8:	2300      	movs	r3, #0
 80097ba:	4604      	mov	r4, r0
 80097bc:	4608      	mov	r0, r1
 80097be:	4611      	mov	r1, r2
 80097c0:	602b      	str	r3, [r5, #0]
 80097c2:	f7f8 fdf0 	bl	80023a6 <_fstat>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	d102      	bne.n	80097d0 <_fstat_r+0x1c>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	b103      	cbz	r3, 80097d0 <_fstat_r+0x1c>
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	bd38      	pop	{r3, r4, r5, pc}
 80097d2:	bf00      	nop
 80097d4:	20000ab0 	.word	0x20000ab0

080097d8 <_isatty_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d06      	ldr	r5, [pc, #24]	; (80097f4 <_isatty_r+0x1c>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	f7f8 fdef 	bl	80023c6 <_isatty>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_isatty_r+0x1a>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_isatty_r+0x1a>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20000ab0 	.word	0x20000ab0

080097f8 <_lseek_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d07      	ldr	r5, [pc, #28]	; (8009818 <_lseek_r+0x20>)
 80097fc:	4604      	mov	r4, r0
 80097fe:	4608      	mov	r0, r1
 8009800:	4611      	mov	r1, r2
 8009802:	2200      	movs	r2, #0
 8009804:	602a      	str	r2, [r5, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f7f8 fde8 	bl	80023dc <_lseek>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_lseek_r+0x1e>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_lseek_r+0x1e>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	20000ab0 	.word	0x20000ab0

0800981c <_read_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d07      	ldr	r5, [pc, #28]	; (800983c <_read_r+0x20>)
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	2200      	movs	r2, #0
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f7f8 fd76 	bl	800231c <_read>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_read_r+0x1e>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_read_r+0x1e>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	20000ab0 	.word	0x20000ab0

08009840 <_init>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	bf00      	nop
 8009844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	469e      	mov	lr, r3
 800984a:	4770      	bx	lr

0800984c <_fini>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr
